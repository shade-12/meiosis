/*! For license information please see 0.5f1cdcb9.chunk.js.LICENSE.txt */
(this.webpackJsonpmeiosis=this.webpackJsonpmeiosis||[]).push([[0],[function(e,t,n){"use strict";e.exports=n(75)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(19);function o(e,t){if(null==e)return{};var n,o,i=Object(r.a)(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},function(e,t,n){"use strict";function r(e){var t,n,o="";if("string"===typeof e||"number"===typeof e)o+=e;else if("object"===typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},function(e,t,n){"use strict";var r=n(1),o=n(2),i=n(0),a=n.n(i),l=(n(5),n(40)),u=n.n(l),s=n(107),c=n(136),d=n(105),f=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var i=t.defaultTheme,l=t.withTheme,f=void 0!==l&&l,p=t.name,h=Object(o.a)(t,["defaultTheme","withTheme","name"]);var m=p,v=Object(s.a)(e,Object(r.a)({defaultTheme:i,Component:n,name:p||n.displayName,classNamePrefix:m},h)),b=a.a.forwardRef((function(e,t){e.classes;var l,u=e.innerRef,s=Object(o.a)(e,["classes","innerRef"]),h=v(Object(r.a)({},n.defaultProps,e)),m=s;return("string"===typeof p||f)&&(l=Object(d.a)()||i,p&&(m=Object(c.a)({theme:l,name:p,props:s})),f&&!m.theme&&(m.theme=l)),a.a.createElement(n,Object(r.a)({ref:u||t,classes:h},m))}));return u()(b,n),b}},p=n(20);t.a=function(e,t){return f(e,Object(r.a)({defaultTheme:p.a},t))}},function(e,t,n){e.exports=n(79)()},function(e,t,n){"use strict";function r(e){return e.charAt(0).toUpperCase()+e.slice(1)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function o(e){if(e.type)return e;if("#"===e.charAt(0))return o(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(["Material-UI: Unsupported `".concat(e,"` color."),"We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()."].join("\n"));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map((function(e){return parseFloat(e)}))}}function i(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function a(e,t){var n=l(e),r=l(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function l(e){var t="hsl"===(e=o(e)).type?o(function(e){var t=(e=o(e)).values,n=t[0],r=t[1]/100,a=t[2]/100,l=r*Math.min(a,1-a),u=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return a-l*Math.max(Math.min(t-3,9-t,1),-1)},s="rgb",c=[Math.round(255*u(0)),Math.round(255*u(8)),Math.round(255*u(4))];return"hsla"===e.type&&(s+="a",c.push(t[3])),i({type:s,values:c})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function u(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.15;return l(e)>.5?c(e,t):d(e,t)}function s(e,t){return e=o(e),t=r(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,i(e)}function c(e,t){if(e=o(e),t=r(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return i(e)}function d(e,t){if(e=o(e),t=r(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return i(e)}n.d(t,"d",(function(){return a})),n.d(t,"b",(function(){return u})),n.d(t,"c",(function(){return s})),n.d(t,"a",(function(){return c})),n.d(t,"e",(function(){return d}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(0),o=n(22);function i(e,t){return r.useMemo((function(){return null==e&&null==t?null:function(n){Object(o.a)(e,n),Object(o.a)(t,n)}}),[e,t])}},function(e,t,n){"use strict";!function e(){if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(t){console.error(t)}}}(),e.exports=n(76)},,,,function(e,t,n){"use strict";var r=n(54),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return"undefined"===typeof e}function l(e){return null!==e&&"object"===typeof e}function u(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function s(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!==e&&"undefined"!==typeof e)if("object"!==typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"===typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!==typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!==typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"===typeof e},isNumber:function(e){return"number"===typeof e},isObject:l,isPlainObject:u,isUndefined:a,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:s,isStream:function(e){return l(e)&&s(e.pipe)},isURLSearchParams:function(e){return"undefined"!==typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"===typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!==typeof window&&"undefined"!==typeof document)},forEach:c,merge:function e(){var t={};function n(n,r){u(t[r])&&u(n)?t[r]=e(t[r],n):u(n)?t[r]=e({},n):i(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"===typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(35);var o=n(38);function i(e){return function(e){if(Array.isArray(e))return Object(r.a)(e)}(e)||function(e){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||Object(o.a)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(u){o=!0,i=u}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}}(e,t)||function(e,t){if(e){if("string"===typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}n.d(t,"a",(function(){return o}))},function(e,t,n){"use strict";function r(e){return(r="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(0),o="undefined"!==typeof window?r.useLayoutEffect:r.useEffect;function i(e){var t=r.useRef(e);return o((function(){t.current=e})),r.useCallback((function(){return t.current.apply(void 0,arguments)}),[])}},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(46),o=Object(r.a)();t.a=o},function(e,t,n){"use strict";var r=n(1),o=n(17);function i(e){return e&&"object"===Object(o.a)(e)&&e.constructor===Object}t.a=function(e,t){return t?function e(t,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},a=o.clone?Object(r.a)({},t):t;return i(t)&&i(n)&&Object.keys(n).forEach((function(r){"__proto__"!==r&&(i(n[r])&&r in t?a[r]=e(t[r],n[r],o):a[r]=n[r])})),a}(e,t,{clone:!1}):e}},function(e,t,n){"use strict";function r(e,t){"function"===typeof e?e(t):e&&(e.current=t)}n.d(t,"a",(function(){return r}))},,function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},,function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(38);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(u){o=!0,i=u}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}}(e,t)||Object(r.a)(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}n.d(t,"a",(function(){return o}))},function(e,t,n){"use strict";var r=n(0),o=n.n(r);t.a=o.a.createContext(null)},,,,,,function(e,t,n){"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";e.exports=n(81)},function(e,t,n){"use strict";var r=n(0),o=n.n(r).a.createContext(null);t.a=o},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(35);function o(e,t){if(e){if("string"===typeof e)return Object(r.a)(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Object(r.a)(e,t):void 0}}},function(e,t,n){"use strict";var r="function"===typeof Symbol&&Symbol.for;t.a=r?Symbol.for("mui.nested"):"__THEME_NESTED__"},function(e,t,n){"use strict";var r=n(36),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!==typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);d&&(a=a.concat(d(n)));for(var l=u(t),m=u(n),v=0;v<a.length;++v){var b=a[v];if(!i[b]&&(!r||!r[b])&&(!m||!m[b])&&(!l||!l[b])){var y=f(n,b);try{s(t,b,y)}catch(g){}}}}return t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));n(14),n(1);var r=n(17),o=(n(5),n(21),{xs:0,sm:600,md:960,lg:1280,xl:1920}),i={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(o[e],"px)")}};function a(e,t,n){if(Array.isArray(t)){var o=e.theme.breakpoints||i;return t.reduce((function(e,r,i){return e[o.up(o.keys[i])]=n(t[i]),e}),{})}if("object"===Object(r.a)(t)){var a=e.theme.breakpoints||i;return Object.keys(t).reduce((function(e,r){return e[a.up(r)]=n(t[r]),e}),{})}return n(t)}},function(e,t,n){"use strict";t.a={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500}},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r=n(0),o=n(9),i=!0,a=!1,l=null,u={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function s(e){e.metaKey||e.altKey||e.ctrlKey||(i=!0)}function c(){i=!1}function d(){"hidden"===this.visibilityState&&a&&(i=!0)}function f(e){var t=e.target;try{return t.matches(":focus-visible")}catch(n){}return i||function(e){var t=e.type,n=e.tagName;return!("INPUT"!==n||!u[t]||e.readOnly)||("TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable)}(t)}function p(){a=!0,window.clearTimeout(l),l=window.setTimeout((function(){a=!1}),100)}function h(){return{isFocusVisible:f,onBlurVisible:p,ref:r.useCallback((function(e){var t,n=o.findDOMNode(e);null!=n&&((t=n.ownerDocument).addEventListener("keydown",s,!0),t.addEventListener("mousedown",c,!0),t.addEventListener("pointerdown",c,!0),t.addEventListener("touchstart",c,!0),t.addEventListener("visibilitychange",d,!0))}),[])}}},function(e,t,n){e.exports=n(82)},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(1),o=n(0),i=n.n(o),a=n(2),l=(n(5),n(3)),u=n(4),s=n(6),c=o.forwardRef((function(e,t){var n=e.children,i=e.classes,u=e.className,c=e.color,d=void 0===c?"inherit":c,f=e.component,p=void 0===f?"svg":f,h=e.fontSize,m=void 0===h?"default":h,v=e.htmlColor,b=e.titleAccess,y=e.viewBox,g=void 0===y?"0 0 24 24":y,x=Object(a.a)(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return o.createElement(p,Object(r.a)({className:Object(l.a)(i.root,u,"inherit"!==d&&i["color".concat(Object(s.a)(d))],"default"!==m&&i["fontSize".concat(Object(s.a)(m))]),focusable:"false",viewBox:g,color:v,"aria-hidden":!b||void 0,role:b?"img":void 0,ref:t},x),n,b?o.createElement("title",null,b):null)}));c.muiName="SvgIcon";var d=Object(u.a)((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(c);function f(e,t){var n=i.a.memo(i.a.forwardRef((function(t,n){return i.a.createElement(d,Object(r.a)({ref:n},t),e)})));return n.muiName=d.muiName,n}},function(e,t,n){"use strict";var r=n(15),o=n(2),i=n(1),a=n(17);function l(e){return e&&"object"===Object(a.a)(e)&&e.constructor===Object}function u(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},r=n.clone?Object(i.a)({},e):e;return l(e)&&l(t)&&Object.keys(t).forEach((function(o){"__proto__"!==o&&(l(t[o])&&o in e?r[o]=u(e[o],t[o],n):r[o]=t[o])})),r}var s=["xs","sm","md","lg","xl"];function c(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,a=void 0===r?"px":r,l=e.step,u=void 0===l?5:l,c=Object(o.a)(e,["values","unit","step"]);function d(e){var t="number"===typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(a,")")}function f(e,t){var r=s.indexOf(t);return r===s.length-1?d(e):"@media (min-width:".concat("number"===typeof n[e]?n[e]:e).concat(a,") and ")+"(max-width:".concat((-1!==r&&"number"===typeof n[s[r+1]]?n[s[r+1]]:t)-u/100).concat(a,")")}return Object(i.a)({keys:s,values:n,up:d,down:function(e){var t=s.indexOf(e)+1,r=n[s[t]];return t===s.length?d("xs"):"@media (max-width:".concat(("number"===typeof r&&t>0?r:e)-u/100).concat(a,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},c)}function d(e,t,n){var o;return Object(i.a)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object(i.a)(Object(i.a)({paddingLeft:t(2),paddingRight:t(2)},n),{},Object(r.a)({},e.up("sm"),Object(i.a)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(o={minHeight:56},Object(r.a)(o,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),Object(r.a)(o,e.up("sm"),{minHeight:64}),o)},n)}var f={black:"#000",white:"#fff"},p={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},h={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"},m={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"},v={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},b={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},y={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},g={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},x=n(7),w={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:f.white,default:p[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},k={text:{primary:f.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:p[800],default:"#303030"},action:{active:f.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function E(e,t,n,r){var o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Object(x.e)(e.main,o):"dark"===t&&(e.dark=Object(x.a)(e.main,i)))}function S(e){var t=e.primary,n=void 0===t?{light:h[300],main:h[500],dark:h[700]}:t,r=e.secondary,a=void 0===r?{light:m.A200,main:m.A400,dark:m.A700}:r,l=e.error,s=void 0===l?{light:v[300],main:v[500],dark:v[700]}:l,c=e.warning,d=void 0===c?{light:b[300],main:b[500],dark:b[700]}:c,S=e.info,O=void 0===S?{light:y[300],main:y[500],dark:y[700]}:S,C=e.success,T=void 0===C?{light:g[300],main:g[500],dark:g[700]}:C,j=e.type,P=void 0===j?"light":j,R=e.contrastThreshold,N=void 0===R?3:R,M=e.tonalOffset,_=void 0===M?.2:M,A=Object(o.a)(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function z(e){return Object(x.d)(e,k.text.primary)>=N?k.text.primary:w.text.primary}var I=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=Object(i.a)({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error(["Material-UI: The color provided to augmentColor(color) is invalid.","The color object needs to have a `main` property or a `".concat(t,"` property.")].join("\n"));if("string"!==typeof e.main)throw new Error(["Material-UI: The color provided to augmentColor(color) is invalid.","`color.main` should be a string, but `".concat(JSON.stringify(e.main),"` was provided instead."),"","Did you intend to use one of the following approaches?","",'import {\xa0green } from "@material-ui/core/colors";',"","const theme1 = createMuiTheme({ palette: {","  primary: green,","} });","","const theme2 = createMuiTheme({ palette: {","  primary: { main: green[500] },","} });"].join("\n"));return E(e,"light",n,_),E(e,"dark",r,_),e.contrastText||(e.contrastText=z(e.main)),e},F={dark:k,light:w};return u(Object(i.a)({common:f,type:P,primary:I(n),secondary:I(a,"A400","A200","A700"),error:I(s),warning:I(d),info:I(O),success:I(T),grey:p,contrastThreshold:N,getContrastText:z,augmentColor:I,tonalOffset:_},F[P]),A)}function O(e){return Math.round(1e5*e)/1e5}var C={textTransform:"uppercase"};function T(e,t){var n="function"===typeof t?t(e):t,r=n.fontFamily,a=void 0===r?'"Roboto", "Helvetica", "Arial", sans-serif':r,l=n.fontSize,s=void 0===l?14:l,c=n.fontWeightLight,d=void 0===c?300:c,f=n.fontWeightRegular,p=void 0===f?400:f,h=n.fontWeightMedium,m=void 0===h?500:h,v=n.fontWeightBold,b=void 0===v?700:v,y=n.htmlFontSize,g=void 0===y?16:y,x=n.allVariants,w=n.pxToRem,k=Object(o.a)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]);var E=s/14,S=w||function(e){return"".concat(e/g*E,"rem")},T=function(e,t,n,r,o){return Object(i.a)(Object(i.a)(Object(i.a)({fontFamily:a,fontWeight:e,fontSize:S(t),lineHeight:n},'"Roboto", "Helvetica", "Arial", sans-serif'===a?{letterSpacing:"".concat(O(r/t),"em")}:{}),o),x)},j={h1:T(d,96,1.167,-1.5),h2:T(d,60,1.2,-.5),h3:T(p,48,1.167,0),h4:T(p,34,1.235,.25),h5:T(p,24,1.334,0),h6:T(m,20,1.6,.15),subtitle1:T(p,16,1.75,.15),subtitle2:T(m,14,1.57,.1),body1:T(p,16,1.5,.15),body2:T(p,14,1.43,.15),button:T(m,14,1.75,.4,C),caption:T(p,12,1.66,.4),overline:T(p,12,2.66,1,C)};return u(Object(i.a)({htmlFontSize:g,pxToRem:S,round:O,fontFamily:a,fontSize:s,fontWeightLight:d,fontWeightRegular:p,fontWeightMedium:m,fontWeightBold:b},j),k,{clone:!1})}function j(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}var P=["none",j(0,2,1,-1,0,1,1,0,0,1,3,0),j(0,3,1,-2,0,2,2,0,0,1,5,0),j(0,3,3,-2,0,3,4,0,0,1,8,0),j(0,2,4,-1,0,4,5,0,0,1,10,0),j(0,3,5,-1,0,5,8,0,0,1,14,0),j(0,3,5,-1,0,6,10,0,0,1,18,0),j(0,4,5,-2,0,7,10,1,0,2,16,1),j(0,5,5,-3,0,8,10,1,0,3,14,2),j(0,5,6,-3,0,9,12,1,0,3,16,2),j(0,6,6,-3,0,10,14,1,0,4,18,3),j(0,6,7,-4,0,11,15,1,0,4,20,3),j(0,7,8,-4,0,12,17,2,0,5,22,4),j(0,7,8,-4,0,13,19,2,0,5,24,4),j(0,7,9,-4,0,14,21,2,0,5,26,4),j(0,8,9,-5,0,15,22,2,0,6,28,5),j(0,8,10,-5,0,16,24,2,0,6,30,5),j(0,8,11,-5,0,17,26,2,0,6,32,5),j(0,9,11,-5,0,18,28,2,0,7,34,6),j(0,9,12,-6,0,19,29,2,0,7,36,6),j(0,10,13,-6,0,20,31,3,0,8,38,7),j(0,10,13,-6,0,21,33,3,0,8,40,7),j(0,10,14,-6,0,22,35,3,0,8,42,7),j(0,11,14,-7,0,23,36,3,0,9,44,8),j(0,11,15,-7,0,24,38,3,0,9,46,8)],R={borderRadius:4},N=n(144);function M(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=Object(N.a)({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"===typeof e)return e;var n=t(e);return"number"===typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}var _={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},A={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function z(e){return"".concat(Math.round(e),"ms")}var I={easing:_,duration:A,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?A.standard:n,i=t.easing,a=void 0===i?_.easeInOut:i,l=t.delay,u=void 0===l?0:l;Object(o.a)(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"===typeof r?r:z(r)," ").concat(a," ").concat("string"===typeof u?u:z(u))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},F=n(42);t.a=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,i=void 0===r?{}:r,a=e.palette,l=void 0===a?{}:a,s=e.spacing,f=e.typography,p=void 0===f?{}:f,h=Object(o.a)(e,["breakpoints","mixins","palette","spacing","typography"]),m=S(l),v=c(n),b=M(s),y=u({breakpoints:v,direction:"ltr",mixins:d(v,b,i),overrides:{},palette:m,props:{},shadows:P,typography:T(m,p),spacing:b,shape:R,transitions:I,zIndex:F.a},h),g=arguments.length,x=new Array(g>1?g-1:0),w=1;w<g;w++)x[w-1]=arguments[w];return y=x.reduce((function(e,t){return u(e,t)}),y)}},,,,,,,function(e,t,n){"use strict";var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(o){return!1}}()?Object.assign:function(e,t){for(var n,l,u=a(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){l=r(n);for(var d=0;d<l.length;d++)i.call(n,l[d])&&(u[l[d]]=n[l[d]])}}return u}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(13);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!==e&&"undefined"!==typeof e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(13),o=n(88),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l={adapter:function(){var e;return("undefined"!==typeof XMLHttpRequest||"undefined"!==typeof t&&"[object process]"===Object.prototype.toString.call(t))&&(e=n(58)),e}(),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"===typeof e)try{e=JSON.parse(e)}catch(t){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(i)})),e.exports=l}).call(this,n(87))},function(e,t,n){"use strict";var r=n(13),o=n(89),i=n(91),a=n(55),l=n(92),u=n(95),s=n(96),c=n(59);e.exports=function(e){return new Promise((function(t,n){var d=e.data,f=e.headers;r.isFormData(d)&&delete f["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";f.Authorization="Basic "+btoa(h+":"+m)}var v=l(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),a(v,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?u(p.getAllResponseHeaders()):null,i={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};o(t,n,i),p=null}},p.onabort=function(){p&&(n(c("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){n(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(c(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var b=(e.withCredentials||s(v))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;b&&(f[e.xsrfHeaderName]=b)}if("setRequestHeader"in p&&r.forEach(f,(function(e,t){"undefined"===typeof d&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(y){if("json"!==e.responseType)throw y}"function"===typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"===typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),n(e),p=null)})),d||(d=null),p.send(d)}))}},function(e,t,n){"use strict";var r=n(90);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(13);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],i=["headers","auth","proxy","params"],a=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],l=["validateStatus"];function u(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function s(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=u(void 0,e[o])):n[o]=u(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=u(void 0,t[e]))})),r.forEach(i,s),r.forEach(a,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=u(void 0,e[o])):n[o]=u(void 0,t[o])})),r.forEach(l,(function(r){r in t?n[r]=u(e[r],t[r]):r in e&&(n[r]=u(void 0,e[r]))}));var c=o.concat(i).concat(a).concat(l),d=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===c.indexOf(e)}));return r.forEach(d,s),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(1),o=n(15);function i(e){return String(parseFloat(e)).length===String(e).length}function a(e){return parseFloat(e)}function l(e){return function(t,n){var r=String(t).match(/[\d.\-+]*\s*(.*)/)[1]||"";if(r===n)return t;var o=a(t);if("px"!==r)if("em"===r)o=a(t)*a(e);else if("rem"===r)return o=a(t)*a(e),t;var i=o;if("px"!==n)if("em"===n)i=o/a(e);else{if("rem"!==n)return t;i=o/a(e)}return parseFloat(i.toFixed(5))+n}}function u(e){var t=e.size,n=e.grid,r=t-t%n,o=r+n;return t-r<o-t?r:o}function s(e){var t=e.lineHeight;return e.pixels/(t*e.htmlFontSize)}function c(e){var t=e.cssProperty,n=e.min,r=e.max,i=e.unit,a=void 0===i?"rem":i,l=e.breakpoints,u=void 0===l?[600,960,1280]:l,s=e.transform,c=void 0===s?null:s,d=Object(o.a)({},t,"".concat(n).concat(a)),f=(r-n)/u[u.length-1];return u.forEach((function(e){var r=n+f*e;null!==c&&(r=c(r)),d["@media (min-width:".concat(e,"px)")]=Object(o.a)({},t,"".concat(Math.round(1e4*r)/1e4).concat(a))})),d}function d(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.breakpoints,o=void 0===n?["sm","md","lg"]:n,a=t.disableAlign,d=void 0!==a&&a,f=t.factor,p=void 0===f?2:f,h=t.variants,m=void 0===h?["h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","caption","button","overline"]:h,v=Object(r.a)({},e);v.typography=Object(r.a)({},v.typography);var b=v.typography,y=l(b.htmlFontSize),g=o.map((function(e){return v.breakpoints.values[e]}));return m.forEach((function(e){var t=b[e],n=parseFloat(y(t.fontSize,"rem"));if(!(n<=1)){var o=n,a=1+(o-1)/p,l=t.lineHeight;if(!i(l)&&!d)throw new Error(["Material-UI: Unsupported non-unitless line height with grid alignment.","Use unitless line heights instead."].join("\n"));i(l)||(l=parseFloat(y(l,"rem"))/parseFloat(n));var f=null;d||(f=function(e){return u({size:e,grid:s({pixels:4,lineHeight:l,htmlFontSize:b.htmlFontSize})})}),b[e]=Object(r.a)(Object(r.a)({},t),c({cssProperty:"fontSize",min:a,max:o,unit:"rem",breakpoints:g,transform:f}))}})),v}},,,,,,,,,,,,function(e,t,n){"use strict";var r=n(53),o="function"===typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,d=o?Symbol.for("react.context"):60110,f=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116,v="function"===typeof Symbol&&Symbol.iterator;function b(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function x(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||y}function w(){}function k(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||y}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!==typeof e&&"function"!==typeof e&&null!=e)throw Error(b(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=x.prototype;var E=k.prototype=new w;E.constructor=k,r(E,x.prototype),E.isPureReactComponent=!0;var S={current:null},O=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r,o={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)O.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:l,props:o,_owner:S.current}}function j(e){return"object"===typeof e&&null!==e&&e.$$typeof===i}var P=/\/+/g,R=[];function N(e,t,n,r){if(R.length){var o=R.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function _(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case a:u=!0}}if(u)return r(o,t,""===n?"."+A(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+A(l=t[s],s);u+=e(l,c,r,o)}else if(null===t||"object"!==typeof t?c=null:c="function"===typeof(c=v&&t[v]||t["@@iterator"])?c:null,"function"===typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+A(l,s++),r,o);else if("object"===l)throw r=""+t,Error(b(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function A(e,t){return"object"===typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function z(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,(function(e){return e})):null!=e&&(j(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(P,"$&/")+"/"),_(e,I,t=N(t,i,r,o)),M(t)}var D={current:null};function L(){var e=D.current;if(null===e)throw Error(b(321));return e}var W={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;_(e,z,t=N(null,null,t,n)),M(t)},count:function(e){return _(e,(function(){return null}),null)},toArray:function(e){var t=[];return F(e,t,null,(function(e){return e})),t},only:function(e){if(!j(e))throw Error(b(143));return e}},t.Component=x,t.Fragment=l,t.Profiler=s,t.PureComponent=k,t.StrictMode=u,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W,t.cloneElement=function(e,t,n){if(null===e||void 0===e)throw Error(b(267,e));var o=r({},e.props),a=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=S.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)O.call(t,c)&&!C.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){s=Array(c);for(var d=0;d<c;d++)s[d]=arguments[d+2];o.children=s}return{$$typeof:i,type:e.type,key:a,ref:l,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:f,render:e}},t.isValidElement=j,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return L().useCallback(e,t)},t.useContext=function(e,t){return L().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return L().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return L().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return L().useLayoutEffect(e,t)},t.useMemo=function(e,t){return L().useMemo(e,t)},t.useReducer=function(e,t,n){return L().useReducer(e,t,n)},t.useRef=function(e){return L().useRef(e)},t.useState=function(e){return L().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";var r=n(0),o=n(53),i=n(77);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function l(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(c){this.onError(c)}}var u=!1,s=null,c=!1,d=null,f={onError:function(e){u=!0,s=e}};function p(e,t,n,r,o,i,a,c,d){u=!1,s=null,l.apply(f,arguments)}var h=null,m=null,v=null;function b(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,o,i,l,f,h){if(p.apply(this,arguments),u){if(!u)throw Error(a(198));var m=s;u=!1,s=null,c||(c=!0,d=m)}}(r,t,void 0,e),e.currentTarget=null}var y=null,g={};function x(){if(y)for(var e in g){var t=g[e],n=y.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!k[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in k[n]=t,n=t.eventTypes){var o=void 0,i=n[r],l=t,u=r;if(E.hasOwnProperty(u))throw Error(a(99,u));E[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&w(s[o],l,u);o=!0}else i.registrationName?(w(i.registrationName,l,u),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function w(e,t,n){if(S[e])throw Error(a(100,e));S[e]=t,O[e]=t.eventTypes[n].dependencies}var k=[],E={},S={},O={};function C(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!g.hasOwnProperty(t)||g[t]!==r){if(g[t])throw Error(a(102,t));g[t]=r,n=!0}}n&&x()}var T=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),j=null,P=null,R=null;function N(e){if(e=m(e)){if("function"!==typeof j)throw Error(a(280));var t=e.stateNode;t&&(t=h(t),j(e.stateNode,e.type,t))}}function M(e){P?R?R.push(e):R=[e]:P=e}function _(){if(P){var e=P,t=R;if(R=P=null,N(e),t)for(e=0;e<t.length;e++)N(t[e])}}function A(e,t){return e(t)}function z(e,t,n,r,o){return e(t,n,r,o)}function I(){}var F=A,D=!1,L=!1;function W(){null===P&&null===R||(I(),_())}function B(e,t,n){if(L)return e(t,n);L=!0;try{return F(e,t,n)}finally{L=!1,W()}}var U=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,$=Object.prototype.hasOwnProperty,V={},H={};function q(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var K={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){K[e]=new q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];K[t]=new q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){K[e]=new q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){K[e]=new q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){K[e]=new q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){K[e]=new q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){K[e]=new q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){K[e]=new q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){K[e]=new q(e,5,!1,e.toLowerCase(),null,!1)}));var Q=/[\-:]([a-z])/g;function X(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Q,X);K[t]=new q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Q,X);K[t]=new q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Q,X);K[t]=new q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){K[e]=new q(e,1,!1,e.toLowerCase(),null,!1)})),K.xlinkHref=new q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){K[e]=new q(e,1,!1,e.toLowerCase(),null,!0)}));var Y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function G(e,t,n,r){var o=K.hasOwnProperty(t)?K[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||"undefined"===typeof t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!$.call(H,e)||!$.call(V,e)&&(U.test(e)?H[e]=!0:(V[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}Y.hasOwnProperty("ReactCurrentDispatcher")||(Y.ReactCurrentDispatcher={current:null}),Y.hasOwnProperty("ReactCurrentBatchConfig")||(Y.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"===typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,oe=Z?Symbol.for("react.profiler"):60114,ie=Z?Symbol.for("react.provider"):60109,ae=Z?Symbol.for("react.context"):60110,le=Z?Symbol.for("react.concurrent_mode"):60111,ue=Z?Symbol.for("react.forward_ref"):60112,se=Z?Symbol.for("react.suspense"):60113,ce=Z?Symbol.for("react.suspense_list"):60120,de=Z?Symbol.for("react.memo"):60115,fe=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,he="function"===typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=he&&e[he]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"===typeof e)return e.displayName||e.name||null;if("string"===typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case se:return"Suspense";case ce:return"SuspenseList"}if("object"===typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case ie:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case de:return ve(e.type);case pe:return ve(e.render);case fe:if(e=1===e._status?e._result:null)return ve(e)}return null}function be(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ve(e.type);n=null,r&&(n=ve(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(J,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function ye(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ge(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function xe(e){e._valueTracker||(e._valueTracker=function(e){var t=ge(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"undefined"!==typeof n&&"function"===typeof n.get&&"function"===typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function we(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ge(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ke(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ye(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Se(e,t){null!=(t=t.checked)&&G(e,"checked",t,!1)}function Oe(e,t){Se(e,t);var n=ye(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Te(e,t.type,n):t.hasOwnProperty("defaultValue")&&Te(e,t.type,ye(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ce(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Te(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function je(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Pe(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ye(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ne(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ye(n)}}function Me(e,t){var n=ye(t.value),r=ye(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function _e(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ae="http://www.w3.org/1999/xhtml",ze="http://www.w3.org/2000/svg";function Ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Fe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var De,Le=function(e){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==ze||"innerHTML"in e)e.innerHTML=t;else{for((De=De||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=De.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function We(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Be(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ue={animationend:Be("Animation","AnimationEnd"),animationiteration:Be("Animation","AnimationIteration"),animationstart:Be("Animation","AnimationStart"),transitionend:Be("Transition","TransitionEnd")},$e={},Ve={};function He(e){if($e[e])return $e[e];if(!Ue[e])return e;var t,n=Ue[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ve)return $e[e]=n[t];return e}T&&(Ve=document.createElement("div").style,"AnimationEvent"in window||(delete Ue.animationend.animation,delete Ue.animationiteration.animation,delete Ue.animationstart.animation),"TransitionEvent"in window||delete Ue.transitionend.transition);var qe=He("animationend"),Ke=He("animationiteration"),Qe=He("animationstart"),Xe=He("transitionend"),Ye="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ge=new("function"===typeof WeakMap?WeakMap:Map);function Je(e){var t=Ge.get(e);return void 0===t&&(t=new Map,Ge.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!==(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return tt(o),e;if(i===r)return tt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)b(e,t[r],n[r]);else t&&b(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(it=rt(it,e)),e=it,it=null,e){if(ot(e,at),it)throw Error(a(95));if(c)throw e=d,c=!1,d=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function st(e){if(!T)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"===typeof t[e]),t}var ct=[];function dt(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function ft(e,t,n,r){if(ct.length){var o=ct.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Tn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ut(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var l=null,u=0;u<k.length;u++){var s=k[u];s&&(s=s.extractEvents(r,t,i,o,a))&&(l=rt(l,s))}lt(l)}}function ht(e,t,n){if(!n.has(e)){switch(e){case"scroll":Qt(t,"scroll",!0);break;case"focus":case"blur":Qt(t,"focus",!0),Qt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":st(e)&&Qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ye.indexOf(e)&&Kt(e,t)}n.set(e,null)}}var mt,vt,bt,yt=!1,gt=[],xt=null,wt=null,kt=null,Et=new Map,St=new Map,Ot=[],Ct="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Tt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function jt(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function Pt(e,t){switch(e){case"focus":case"blur":xt=null;break;case"dragenter":case"dragleave":wt=null;break;case"mouseover":case"mouseout":kt=null;break;case"pointerover":case"pointerout":Et.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":St.delete(t.pointerId)}}function Rt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=jt(t,n,r,o,i),null!==t&&(null!==(t=jn(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function Nt(e){var t=Tn(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){bt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=jn(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function _t(e,t,n){Mt(e)&&n.delete(t)}function At(){for(yt=!1;0<gt.length;){var e=gt[0];if(null!==e.blockedOn){null!==(e=jn(e.blockedOn))&&mt(e);break}var t=Jt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:gt.shift()}null!==xt&&Mt(xt)&&(xt=null),null!==wt&&Mt(wt)&&(wt=null),null!==kt&&Mt(kt)&&(kt=null),Et.forEach(_t),St.forEach(_t)}function zt(e,t){e.blockedOn===t&&(e.blockedOn=null,yt||(yt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,At)))}function It(e){function t(t){return zt(t,e)}if(0<gt.length){zt(gt[0],e);for(var n=1;n<gt.length;n++){var r=gt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==xt&&zt(xt,e),null!==wt&&zt(wt,e),null!==kt&&zt(kt,e),Et.forEach(t),St.forEach(t),n=0;n<Ot.length;n++)(r=Ot[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Ot.length&&null===(n=Ot[0]).blockedOn;)Nt(n),null===n.blockedOn&&Ot.shift()}var Ft={},Dt=new Map,Lt=new Map,Wt=["abort","abort",qe,"animationEnd",Ke,"animationIteration",Qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Xe,"transitionEnd","waiting","waiting"];function Bt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],i="on"+(o[0].toUpperCase()+o.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},Lt.set(r,t),Dt.set(r,i),Ft[o]=i}}Bt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Bt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Bt(Wt,2);for(var Ut="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),$t=0;$t<Ut.length;$t++)Lt.set(Ut[$t],0);var Vt=i.unstable_UserBlockingPriority,Ht=i.unstable_runWithPriority,qt=!0;function Kt(e,t){Qt(t,e,!1)}function Qt(e,t,n){var r=Lt.get(t);switch(void 0===r?2:r){case 0:r=Xt.bind(null,t,1,e);break;case 1:r=Yt.bind(null,t,1,e);break;default:r=Gt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Xt(e,t,n,r){D||I();var o=Gt,i=D;D=!0;try{z(o,e,t,n,r)}finally{(D=i)||W()}}function Yt(e,t,n,r){Ht(Vt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){if(qt)if(0<gt.length&&-1<Ct.indexOf(e))e=jt(null,e,t,n,r),gt.push(e);else{var o=Jt(e,t,n,r);if(null===o)Pt(e,r);else if(-1<Ct.indexOf(e))e=jt(o,e,t,n,r),gt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return xt=Rt(xt,e,t,n,r,o),!0;case"dragenter":return wt=Rt(wt,e,t,n,r,o),!0;case"mouseover":return kt=Rt(kt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Et.set(i,Rt(Et.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,St.set(i,Rt(St.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){Pt(e,r),e=ft(e,r,null,t);try{B(pt,e)}finally{dt(e)}}}}function Jt(e,t,n,r){if(null!==(n=Tn(n=ut(r)))){var o=Ze(n);if(null===o)n=null;else{var i=o.tag;if(13===i){if(null!==(n=et(o)))return n;n=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=ft(e,r,n,t);try{B(pt,e)}finally{dt(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"===typeof t||""===t?"":n||"number"!==typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!==typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!==typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"===typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Ae;function un(e,t){var n=Je(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=O[t];for(var r=0;r<t.length;r++)ht(t[r],e,n)}function sn(){}function cn(e){if("undefined"===typeof(e=e||("undefined"!==typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function dn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var n,r=dn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dn(r)}}function pn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"===typeof t.contentWindow.location.href}catch(r){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn=null,vn=null;function bn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"===typeof t.children||"number"===typeof t.children||"object"===typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var gn="function"===typeof setTimeout?setTimeout:void 0,xn="function"===typeof clearTimeout?clearTimeout:void 0;function wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function kn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var En=Math.random().toString(36).slice(2),Sn="__reactInternalInstance$"+En,On="__reactEventHandlers$"+En,Cn="__reactContainere$"+En;function Tn(e){var t=e[Sn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Cn]||n[Sn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=kn(e);null!==e;){if(n=e[Sn])return n;e=kn(e)}return t}n=(e=n).parentNode}return null}function jn(e){return!(e=e[Sn]||e[Cn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Pn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Rn(e){return e[On]||null}function Nn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Mn(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!==typeof n)throw Error(a(231,t,typeof n));return n}function _n(e,t,n){(t=Mn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function An(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Nn(t);for(t=n.length;0<t--;)_n(n[t],"captured",e);for(t=0;t<n.length;t++)_n(n[t],"bubbled",e)}}function zn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Mn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function In(e){e&&e.dispatchConfig.registrationName&&zn(e._targetInst,null,e)}function Fn(e){ot(e,An)}var Dn=null,Ln=null,Wn=null;function Bn(){if(Wn)return Wn;var e,t,n=Ln,r=n.length,o="value"in Dn?Dn.value:Dn.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Wn=o.slice(e,1<t?1-t:void 0)}function Un(){return!0}function $n(){return!1}function Vn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Un:$n,this.isPropagationStopped=$n,this}function Hn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function qn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Kn(e){e.eventPool=[],e.getPooled=Hn,e.release=qn}o(Vn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!==typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Un)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!==typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Un)},persist:function(){this.isPersistent=Un},isPersistent:$n,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=$n,this._dispatchInstances=this._dispatchListeners=null}}),Vn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Vn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Kn(n),n},Kn(Vn);var Qn=Vn.extend({data:null}),Xn=Vn.extend({data:null}),Yn=[9,13,27,32],Gn=T&&"CompositionEvent"in window,Jn=null;T&&"documentMode"in document&&(Jn=document.documentMode);var Zn=T&&"TextEvent"in window&&!Jn,er=T&&(!Gn||Jn&&8<Jn&&11>=Jn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Yn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ir(e){return"object"===typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Gn)e:{switch(e){case"compositionstart":var i=nr.compositionStart;break e;case"compositionend":i=nr.compositionEnd;break e;case"compositionupdate":i=nr.compositionUpdate;break e}i=void 0}else ar?or(e,n)&&(i=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=nr.compositionStart);return i?(er&&"ko"!==n.locale&&(ar||i!==nr.compositionStart?i===nr.compositionEnd&&ar&&(o=Bn()):(Ln="value"in(Dn=r)?Dn.value:Dn.textContent,ar=!0)),i=Qn.getPooled(i,t,n,r),o?i.data=o:null!==(o=ir(n))&&(i.data=o),Fn(i),o=i):o=null,(e=Zn?function(e,t){switch(e){case"compositionend":return ir(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Gn&&or(e,t)?(e=Bn(),Wn=Ln=Dn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Xn.getPooled(nr.beforeInput,t,n,r)).data=e,Fn(t)):t=null,null===o?t:null===t?o:[o,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function sr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var cr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function dr(e,t,n){return(e=Vn.getPooled(cr.change,e,t,n)).type="change",M(n),Fn(e),e}var fr=null,pr=null;function hr(e){lt(e)}function mr(e){if(we(Pn(e)))return e}function vr(e,t){if("change"===e)return t}var br=!1;function yr(){fr&&(fr.detachEvent("onpropertychange",gr),pr=fr=null)}function gr(e){if("value"===e.propertyName&&mr(pr))if(e=dr(pr,e,ut(e)),D)lt(e);else{D=!0;try{A(hr,e)}finally{D=!1,W()}}}function xr(e,t,n){"focus"===e?(yr(),pr=n,(fr=t).attachEvent("onpropertychange",gr)):"blur"===e&&yr()}function wr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return mr(pr)}function kr(e,t){if("click"===e)return mr(t)}function Er(e,t){if("input"===e||"change"===e)return mr(t)}T&&(br=st("input")&&(!document.documentMode||9<document.documentMode));var Sr={eventTypes:cr,_isInputEventSupported:br,extractEvents:function(e,t,n,r){var o=t?Pn(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=vr;else if(sr(o))if(br)a=Er;else{a=wr;var l=xr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=kr);if(a&&(a=a(e,t)))return dr(a,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Te(o,"number",o.value)}},Or=Vn.extend({view:null,detail:null}),Cr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Tr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cr[e])&&!!t[e]}function jr(){return Tr}var Pr=0,Rr=0,Nr=!1,Mr=!1,_r=Or.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:jr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Pr;return Pr=e.screenX,Nr?"mousemove"===e.type?e.screenX-t:0:(Nr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Rr;return Rr=e.screenY,Mr?"mousemove"===e.type?e.screenY-t:0:(Mr=!0,0)}}),Ar=_r.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),zr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Ir={eventTypes:zr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0===(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?Tn(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var l=_r,u=zr.mouseLeave,s=zr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Ar,u=zr.pointerLeave,s=zr.pointerEnter,c="pointer");if(e=null==a?i:Pn(a),i=null==t?i:Pn(t),(u=l.getPooled(u,a,n,r)).type=c+"leave",u.target=e,u.relatedTarget=i,(n=l.getPooled(s,t,n,r)).type=c+"enter",n.target=i,n.relatedTarget=e,c=t,(r=a)&&c)e:{for(s=c,a=0,e=l=r;e;e=Nn(e))a++;for(e=0,t=s;t;t=Nn(t))e++;for(;0<a-e;)l=Nn(l),a--;for(;0<e-a;)s=Nn(s),e--;for(;a--;){if(l===s||l===s.alternate)break e;l=Nn(l),s=Nn(s)}l=null}else l=null;for(s=l,l=[];r&&r!==s&&(null===(a=r.alternate)||a!==s);)l.push(r),r=Nn(r);for(r=[];c&&c!==s&&(null===(a=c.alternate)||a!==s);)r.push(c),c=Nn(c);for(c=0;c<l.length;c++)zn(l[c],"bubbled",u);for(c=r.length;0<c--;)zn(r[c],"captured",n);return 0===(64&o)?[u]:[u,n]}};var Fr="function"===typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e===1/t)||e!==e&&t!==t},Dr=Object.prototype.hasOwnProperty;function Lr(e,t){if(Fr(e,t))return!0;if("object"!==typeof e||null===e||"object"!==typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Dr.call(t,n[r])||!Fr(e[n[r]],t[n[r]]))return!1;return!0}var Wr=T&&"documentMode"in document&&11>=document.documentMode,Br={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Ur=null,$r=null,Vr=null,Hr=!1;function qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Hr||null==Ur||Ur!==cn(n)?null:("selectionStart"in(n=Ur)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Vr&&Lr(Vr,n)?null:(Vr=n,(e=Vn.getPooled(Br.select,$r,e,t)).type="select",e.target=Ur,Fn(e),e))}var Kr={eventTypes:Br,extractEvents:function(e,t,n,r,o,i){if(!(i=!(o=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Je(o),i=O.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?Pn(t):window,e){case"focus":(sr(o)||"true"===o.contentEditable)&&(Ur=o,$r=t,Vr=null);break;case"blur":Vr=$r=Ur=null;break;case"mousedown":Hr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Hr=!1,qr(n,r);case"selectionchange":if(Wr)break;case"keydown":case"keyup":return qr(n,r)}return null}},Qr=Vn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Xr=Vn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Yr=Or.extend({relatedTarget:null});function Gr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Jr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Or.extend({key:function(e){if(e.key){var t=Jr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Gr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:jr,charCode:function(e){return"keypress"===e.type?Gr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Gr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=_r.extend({dataTransfer:null}),no=Or.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:jr}),ro=Vn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=_r.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),io={eventTypes:Ft,extractEvents:function(e,t,n,r){var o=Dt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Gr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Yr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=_r;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case qe:case Ke:case Qe:e=Qr;break;case Xe:e=ro;break;case"scroll":e=Or;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Xr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Ar;break;default:e=Vn}return Fn(t=e.getPooled(o,t,n,r)),t}};if(y)throw Error(a(101));y=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x(),h=Rn,m=jn,v=Pn,C({SimpleEventPlugin:io,EnterLeaveEventPlugin:Ir,ChangeEventPlugin:Sr,SelectEventPlugin:Kr,BeforeInputEventPlugin:lr});var ao=[],lo=-1;function uo(e){0>lo||(e.current=ao[lo],ao[lo]=null,lo--)}function so(e,t){lo++,ao[lo]=e.current,e.current=t}var co={},fo={current:co},po={current:!1},ho=co;function mo(e,t){var n=e.type.contextTypes;if(!n)return co;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function vo(e){return null!==(e=e.childContextTypes)&&void 0!==e}function bo(){uo(po),uo(fo)}function yo(e,t,n){if(fo.current!==co)throw Error(a(168));so(fo,t),so(po,n)}function go(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!==typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,ve(t)||"Unknown",i));return o({},n,{},r)}function xo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||co,ho=fo.current,so(fo,e),so(po,po.current),!0}function wo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=go(e,t,ho),r.__reactInternalMemoizedMergedChildContext=e,uo(po),uo(fo),so(fo,e)):uo(po),so(po,n)}var ko=i.unstable_runWithPriority,Eo=i.unstable_scheduleCallback,So=i.unstable_cancelCallback,Oo=i.unstable_requestPaint,Co=i.unstable_now,To=i.unstable_getCurrentPriorityLevel,jo=i.unstable_ImmediatePriority,Po=i.unstable_UserBlockingPriority,Ro=i.unstable_NormalPriority,No=i.unstable_LowPriority,Mo=i.unstable_IdlePriority,_o={},Ao=i.unstable_shouldYield,zo=void 0!==Oo?Oo:function(){},Io=null,Fo=null,Do=!1,Lo=Co(),Wo=1e4>Lo?Co:function(){return Co()-Lo};function Bo(){switch(To()){case jo:return 99;case Po:return 98;case Ro:return 97;case No:return 96;case Mo:return 95;default:throw Error(a(332))}}function Uo(e){switch(e){case 99:return jo;case 98:return Po;case 97:return Ro;case 96:return No;case 95:return Mo;default:throw Error(a(332))}}function $o(e,t){return e=Uo(e),ko(e,t)}function Vo(e,t,n){return e=Uo(e),Eo(e,t,n)}function Ho(e){return null===Io?(Io=[e],Fo=Eo(jo,Ko)):Io.push(e),_o}function qo(){if(null!==Fo){var e=Fo;Fo=null,So(e)}Ko()}function Ko(){if(!Do&&null!==Io){Do=!0;var e=0;try{var t=Io;$o(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Io=null}catch(n){throw null!==Io&&(Io=Io.slice(e+1)),Eo(jo,qo),n}finally{Do=!1}}}function Qo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Xo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Yo={current:null},Go=null,Jo=null,Zo=null;function ei(){Zo=Jo=Go=null}function ti(e){var t=Yo.current;uo(Yo),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ri(e,t){Go=e,Zo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ra=!0),e.firstContext=null)}function oi(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"===typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Go)throw Error(a(308));Jo=t,Go.dependencies={expirationTime:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var ii=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ui(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function si(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ci(e,t){var n=e.alternate;null!==n&&li(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function di(e,t,n,r){var i=e.updateQueue;ii=!1;var a=i.baseQueue,l=i.shared.pending;if(null!==l){if(null!==a){var u=a.next;a.next=l.next,l.next=u}a=l,i.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=l))}if(null!==a){u=a.next;var s=i.baseState,c=0,d=null,f=null,p=null;if(null!==u)for(var h=u;;){if((l=h.expirationTime)<r){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===p?(f=p=m,d=s):p=p.next=m,l>c&&(c=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),iu(l,h.suspenseConfig);e:{var v=e,b=h;switch(l=t,m=n,b.tag){case 1:if("function"===typeof(v=b.payload)){s=v.call(m,s,l);break e}s=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null===(l="function"===typeof(v=b.payload)?v.call(m,s,l):v)||void 0===l)break e;s=o({},s,l);break e;case 2:ii=!0}}null!==h.callback&&(e.effectTag|=32,null===(l=i.effects)?i.effects=[h]:l.push(h))}if(null===(h=h.next)||h===u){if(null===(l=i.shared.pending))break;h=a.next=l.next,l.next=u,i.baseQueue=a=l,i.shared.pending=null}}null===p?d=s:p.next=f,i.baseState=d,i.baseQueue=p,au(c),e.expirationTime=c,e.memoizedState=s}}function fi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!==typeof r)throw Error(a(191,r));r.call(o)}}}var pi=Y.ReactCurrentBatchConfig,hi=(new r.Component).refs;function mi(e,t,n,r){n=null===(n=n(r,t=e.memoizedState))||void 0===n?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var vi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pi.suspense;(o=ui(r=Kl(r,e,o),o)).payload=t,void 0!==n&&null!==n&&(o.callback=n),si(e,o),Ql(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pi.suspense;(o=ui(r=Kl(r,e,o),o)).tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),si(e,o),Ql(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ql(),r=pi.suspense;(r=ui(n=Kl(n,e,r),r)).tag=2,void 0!==t&&null!==t&&(r.callback=t),si(e,r),Ql(e,n)}};function bi(e,t,n,r,o,i,a){return"function"===typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!Lr(n,r)||!Lr(o,i))}function yi(e,t,n){var r=!1,o=co,i=t.contextType;return"object"===typeof i&&null!==i?i=oi(i):(o=vo(t)?ho:fo.current,i=(r=null!==(r=t.contextTypes)&&void 0!==r)?mo(e,o):co),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function gi(e,t,n,r){e=t.state,"function"===typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"===typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&vi.enqueueReplaceState(t,t.state,null)}function xi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=hi,ai(e);var i=t.contextType;"object"===typeof i&&null!==i?o.context=oi(i):(i=vo(t)?ho:fo.current,o.context=mo(e,i)),di(e,n,o,r),o.state=e.memoizedState,"function"===typeof(i=t.getDerivedStateFromProps)&&(mi(e,t,i,n),o.state=e.memoizedState),"function"===typeof t.getDerivedStateFromProps||"function"===typeof o.getSnapshotBeforeUpdate||"function"!==typeof o.UNSAFE_componentWillMount&&"function"!==typeof o.componentWillMount||(t=o.state,"function"===typeof o.componentWillMount&&o.componentWillMount(),"function"===typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&vi.enqueueReplaceState(o,o.state,null),di(e,n,o,r),o.state=e.memoizedState),"function"===typeof o.componentDidMount&&(e.effectTag|=4)}var wi=Array.isArray;function ki(e,t,n){if(null!==(e=n.ref)&&"function"!==typeof e&&"object"!==typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"===typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===hi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!==typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ei(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Si(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Cu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Pu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ki(e,t,n),r.return=e,r):((r=Tu(n.type,n.key,n.props,null,e.mode,r)).ref=ki(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ru(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,i){return null===t||7!==t.tag?((t=ju(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"===typeof t||"number"===typeof t)return(t=Pu(""+t,e.mode,n)).return=e,t;if("object"===typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Tu(t.type,t.key,t.props,null,e.mode,n)).ref=ki(e,null,t),n.return=e,n;case te:return(t=Ru(t,e.mode,n)).return=e,t}if(wi(t)||me(t))return(t=ju(t,e.mode,n,null)).return=e,t;Ei(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"===typeof n||"number"===typeof n)return null!==o?null:u(e,t,""+n,r);if("object"===typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?d(e,t,n.props.children,r,o):s(e,t,n,r):null;case te:return n.key===o?c(e,t,n,r):null}if(wi(n)||me(n))return null!==o?null:d(e,t,n,r,null);Ei(e,n)}return null}function h(e,t,n,r,o){if("string"===typeof r||"number"===typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"===typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?d(t,e,r.props.children,o,r.key):s(t,e,r,o);case te:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(wi(r)||me(r))return d(t,e=e.get(n)||null,r,o,null);Ei(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,d=a,m=a=0,v=null;null!==d&&m<l.length;m++){d.index>m?(v=d,d=null):v=d.sibling;var b=p(o,d,l[m],u);if(null===b){null===d&&(d=v);break}e&&d&&null===b.alternate&&t(o,d),a=i(b,a,m),null===c?s=b:c.sibling=b,c=b,d=v}if(m===l.length)return n(o,d),s;if(null===d){for(;m<l.length;m++)null!==(d=f(o,l[m],u))&&(a=i(d,a,m),null===c?s=d:c.sibling=d,c=d);return s}for(d=r(o,d);m<l.length;m++)null!==(v=h(d,o,m,l[m],u))&&(e&&null!==v.alternate&&d.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v);return e&&d.forEach((function(e){return t(o,e)})),s}function v(o,l,u,s){var c=me(u);if("function"!==typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var d=c=null,m=l,v=l=0,b=null,y=u.next();null!==m&&!y.done;v++,y=u.next()){m.index>v?(b=m,m=null):b=m.sibling;var g=p(o,m,y.value,s);if(null===g){null===m&&(m=b);break}e&&m&&null===g.alternate&&t(o,m),l=i(g,l,v),null===d?c=g:d.sibling=g,d=g,m=b}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;v++,y=u.next())null!==(y=f(o,y.value,s))&&(l=i(y,l,v),null===d?c=y:d.sibling=y,d=y);return c}for(m=r(o,m);!y.done;v++,y=u.next())null!==(y=h(m,o,v,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),l=i(y,l,v),null===d?c=y:d.sibling=y,d=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,u){var s="object"===typeof i&&null!==i&&i.type===ne&&null===i.key;s&&(i=i.props.children);var c="object"===typeof i&&null!==i;if(c)switch(i.$$typeof){case ee:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(i.type===ne){n(e,s.sibling),(r=o(s,i.props.children)).return=e,e=r;break e}break;default:if(s.elementType===i.type){n(e,s.sibling),(r=o(s,i.props)).ref=ki(e,s,i),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}i.type===ne?((r=ju(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Tu(i.type,i.key,i.props,null,e.mode,u)).ref=ki(e,r,i),u.return=e,e=u)}return l(e);case te:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ru(i,e.mode,u)).return=e,e=r}return l(e)}if("string"===typeof i||"number"===typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Pu(i,e.mode,u)).return=e,e=r),l(e);if(wi(i))return m(e,r,i,u);if(me(i))return v(e,r,i,u);if(c&&Ei(e,i),"undefined"===typeof i&&!s)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Oi=Si(!0),Ci=Si(!1),Ti={},ji={current:Ti},Pi={current:Ti},Ri={current:Ti};function Ni(e){if(e===Ti)throw Error(a(174));return e}function Mi(e,t){switch(so(Ri,t),so(Pi,e),so(ji,Ti),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Fe(null,"");break;default:t=Fe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(ji),so(ji,t)}function _i(){uo(ji),uo(Pi),uo(Ri)}function Ai(e){Ni(Ri.current);var t=Ni(ji.current),n=Fe(t,e.type);t!==n&&(so(Pi,e),so(ji,n))}function zi(e){Pi.current===e&&(uo(ji),uo(Pi))}var Ii={current:0};function Fi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!==(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Di(e,t){return{responder:e,props:t}}var Li=Y.ReactCurrentDispatcher,Wi=Y.ReactCurrentBatchConfig,Bi=0,Ui=null,$i=null,Vi=null,Hi=!1;function qi(){throw Error(a(321))}function Ki(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Fr(e[n],t[n]))return!1;return!0}function Qi(e,t,n,r,o,i){if(Bi=i,Ui=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Li.current=null===e||null===e.memoizedState?ba:ya,e=n(r,o),t.expirationTime===Bi){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(a(301));i+=1,Vi=$i=null,t.updateQueue=null,Li.current=ga,e=n(r,o)}while(t.expirationTime===Bi)}if(Li.current=va,t=null!==$i&&null!==$i.next,Bi=0,Vi=$i=Ui=null,Hi=!1,t)throw Error(a(300));return e}function Xi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Vi?Ui.memoizedState=Vi=e:Vi=Vi.next=e,Vi}function Yi(){if(null===$i){var e=Ui.alternate;e=null!==e?e.memoizedState:null}else e=$i.next;var t=null===Vi?Ui.memoizedState:Vi.next;if(null!==t)Vi=t,$i=e;else{if(null===e)throw Error(a(310));e={memoizedState:($i=e).memoizedState,baseState:$i.baseState,baseQueue:$i.baseQueue,queue:$i.queue,next:null},null===Vi?Ui.memoizedState=Vi=e:Vi=Vi.next=e}return Vi}function Gi(e,t){return"function"===typeof t?t(e):t}function Ji(e){var t=Yi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=$i,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=i=null,s=o;do{var c=s.expirationTime;if(c<Bi){var d={expirationTime:s.expirationTime,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=d,i=r):u=u.next=d,c>Ui.expirationTime&&(Ui.expirationTime=c,au(c))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),iu(c,s.suspenseConfig),r=s.eagerReducer===e?s.eagerState:e(r,s.action);s=s.next}while(null!==s&&s!==o);null===u?i=r:u.next=l,Fr(r,t.memoizedState)||(Ra=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Zi(e){var t=Yi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);Fr(i,t.memoizedState)||(Ra=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ea(e){var t=Xi();return"function"===typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Gi,lastRenderedState:e}).dispatch=ma.bind(null,Ui,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ui.updateQueue)?(t={lastEffect:null},Ui.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Yi().memoizedState}function ra(e,t,n,r){var o=Xi();Ui.effectTag|=e,o.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function oa(e,t,n,r){var o=Yi();r=void 0===r?null:r;var i=void 0;if(null!==$i){var a=$i.memoizedState;if(i=a.destroy,null!==r&&Ki(r,a.deps))return void ta(t,n,i,r)}Ui.effectTag|=e,o.memoizedState=ta(1|t,n,i,r)}function ia(e,t){return ra(516,4,e,t)}function aa(e,t){return oa(516,4,e,t)}function la(e,t){return oa(4,2,e,t)}function ua(e,t){return"function"===typeof t?(e=e(),t(e),function(){t(null)}):null!==t&&void 0!==t?(e=e(),t.current=e,function(){t.current=null}):void 0}function sa(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,oa(4,2,ua.bind(null,t,e),n)}function ca(){}function da(e,t){return Xi().memoizedState=[e,void 0===t?null:t],e}function fa(e,t){var n=Yi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ki(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Yi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ki(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ha(e,t,n){var r=Bo();$o(98>r?98:r,(function(){e(!0)})),$o(97<r?97:r,(function(){var r=Wi.suspense;Wi.suspense=void 0===t?null:t;try{e(!1),n()}finally{Wi.suspense=r}}))}function ma(e,t,n){var r=ql(),o=pi.suspense;o={expirationTime:r=Kl(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Ui||null!==i&&i===Ui)Hi=!0,o.expirationTime=Bi,Ui.expirationTime=Bi;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.eagerReducer=i,o.eagerState=l,Fr(l,a))return}catch(u){}Ql(e,r)}}var va={readContext:oi,useCallback:qi,useContext:qi,useEffect:qi,useImperativeHandle:qi,useLayoutEffect:qi,useMemo:qi,useReducer:qi,useRef:qi,useState:qi,useDebugValue:qi,useResponder:qi,useDeferredValue:qi,useTransition:qi},ba={readContext:oi,useCallback:da,useContext:oi,useEffect:ia,useImperativeHandle:function(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,ra(4,2,ua.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Xi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Xi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ma.bind(null,Ui,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Xi().memoizedState=e},useState:ea,useDebugValue:ca,useResponder:Di,useDeferredValue:function(e,t){var n=ea(e),r=n[0],o=n[1];return ia((function(){var n=Wi.suspense;Wi.suspense=void 0===t?null:t;try{o(e)}finally{Wi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},ya={readContext:oi,useCallback:fa,useContext:oi,useEffect:aa,useImperativeHandle:sa,useLayoutEffect:la,useMemo:pa,useReducer:Ji,useRef:na,useState:function(){return Ji(Gi)},useDebugValue:ca,useResponder:Di,useDeferredValue:function(e,t){var n=Ji(Gi),r=n[0],o=n[1];return aa((function(){var n=Wi.suspense;Wi.suspense=void 0===t?null:t;try{o(e)}finally{Wi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ji(Gi),n=t[0];return t=t[1],[fa(ha.bind(null,t,e),[t,e]),n]}},ga={readContext:oi,useCallback:fa,useContext:oi,useEffect:aa,useImperativeHandle:sa,useLayoutEffect:la,useMemo:pa,useReducer:Zi,useRef:na,useState:function(){return Zi(Gi)},useDebugValue:ca,useResponder:Di,useDeferredValue:function(e,t){var n=Zi(Gi),r=n[0],o=n[1];return aa((function(){var n=Wi.suspense;Wi.suspense=void 0===t?null:t;try{o(e)}finally{Wi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zi(Gi),n=t[0];return t=t[1],[fa(ha.bind(null,t,e),[t,e]),n]}},xa=null,wa=null,ka=!1;function Ea(e,t){var n=Su(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Sa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Oa(e){if(ka){var t=wa;if(t){var n=t;if(!Sa(e,t)){if(!(t=wn(n.nextSibling))||!Sa(e,t))return e.effectTag=-1025&e.effectTag|2,ka=!1,void(xa=e);Ea(xa,n)}xa=e,wa=wn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,ka=!1,xa=e}}function Ca(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;xa=e}function Ta(e){if(e!==xa)return!1;if(!ka)return Ca(e),ka=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yn(t,e.memoizedProps))for(t=wa;t;)Ea(e,t),t=wn(t.nextSibling);if(Ca(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){wa=wn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}wa=null}}else wa=xa?wn(e.stateNode.nextSibling):null;return!0}function ja(){wa=xa=null,ka=!1}var Pa=Y.ReactCurrentOwner,Ra=!1;function Na(e,t,n,r){t.child=null===e?Ci(t,null,n,r):Oi(t,e.child,n,r)}function Ma(e,t,n,r,o){n=n.render;var i=t.ref;return ri(t,o),r=Qi(e,t,n,r,i,o),null===e||Ra?(t.effectTag|=1,Na(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Qa(e,t,o))}function _a(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!==typeof a||Ou(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Tu(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Aa(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:Lr)(o,r)&&e.ref===t.ref)?Qa(e,t,i):(t.effectTag|=1,(e=Cu(a,r)).ref=t.ref,e.return=t,t.child=e)}function Aa(e,t,n,r,o,i){return null!==e&&Lr(e.memoizedProps,r)&&e.ref===t.ref&&(Ra=!1,o<i)?(t.expirationTime=e.expirationTime,Qa(e,t,i)):Ia(e,t,n,r,i)}function za(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ia(e,t,n,r,o){var i=vo(n)?ho:fo.current;return i=mo(t,i),ri(t,o),n=Qi(e,t,n,r,i,o),null===e||Ra?(t.effectTag|=1,Na(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Qa(e,t,o))}function Fa(e,t,n,r,o){if(vo(n)){var i=!0;xo(t)}else i=!1;if(ri(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),yi(t,n,r),xi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;"object"===typeof s&&null!==s?s=oi(s):s=mo(t,s=vo(n)?ho:fo.current);var c=n.getDerivedStateFromProps,d="function"===typeof c||"function"===typeof a.getSnapshotBeforeUpdate;d||"function"!==typeof a.UNSAFE_componentWillReceiveProps&&"function"!==typeof a.componentWillReceiveProps||(l!==r||u!==s)&&gi(t,a,r,s),ii=!1;var f=t.memoizedState;a.state=f,di(t,r,a,o),u=t.memoizedState,l!==r||f!==u||po.current||ii?("function"===typeof c&&(mi(t,n,c,r),u=t.memoizedState),(l=ii||bi(t,n,l,r,f,u,s))?(d||"function"!==typeof a.UNSAFE_componentWillMount&&"function"!==typeof a.componentWillMount||("function"===typeof a.componentWillMount&&a.componentWillMount(),"function"===typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"===typeof a.componentDidMount&&(t.effectTag|=4)):("function"===typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"===typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,li(e,t),l=t.memoizedProps,a.props=t.type===t.elementType?l:Xo(t.type,l),u=a.context,"object"===typeof(s=n.contextType)&&null!==s?s=oi(s):s=mo(t,s=vo(n)?ho:fo.current),(d="function"===typeof(c=n.getDerivedStateFromProps)||"function"===typeof a.getSnapshotBeforeUpdate)||"function"!==typeof a.UNSAFE_componentWillReceiveProps&&"function"!==typeof a.componentWillReceiveProps||(l!==r||u!==s)&&gi(t,a,r,s),ii=!1,u=t.memoizedState,a.state=u,di(t,r,a,o),f=t.memoizedState,l!==r||u!==f||po.current||ii?("function"===typeof c&&(mi(t,n,c,r),f=t.memoizedState),(c=ii||bi(t,n,l,r,u,f,s))?(d||"function"!==typeof a.UNSAFE_componentWillUpdate&&"function"!==typeof a.componentWillUpdate||("function"===typeof a.componentWillUpdate&&a.componentWillUpdate(r,f,s),"function"===typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,f,s)),"function"===typeof a.componentDidUpdate&&(t.effectTag|=4),"function"===typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!==typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!==typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=f),a.props=r,a.state=f,a.context=s,r=c):("function"!==typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!==typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Da(e,t,n,r,i,o)}function Da(e,t,n,r,o,i){za(e,t);var a=0!==(64&t.effectTag);if(!r&&!a)return o&&wo(t,n,!1),Qa(e,t,i);r=t.stateNode,Pa.current=t;var l=a&&"function"!==typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Oi(t,e.child,null,i),t.child=Oi(t,null,l,i)):Na(e,t,l,i),t.memoizedState=r.state,o&&wo(t,n,!0),t.child}function La(e){var t=e.stateNode;t.pendingContext?yo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yo(0,t.context,!1),Mi(e,t.containerInfo)}var Wa,Ba,Ua,$a={dehydrated:null,retryTime:0};function Va(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Ii.current,l=!1;if((r=0!==(64&t.effectTag))||(r=0!==(2&a)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),so(Ii,1&a),null===e){if(void 0!==i.fallback&&Oa(t),l){if(l=i.fallback,(i=ju(null,o,0,null)).return=t,0===(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=ju(l,o,n,null)).return=t,i.sibling=n,t.memoizedState=$a,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Ci(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(i=i.fallback,(n=Cu(e,e.pendingProps)).return=t,0===(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=Cu(o,i)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=$a,t.child=n,o}return n=Oi(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=i.fallback,(i=ju(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0===(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=ju(l,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=$a,t.child=i,n}return t.memoizedState=null,t.child=Oi(t,e,i.children,n)}function Ha(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ni(e.return,t)}function qa(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function Ka(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Na(e,t,r.children,n),0!==(2&(r=Ii.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!==(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ha(e,n);else if(19===e.tag)Ha(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(so(Ii,r),0===(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Fi(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),qa(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Fi(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}qa(t,!0,n,null,i,t.lastEffect);break;case"together":qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Qa(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&au(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Cu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Cu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Xa(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ya(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vo(t.type)&&bo(),null;case 3:return _i(),uo(po),uo(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Ta(t)||(t.effectTag|=4),null;case 5:zi(t),n=Ni(Ri.current);var i=t.type;if(null!==e&&null!=t.stateNode)Ba(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ni(ji.current),Ta(t)){r=t.stateNode,i=t.type;var l=t.memoizedProps;switch(r[Sn]=t,r[On]=l,i){case"iframe":case"object":case"embed":Kt("load",r);break;case"video":case"audio":for(e=0;e<Ye.length;e++)Kt(Ye[e],r);break;case"source":Kt("error",r);break;case"img":case"image":case"link":Kt("error",r),Kt("load",r);break;case"form":Kt("reset",r),Kt("submit",r);break;case"details":Kt("toggle",r);break;case"input":Ee(r,l),Kt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Kt("invalid",r),un(n,"onChange");break;case"textarea":Ne(r,l),Kt("invalid",r),un(n,"onChange")}for(var u in on(i,l),e=null,l)if(l.hasOwnProperty(u)){var s=l[u];"children"===u?"string"===typeof s?r.textContent!==s&&(e=["children",s]):"number"===typeof s&&r.textContent!==""+s&&(e=["children",""+s]):S.hasOwnProperty(u)&&null!=s&&un(n,u)}switch(i){case"input":xe(r),Ce(r,l,!0);break;case"textarea":xe(r),_e(r);break;case"select":case"option":break;default:"function"===typeof l.onClick&&(r.onclick=sn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=Ie(i)),e===ln?"script"===i?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"===typeof r.is?e=u.createElement(i,{is:r.is}):(e=u.createElement(i),"select"===i&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,i),e[Sn]=t,e[On]=r,Wa(e,t),t.stateNode=e,u=an(i,r),i){case"iframe":case"object":case"embed":Kt("load",e),s=r;break;case"video":case"audio":for(s=0;s<Ye.length;s++)Kt(Ye[s],e);s=r;break;case"source":Kt("error",e),s=r;break;case"img":case"image":case"link":Kt("error",e),Kt("load",e),s=r;break;case"form":Kt("reset",e),Kt("submit",e),s=r;break;case"details":Kt("toggle",e),s=r;break;case"input":Ee(e,r),s=ke(e,r),Kt("invalid",e),un(n,"onChange");break;case"option":s=je(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},s=o({},r,{value:void 0}),Kt("invalid",e),un(n,"onChange");break;case"textarea":Ne(e,r),s=Re(e,r),Kt("invalid",e),un(n,"onChange");break;default:s=r}on(i,s);var c=s;for(l in c)if(c.hasOwnProperty(l)){var d=c[l];"style"===l?nn(e,d):"dangerouslySetInnerHTML"===l?null!=(d=d?d.__html:void 0)&&Le(e,d):"children"===l?"string"===typeof d?("textarea"!==i||""!==d)&&We(e,d):"number"===typeof d&&We(e,""+d):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(S.hasOwnProperty(l)?null!=d&&un(n,l):null!=d&&G(e,l,d,u))}switch(i){case"input":xe(e),Ce(e,r,!1);break;case"textarea":xe(e),_e(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ye(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Pe(e,!!r.multiple,n,!1):null!=r.defaultValue&&Pe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"===typeof s.onClick&&(e.onclick=sn)}bn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ua(0,t,e.memoizedProps,r);else{if("string"!==typeof r&&null===t.stateNode)throw Error(a(166));n=Ni(Ri.current),Ni(ji.current),Ta(t)?(n=t.stateNode,r=t.memoizedProps,n[Sn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Sn]=t,t.stateNode=n)}return null;case 13:return uo(Ii),r=t.memoizedState,0!==(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Ta(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=i,i.nextEffect=l):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&0!==(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!==(1&Ii.current)?Tl===xl&&(Tl=wl):(Tl!==xl&&Tl!==wl||(Tl=kl),0!==Ml&&null!==Sl&&(_u(Sl,Cl),Au(Sl,Ml)))),(n||r)&&(t.effectTag|=4),null);case 4:return _i(),null;case 10:return ti(t),null;case 17:return vo(t.type)&&bo(),null;case 19:if(uo(Ii),null===(r=t.memoizedState))return null;if(i=0!==(64&t.effectTag),null===(l=r.rendering)){if(i)Xa(r,!1);else if(Tl!==xl||null!==e&&0!==(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Fi(l))){for(t.effectTag|=64,Xa(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=l,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,l=e.dependencies,i.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return so(Ii,1&Ii.current|2),t.child}l=l.sibling}}else{if(!i)if(null!==(e=Fi(l))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Xa(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Wo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Xa(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Wo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Wo(),n.sibling=null,t=Ii.current,so(Ii,i?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Ga(e){switch(e.tag){case 1:vo(e.type)&&bo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(_i(),uo(po),uo(fo),0!==(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return zi(e),null;case 13:return uo(Ii),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return uo(Ii),null;case 4:return _i(),null;case 10:return ti(e),null;default:return null}}function Ja(e,t){return{value:e,source:t,stack:be(t)}}Wa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ba=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var l,u,s=t.stateNode;switch(Ni(ji.current),e=null,n){case"input":a=ke(s,a),r=ke(s,r),e=[];break;case"option":a=je(s,a),r=je(s,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Re(s,a),r=Re(s,r),e=[];break;default:"function"!==typeof a.onClick&&"function"===typeof r.onClick&&(s.onclick=sn)}for(l in on(n,r),n=null,a)if(!r.hasOwnProperty(l)&&a.hasOwnProperty(l)&&null!=a[l])if("style"===l)for(u in s=a[l])s.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(S.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var c=r[l];if(s=null!=a?a[l]:void 0,r.hasOwnProperty(l)&&c!==s&&(null!=c||null!=s))if("style"===l)if(s){for(u in s)!s.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in c)c.hasOwnProperty(u)&&s[u]!==c[u]&&(n||(n={}),n[u]=c[u])}else n||(e||(e=[]),e.push(l,n)),n=c;else"dangerouslySetInnerHTML"===l?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(l,c)):"children"===l?s===c||"string"!==typeof c&&"number"!==typeof c||(e=e||[]).push(l,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(S.hasOwnProperty(l)?(null!=c&&un(i,l),e||s===c||(e=[])):(e=e||[]).push(l,c))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},Ua=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Za="function"===typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=be(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(o){setTimeout((function(){throw o}))}}function tl(e){var t=e.ref;if(null!==t)if("function"===typeof t)try{t(null)}catch(n){yu(e,n)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Xo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ol(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Xo(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&bn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&It(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function al(e,t,n){switch("function"===typeof ku&&ku(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;$o(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(i){yu(o,i)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"===typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(n){yu(e,n)}}(t,n);break;case 5:tl(t);break;case 4:cl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:{for(var t=e.return;null!==t;){if(ul(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(We(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ul(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=sn));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function cl(e,t,n){for(var r,o,i=t,l=!1;;){if(!l){l=i.return;e:for(;;){if(null===l)throw Error(a(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===i.tag||6===i.tag){e:for(var u=e,s=i,c=n,d=s;;)if(al(u,d,c),null!==d.child&&4!==d.tag)d.child.return=d,d=d.child;else{if(d===s)break e;for(;null===d.sibling;){if(null===d.return||d.return===s)break e;d=d.return}d.sibling.return=d.return,d=d.sibling}o?(u=r,s=i.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(al(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(l=!1)}i.sibling.return=i.return,i=i.sibling}}function dl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[On]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Se(n,r),an(e,o),t=an(e,r),o=0;o<i.length;o+=2){var l=i[o],u=i[o+1];"style"===l?nn(n,u):"dangerouslySetInnerHTML"===l?Le(n,u):"children"===l?We(n,u):G(n,l,u,t)}switch(e){case"input":Oe(n,r);break;case"textarea":Me(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Pe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Pe(n,!!r.multiple,r.defaultValue,!0):Pe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,It(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Al=Wo()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"===typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=void 0!==(o=e.memoizedProps.style)&&null!==o&&o.hasOwnProperty("display")?o.display:null,i.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void fl(t);case 19:return void fl(t);case 17:return}throw Error(a(163))}function fl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Za),t.forEach((function(t){var r=xu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pl="function"===typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=ui(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Il||(Il=!0,Fl=r),el(e,t)},n}function ml(e,t,n){(n=ui(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"===typeof r){var o=t.value;n.payload=function(){return el(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"===typeof i.componentDidCatch&&(n.callback=function(){"function"!==typeof r&&(null===Dl?Dl=new Set([this]):Dl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vl,bl=Math.ceil,yl=Y.ReactCurrentDispatcher,gl=Y.ReactCurrentOwner,xl=0,wl=3,kl=4,El=0,Sl=null,Ol=null,Cl=0,Tl=xl,jl=null,Pl=1073741823,Rl=1073741823,Nl=null,Ml=0,_l=!1,Al=0,zl=null,Il=!1,Fl=null,Dl=null,Ll=!1,Wl=null,Bl=90,Ul=null,$l=0,Vl=null,Hl=0;function ql(){return 0!==(48&El)?1073741821-(Wo()/10|0):0!==Hl?Hl:Hl=1073741821-(Wo()/10|0)}function Kl(e,t,n){if(0===(2&(t=t.mode)))return 1073741823;var r=Bo();if(0===(4&t))return 99===r?1073741823:1073741822;if(0!==(16&El))return Cl;if(null!==n)e=Qo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Qo(e,150,100);break;case 97:case 96:e=Qo(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Sl&&e===Cl&&--e,e}function Ql(e,t){if(50<$l)throw $l=0,Vl=null,Error(a(185));if(null!==(e=Xl(e,t))){var n=Bo();1073741823===t?0!==(8&El)&&0===(48&El)?Zl(e):(Gl(e),0===El&&qo()):Gl(e),0===(4&El)||98!==n&&99!==n||(null===Ul?Ul=new Map([[e,t]]):(void 0===(n=Ul.get(e))||n>t)&&Ul.set(e,t))}}function Xl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Sl===o&&(au(t),Tl===kl&&_u(o,Cl)),Au(o,t)),o}function Yl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Mu(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Gl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Ho(Zl.bind(null,e));else{var t=Yl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=ql();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==_o&&So(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Ho(Zl.bind(null,e)):Vo(r,Jl.bind(null,e),{timeout:10*(1073741821-t)-Wo()}),e.callbackNode=t}}}function Jl(e,t){if(Hl=0,t)return zu(e,t=ql()),Gl(e),null;var n=Yl(e);if(0!==n){if(t=e.callbackNode,0!==(48&El))throw Error(a(327));if(mu(),e===Sl&&n===Cl||nu(e,n),null!==Ol){var r=El;El|=16;for(var o=ou();;)try{uu();break}catch(u){ru(e,u)}if(ei(),El=r,yl.current=o,1===Tl)throw t=jl,nu(e,n),_u(e,n),Gl(e),t;if(null===Ol)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Tl,Sl=null,r){case xl:case 1:throw Error(a(345));case 2:zu(e,2<n?2:n);break;case wl:if(_u(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=du(o)),1073741823===Pl&&10<(o=Al+500-Wo())){if(_l){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(i=Yl(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=gn(fu.bind(null,e),o);break}fu(e);break;case kl:if(_u(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=du(o)),_l&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(o=Yl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Rl?r=10*(1073741821-Rl)-Wo():1073741823===Pl?r=0:(r=10*(1073741821-Pl)-5e3,0>(r=(o=Wo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*bl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=gn(fu.bind(null,e),r);break}fu(e);break;case 5:if(1073741823!==Pl&&null!==Nl){i=Pl;var l=Nl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(i=Wo()-(10*(1073741821-i)-(0|l.timeoutMs||5e3)))<=o?0:o+r-i),10<r){_u(e,n),e.timeoutHandle=gn(fu.bind(null,e),r);break}}fu(e);break;default:throw Error(a(329))}if(Gl(e),e.callbackNode===t)return Jl.bind(null,e)}}return null}function Zl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!==(48&El))throw Error(a(327));if(mu(),e===Sl&&t===Cl||nu(e,t),null!==Ol){var n=El;El|=16;for(var r=ou();;)try{lu();break}catch(o){ru(e,o)}if(ei(),El=n,yl.current=r,1===Tl)throw n=jl,nu(e,t),_u(e,t),Gl(e),n;if(null!==Ol)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Sl=null,fu(e),Gl(e)}return null}function eu(e,t){var n=El;El|=1;try{return e(t)}finally{0===(El=n)&&qo()}}function tu(e,t){var n=El;El&=-2,El|=8;try{return e(t)}finally{0===(El=n)&&qo()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,xn(n)),null!==Ol)for(n=Ol.return;null!==n;){var r=n;switch(r.tag){case 1:null!==(r=r.type.childContextTypes)&&void 0!==r&&bo();break;case 3:_i(),uo(po),uo(fo);break;case 5:zi(r);break;case 4:_i();break;case 13:case 19:uo(Ii);break;case 10:ti(r)}n=n.return}Sl=e,Ol=Cu(e.current,null),Cl=t,Tl=xl,jl=null,Rl=Pl=1073741823,Nl=null,Ml=0,_l=!1}function ru(e,t){for(;;){try{if(ei(),Li.current=va,Hi)for(var n=Ui.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Bi=0,Vi=$i=Ui=null,Hi=!1,null===Ol||null===Ol.return)return Tl=1,jl=t,Ol=null;e:{var o=e,i=Ol.return,a=Ol,l=t;if(t=Cl,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==l&&"object"===typeof l&&"function"===typeof l.then){var u=l;if(0===(2&a.mode)){var s=a.alternate;s?(a.updateQueue=s.updateQueue,a.memoizedState=s.memoizedState,a.expirationTime=s.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var c=0!==(1&Ii.current),d=i;do{var f;if(f=13===d.tag){var p=d.memoizedState;if(null!==p)f=null!==p.dehydrated;else{var h=d.memoizedProps;f=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!c)}}if(f){var m=d.updateQueue;if(null===m){var v=new Set;v.add(u),d.updateQueue=v}else m.add(u);if(0===(2&d.mode)){if(d.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var b=ui(1073741823,null);b.tag=2,si(a,b)}a.expirationTime=1073741823;break e}l=void 0,a=t;var y=o.pingCache;if(null===y?(y=o.pingCache=new pl,l=new Set,y.set(u,l)):void 0===(l=y.get(u))&&(l=new Set,y.set(u,l)),!l.has(a)){l.add(a);var g=gu.bind(null,o,u,a);u.then(g,g)}d.effectTag|=4096,d.expirationTime=t;break e}d=d.return}while(null!==d);l=Error((ve(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+be(a))}5!==Tl&&(Tl=2),l=Ja(l,a),d=i;do{switch(d.tag){case 3:u=l,d.effectTag|=4096,d.expirationTime=t,ci(d,hl(d,u,t));break e;case 1:u=l;var x=d.type,w=d.stateNode;if(0===(64&d.effectTag)&&("function"===typeof x.getDerivedStateFromError||null!==w&&"function"===typeof w.componentDidCatch&&(null===Dl||!Dl.has(w)))){d.effectTag|=4096,d.expirationTime=t,ci(d,ml(d,u,t));break e}}d=d.return}while(null!==d)}Ol=cu(Ol)}catch(k){t=k;continue}break}}function ou(){var e=yl.current;return yl.current=va,null===e?va:e}function iu(e,t){e<Pl&&2<e&&(Pl=e),null!==t&&e<Rl&&2<e&&(Rl=e,Nl=t)}function au(e){e>Ml&&(Ml=e)}function lu(){for(;null!==Ol;)Ol=su(Ol)}function uu(){for(;null!==Ol&&!Ao();)Ol=su(Ol)}function su(e){var t=vl(e.alternate,e,Cl);return e.memoizedProps=e.pendingProps,null===t&&(t=cu(e)),gl.current=null,t}function cu(e){Ol=e;do{var t=Ol.alternate;if(e=Ol.return,0===(2048&Ol.effectTag)){if(t=Ya(t,Ol,Cl),1===Cl||1!==Ol.childExpirationTime){for(var n=0,r=Ol.child;null!==r;){var o=r.expirationTime,i=r.childExpirationTime;o>n&&(n=o),i>n&&(n=i),r=r.sibling}Ol.childExpirationTime=n}if(null!==t)return t;null!==e&&0===(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Ol.firstEffect),null!==Ol.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Ol.firstEffect),e.lastEffect=Ol.lastEffect),1<Ol.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Ol:e.firstEffect=Ol,e.lastEffect=Ol))}else{if(null!==(t=Ga(Ol)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Ol.sibling))return t;Ol=e}while(null!==Ol);return Tl===xl&&(Tl=5),null}function du(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function fu(e){var t=Bo();return $o(99,pu.bind(null,e,t)),null}function pu(e,t){do{mu()}while(null!==Wl);if(0!==(48&El))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=du(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Sl&&(Ol=Sl=null,Cl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=El;El|=32,gl.current=null,mn=qt;var l=pn();if(hn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var s=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(s&&0!==s.rangeCount){u=s.anchorNode;var c=s.anchorOffset,d=s.focusNode;s=s.focusOffset;try{u.nodeType,d.nodeType}catch(C){u=null;break e}var f=0,p=-1,h=-1,m=0,v=0,b=l,y=null;t:for(;;){for(var g;b!==u||0!==c&&3!==b.nodeType||(p=f+c),b!==d||0!==s&&3!==b.nodeType||(h=f+s),3===b.nodeType&&(f+=b.nodeValue.length),null!==(g=b.firstChild);)y=b,b=g;for(;;){if(b===l)break t;if(y===u&&++m===c&&(p=f),y===d&&++v===s&&(h=f),null!==(g=b.nextSibling))break;y=(b=y).parentNode}b=g}u=-1===p||-1===h?null:{start:p,end:h}}else u=null}u=u||{start:0,end:0}}else u=null;vn={activeElementDetached:null,focusedElem:l,selectionRange:u},qt=!1,zl=o;do{try{hu()}catch(C){if(null===zl)throw Error(a(330));yu(zl,C),zl=zl.nextEffect}}while(null!==zl);zl=o;do{try{for(l=e,u=t;null!==zl;){var x=zl.effectTag;if(16&x&&We(zl.stateNode,""),128&x){var w=zl.alternate;if(null!==w){var k=w.ref;null!==k&&("function"===typeof k?k(null):k.current=null)}}switch(1038&x){case 2:sl(zl),zl.effectTag&=-3;break;case 6:sl(zl),zl.effectTag&=-3,dl(zl.alternate,zl);break;case 1024:zl.effectTag&=-1025;break;case 1028:zl.effectTag&=-1025,dl(zl.alternate,zl);break;case 4:dl(zl.alternate,zl);break;case 8:cl(l,c=zl,u),ll(c)}zl=zl.nextEffect}}catch(C){if(null===zl)throw Error(a(330));yu(zl,C),zl=zl.nextEffect}}while(null!==zl);if(k=vn,w=pn(),x=k.focusedElem,u=k.selectionRange,w!==x&&x&&x.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(x.ownerDocument.documentElement,x)){null!==u&&hn(x)&&(w=u.start,void 0===(k=u.end)&&(k=w),"selectionStart"in x?(x.selectionStart=w,x.selectionEnd=Math.min(k,x.value.length)):(k=(w=x.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),c=x.textContent.length,l=Math.min(u.start,c),u=void 0===u.end?l:Math.min(u.end,c),!k.extend&&l>u&&(c=u,u=l,l=c),c=fn(x,l),d=fn(x,u),c&&d&&(1!==k.rangeCount||k.anchorNode!==c.node||k.anchorOffset!==c.offset||k.focusNode!==d.node||k.focusOffset!==d.offset)&&((w=w.createRange()).setStart(c.node,c.offset),k.removeAllRanges(),l>u?(k.addRange(w),k.extend(d.node,d.offset)):(w.setEnd(d.node,d.offset),k.addRange(w))))),w=[];for(k=x;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"===typeof x.focus&&x.focus(),x=0;x<w.length;x++)(k=w[x]).element.scrollLeft=k.left,k.element.scrollTop=k.top}qt=!!mn,vn=mn=null,e.current=n,zl=o;do{try{for(x=e;null!==zl;){var E=zl.effectTag;if(36&E&&il(x,zl.alternate,zl),128&E){w=void 0;var S=zl.ref;if(null!==S){var O=zl.stateNode;switch(zl.tag){case 5:w=O;break;default:w=O}"function"===typeof S?S(w):S.current=w}}zl=zl.nextEffect}}catch(C){if(null===zl)throw Error(a(330));yu(zl,C),zl=zl.nextEffect}}while(null!==zl);zl=null,zo(),El=i}else e.current=n;if(Ll)Ll=!1,Wl=e,Bl=t;else for(zl=o;null!==zl;)t=zl.nextEffect,zl.nextEffect=null,zl=t;if(0===(t=e.firstPendingTime)&&(Dl=null),1073741823===t?e===Vl?$l++:($l=0,Vl=e):$l=0,"function"===typeof wu&&wu(n.stateNode,r),Gl(e),Il)throw Il=!1,e=Fl,Fl=null,e;return 0!==(8&El)||qo(),null}function hu(){for(;null!==zl;){var e=zl.effectTag;0!==(256&e)&&nl(zl.alternate,zl),0===(512&e)||Ll||(Ll=!0,Vo(97,(function(){return mu(),null}))),zl=zl.nextEffect}}function mu(){if(90!==Bl){var e=97<Bl?97:Bl;return Bl=90,$o(e,vu)}}function vu(){if(null===Wl)return!1;var e=Wl;if(Wl=null,0!==(48&El))throw Error(a(331));var t=El;for(El|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!==(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),ol(5,n)}}catch(r){if(null===e)throw Error(a(330));yu(e,r)}n=e.nextEffect,e.nextEffect=null,e=n}return El=t,qo(),!0}function bu(e,t,n){si(e,t=hl(e,t=Ja(n,t),1073741823)),null!==(e=Xl(e,1073741823))&&Gl(e)}function yu(e,t){if(3===e.tag)bu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){bu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"===typeof n.type.getDerivedStateFromError||"function"===typeof r.componentDidCatch&&(null===Dl||!Dl.has(r))){si(n,e=ml(n,e=Ja(t,e),1073741823)),null!==(n=Xl(n,1073741823))&&Gl(n);break}}n=n.return}}function gu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Sl===e&&Cl===n?Tl===kl||Tl===wl&&1073741823===Pl&&Wo()-Al<500?nu(e,Cl):_l=!0:Mu(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Gl(e)))}function xu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Kl(t=ql(),e,null)),null!==(e=Xl(e,t))&&Gl(e)}vl=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)Ra=!0;else{if(r<n){switch(Ra=!1,t.tag){case 3:La(t),ja();break;case 5:if(Ai(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vo(t.type)&&xo(t);break;case 4:Mi(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,so(Yo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Va(e,t,n):(so(Ii,1&Ii.current),null!==(t=Qa(e,t,n))?t.sibling:null);so(Ii,1&Ii.current);break;case 19:if(r=t.childExpirationTime>=n,0!==(64&e.effectTag)){if(r)return Ka(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),so(Ii,Ii.current),!r)return null}return Qa(e,t,n)}Ra=!1}}else Ra=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=mo(t,fo.current),ri(t,n),o=Qi(null,t,r,e,o,n),t.effectTag|=1,"object"===typeof o&&null!==o&&"function"===typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var i=!0;xo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ai(t);var l=r.getDerivedStateFromProps;"function"===typeof l&&mi(t,r,l,e),o.updater=vi,t.stateNode=o,o._reactInternalFiber=t,xi(t,r,e,n),t=Da(null,t,r,!0,i,n)}else t.tag=0,Na(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"===typeof e)return Ou(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===ue)return 11;if(e===de)return 14}return 2}(o),e=Xo(o,e),i){case 0:t=Ia(null,t,o,e,n);break e;case 1:t=Fa(null,t,o,e,n);break e;case 11:t=Ma(null,t,o,e,n);break e;case 14:t=_a(null,t,o,Xo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ia(e,t,r,o=t.elementType===r?o:Xo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Fa(e,t,r,o=t.elementType===r?o:Xo(r,o),n);case 3:if(La(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,li(e,t),di(t,r,null,n),(r=t.memoizedState.element)===o)ja(),t=Qa(e,t,n);else{if((o=t.stateNode.hydrate)&&(wa=wn(t.stateNode.containerInfo.firstChild),xa=t,o=ka=!0),o)for(n=Ci(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Na(e,t,r,n),ja();t=t.child}return t;case 5:return Ai(t),null===e&&Oa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,yn(r,o)?l=null:null!==i&&yn(r,i)&&(t.effectTag|=16),za(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Na(e,t,l,n),t=t.child),t;case 6:return null===e&&Oa(t),null;case 13:return Va(e,t,n);case 4:return Mi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Oi(t,null,r,n):Na(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ma(e,t,r,o=t.elementType===r?o:Xo(r,o),n);case 7:return Na(e,t,t.pendingProps,n),t.child;case 8:case 12:return Na(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var u=t.type._context;if(so(Yo,u._currentValue),u._currentValue=i,null!==l)if(u=l.value,0===(i=Fr(u,i)?0:0|("function"===typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!po.current){t=Qa(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!==(c.observedBits&i)){1===u.tag&&((c=ui(n,null)).tag=2,si(u,c)),u.expirationTime<n&&(u.expirationTime=n),null!==(c=u.alternate)&&c.expirationTime<n&&(c.expirationTime=n),ni(u.return,n),s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Na(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ri(t,n),r=r(o=oi(o,i.unstable_observedBits)),t.effectTag|=1,Na(e,t,r,n),t.child;case 14:return i=Xo(o=t.type,t.pendingProps),_a(e,t,o,i=Xo(o.type,i),r,n);case 15:return Aa(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Xo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vo(r)?(e=!0,xo(t)):e=!1,ri(t,n),yi(t,r,o),xi(t,r,o,n),Da(null,t,r,!0,e,n);case 19:return Ka(e,t,n)}throw Error(a(156,t.tag))};var wu=null,ku=null;function Eu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Su(e,t,n,r){return new Eu(e,t,n,r)}function Ou(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Cu(e,t){var n=e.alternate;return null===n?((n=Su(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Tu(e,t,n,r,o,i){var l=2;if(r=e,"function"===typeof e)Ou(e)&&(l=1);else if("string"===typeof e)l=5;else e:switch(e){case ne:return ju(n.children,o,i,t);case le:l=8,o|=7;break;case re:l=8,o|=1;break;case oe:return(e=Su(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=i,e;case se:return(e=Su(13,n,t,o)).type=se,e.elementType=se,e.expirationTime=i,e;case ce:return(e=Su(19,n,t,o)).elementType=ce,e.expirationTime=i,e;default:if("object"===typeof e&&null!==e)switch(e.$$typeof){case ie:l=10;break e;case ae:l=9;break e;case ue:l=11;break e;case de:l=14;break e;case fe:l=16,r=null;break e;case pe:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Su(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function ju(e,t,n,r){return(e=Su(7,e,r,t)).expirationTime=n,e}function Pu(e,t,n){return(e=Su(6,e,null,t)).expirationTime=n,e}function Ru(e,t,n){return(t=Su(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Nu(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Mu(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function _u(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Au(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function zu(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Iu(e,t,n,r){var o=t.current,i=ql(),l=pi.suspense;i=Kl(i,o,l);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(vo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var s=n.type;if(vo(s)){n=go(n,s,u);break e}}n=u}else n=co;return null===t.context?t.context=n:t.pendingContext=n,(t=ui(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),si(o,t),Ql(o,i),i}function Fu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Du(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Lu(e,t){Du(e,t),(e=e.alternate)&&Du(e,t)}function Wu(e,t,n){var r=new Nu(e,t,n=null!=n&&!0===n.hydrate),o=Su(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ai(o),e[Cn]=r.current,n&&0!==t&&function(e,t){var n=Je(t);Ct.forEach((function(e){ht(e,t,n)})),Tt.forEach((function(e){ht(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Bu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Uu(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"===typeof o){var l=o;o=function(){var e=Fu(a);l.call(e)}}Iu(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Wu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"===typeof o){var u=o;o=function(){var e=Fu(a);u.call(e)}}tu((function(){Iu(t,a,e,o)}))}return Fu(a)}function $u(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Vu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Bu(t))throw Error(a(200));return $u(e,t,null,n)}Wu.prototype.render=function(e){Iu(e,this._internalRoot,null,null)},Wu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Iu(null,e,null,(function(){t[Cn]=null}))},mt=function(e){if(13===e.tag){var t=Qo(ql(),150,100);Ql(e,t),Lu(e,t)}},vt=function(e){13===e.tag&&(Ql(e,3),Lu(e,3))},bt=function(e){if(13===e.tag){var t=ql();Ql(e,t=Kl(t,e,null)),Lu(e,t)}},j=function(e,t,n){switch(t){case"input":if(Oe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Rn(r);if(!o)throw Error(a(90));we(r),Oe(r,o)}}}break;case"textarea":Me(e,n);break;case"select":null!=(t=n.value)&&Pe(e,!!n.multiple,t,!1)}},A=eu,z=function(e,t,n,r,o){var i=El;El|=4;try{return $o(98,e.bind(null,t,n,r,o))}finally{0===(El=i)&&qo()}},I=function(){0===(49&El)&&(function(){if(null!==Ul){var e=Ul;Ul=null,e.forEach((function(e,t){zu(t,e),Gl(t)})),qo()}}(),mu())},F=function(e,t){var n=El;El|=2;try{return e(t)}finally{0===(El=n)&&qo()}};var Hu={Events:[jn,Pn,Rn,C,E,Fn,function(e){ot(e,In)},M,_,Gt,lt,mu,{current:!1}]};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);wu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64===(64&e.current.effectTag))}catch(r){}},ku=function(e){try{t.onCommitFiberUnmount(n,e)}catch(r){}}}catch(r){}})(o({},e,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))}({findFiberByHostInstance:Tn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Hu,t.createPortal=Vu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"===typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!==(48&El))throw Error(a(187));var n=El;El|=1;try{return $o(99,e.bind(null,t))}finally{El=n,qo()}},t.hydrate=function(e,t,n){if(!Bu(t))throw Error(a(200));return Uu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Bu(t))throw Error(a(200));return Uu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Bu(e))throw Error(a(40));return!!e._reactRootContainer&&(tu((function(){Uu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Cn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Vu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Bu(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Uu(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(78)},function(e,t,n){"use strict";var r,o,i,a,l;if("undefined"===typeof window||"function"!==typeof MessageChannel){var u=null,s=null,c=function e(){if(null!==u)try{var n=t.unstable_now();u(!0,n),u=null}catch(r){throw setTimeout(e,0),r}},d=Date.now();t.unstable_now=function(){return Date.now()-d},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(c,0))},o=function(e,t){s=setTimeout(e,t)},i=function(){clearTimeout(s)},a=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,p=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!==typeof console){var v=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!==typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"===typeof f&&"function"===typeof f.now)t.unstable_now=function(){return f.now()};else{var b=p.now();t.unstable_now=function(){return p.now()-b}}var y=!1,g=null,x=-1,w=5,k=0;a=function(){return t.unstable_now()>=k},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):w=0<e?Math.floor(1e3/e):5};var E=new MessageChannel,S=E.port2;E.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();k=e+w;try{g(!0,e)?S.postMessage(null):(y=!1,g=null)}catch(n){throw S.postMessage(null),n}}else y=!1},r=function(e){g=e,y||(y=!0,S.postMessage(null))},o=function(e,n){x=h((function(){e(t.unstable_now())}),n)},i=function(){m(x),x=-1}}function O(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<j(o,t)))break e;e[r]=t,e[n]=o,n=r}}function C(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,u=e[l];if(void 0!==a&&0>j(a,n))void 0!==u&&0>j(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>j(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function j(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],R=[],N=1,M=null,_=3,A=!1,z=!1,I=!1;function F(e){for(var t=C(R);null!==t;){if(null===t.callback)T(R);else{if(!(t.startTime<=e))break;T(R),t.sortIndex=t.expirationTime,O(P,t)}t=C(R)}}function D(e){if(I=!1,F(e),!z)if(null!==C(P))z=!0,r(L);else{var t=C(R);null!==t&&o(D,t.startTime-e)}}function L(e,n){z=!1,I&&(I=!1,i()),A=!0;var r=_;try{for(F(n),M=C(P);null!==M&&(!(M.expirationTime>n)||e&&!a());){var l=M.callback;if(null!==l){M.callback=null,_=M.priorityLevel;var u=l(M.expirationTime<=n);n=t.unstable_now(),"function"===typeof u?M.callback=u:M===C(P)&&T(P),F(n)}else T(P);M=C(P)}if(null!==M)var s=!0;else{var c=C(R);null!==c&&o(D,c.startTime-n),s=!1}return s}finally{M=null,_=r,A=!1}}function W(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){z||A||(z=!0,r(L))},t.unstable_getCurrentPriorityLevel=function(){return _},t.unstable_getFirstCallbackNode=function(){return C(P)},t.unstable_next=function(e){switch(_){case 1:case 2:case 3:var t=3;break;default:t=_}var n=_;_=t;try{return e()}finally{_=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=B,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=_;_=e;try{return t()}finally{_=n}},t.unstable_scheduleCallback=function(e,n,a){var l=t.unstable_now();if("object"===typeof a&&null!==a){var u=a.delay;u="number"===typeof u&&0<u?l+u:l,a="number"===typeof a.timeout?a.timeout:W(e)}else a=W(e),u=l;return e={id:N++,callback:n,priorityLevel:e,startTime:u,expirationTime:a=u+a,sortIndex:-1},u>l?(e.sortIndex=u,O(R,e),null===C(P)&&e===C(R)&&(I?i():I=!0,o(D,u-l))):(e.sortIndex=a,O(P,e),z||A||(z=!0,r(L))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();F(e);var n=C(P);return n!==M&&null!==M&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<M.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=_;return function(){var n=_;_=t;try{return e.apply(this,arguments)}finally{_=n}}}},function(e,t,n){"use strict";var r=n(80);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r="function"===typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,b=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,g=r?Symbol.for("react.fundamental"):60117,x=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function k(e){if("object"===typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case d:case f:case a:case u:case l:case h:return e;default:switch(e=e&&e.$$typeof){case c:case p:case b:case v:case s:return e;default:return t}}case i:return t}}}function E(e){return k(e)===f}t.AsyncMode=d,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=b,t.Memo=v,t.Portal=i,t.Profiler=u,t.StrictMode=l,t.Suspense=h,t.isAsyncMode=function(e){return E(e)||k(e)===d},t.isConcurrentMode=E,t.isContextConsumer=function(e){return k(e)===c},t.isContextProvider=function(e){return k(e)===s},t.isElement=function(e){return"object"===typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return k(e)===p},t.isFragment=function(e){return k(e)===a},t.isLazy=function(e){return k(e)===b},t.isMemo=function(e){return k(e)===v},t.isPortal=function(e){return k(e)===i},t.isProfiler=function(e){return k(e)===u},t.isStrictMode=function(e){return k(e)===l},t.isSuspense=function(e){return k(e)===h},t.isValidElementType=function(e){return"string"===typeof e||"function"===typeof e||e===a||e===f||e===u||e===l||e===h||e===m||"object"===typeof e&&null!==e&&(e.$$typeof===b||e.$$typeof===v||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p||e.$$typeof===g||e.$$typeof===x||e.$$typeof===w||e.$$typeof===y)},t.typeOf=k},function(e,t,n){"use strict";var r=n(13),o=n(54),i=n(83),a=n(60);function l(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var u=l(n(57));u.Axios=i,u.create=function(e){return l(a(u.defaults,e))},u.Cancel=n(61),u.CancelToken=n(97),u.isCancel=n(56),u.all=function(e){return Promise.all(e)},u.spread=n(98),u.isAxiosError=n(99),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(13),o=n(55),i=n(84),a=n(85),l=n(60);function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"===typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=l(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(l(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,r){return this.request(l(r||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t,n){"use strict";var r=n(13);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(13),o=n(86),i=n(56),a=n(57);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return l(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(l(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(13);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"===typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"===typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],c=!1,d=-1;function f(){c&&u&&(c=!1,u.length?s=u.concat(s):d=-1,s.length&&p())}function p(){if(!c){var e=l(f);c=!0;for(var t=s.length;t;){for(u=s,s=[];++d<t;)u&&u[d].run();d=-1,t=s.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||c||l(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(13);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(59);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(13);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(i)&&l.push("domain="+i),!0===a&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(93),o=n(94);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(13),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(13);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(61);function o(e){if("function"!==typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";e.exports=function(e){return"object"===typeof e&&!0===e.isAxiosError}},,,,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(0),o=n.n(r),i=n(37);function a(){return o.a.useContext(i.a)}},function(e,t,n){"use strict";var r=n(1),o=n(2),i=n(0),a=(n(5),n(3)),l=n(4),u=n(6),s={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},c=i.forwardRef((function(e,t){var n=e.align,l=void 0===n?"inherit":n,c=e.classes,d=e.className,f=e.color,p=void 0===f?"initial":f,h=e.component,m=e.display,v=void 0===m?"initial":m,b=e.gutterBottom,y=void 0!==b&&b,g=e.noWrap,x=void 0!==g&&g,w=e.paragraph,k=void 0!==w&&w,E=e.variant,S=void 0===E?"body1":E,O=e.variantMapping,C=void 0===O?s:O,T=Object(o.a)(e,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","variant","variantMapping"]),j=h||(k?"p":C[S]||s[S])||"span";return i.createElement(j,Object(r.a)({className:Object(a.a)(c.root,d,"inherit"!==S&&c[S],"initial"!==p&&c["color".concat(Object(u.a)(p))],x&&c.noWrap,y&&c.gutterBottom,k&&c.paragraph,"inherit"!==l&&c["align".concat(Object(u.a)(l))],"initial"!==v&&c["display".concat(Object(u.a)(v))]),ref:t},T))}));t.a=Object(l.a)((function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}}),{name:"MuiTypography"})(c)},function(e,t,n){"use strict";n.d(t,"a",(function(){return hn}));var r=n(2),o=n(1),i=n(0),a=n.n(i),l="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u="object"===("undefined"===typeof window?"undefined":l(window))&&"object"===("undefined"===typeof document?"undefined":l(document))&&9===document.nodeType;var s=n(27),c=n(24),d=n(34),f=n(19),p={}.constructor;function h(e){if(null==e||"object"!==typeof e)return e;if(Array.isArray(e))return e.map(h);if(e.constructor!==p)return e;var t={};for(var n in e)t[n]=h(e[n]);return t}function m(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=h(t),i=r.plugins.onCreateRule(e,o,n);return i||(e[0],null)}var v=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n},b=function(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=v(e[r]," ");else n=v(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n};function y(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function g(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,i=void 0===o?0:o,a=t.fallbacks;if(e&&i++,a)if(Array.isArray(a))for(var l=0;l<a.length;l++){var u=a[l];for(var s in u){var c=u[s];null!=c&&(r&&(r+="\n"),r+=""+y(s+": "+b(c)+";",i))}}else for(var d in a){var f=a[d];null!=f&&(r&&(r+="\n"),r+=""+y(d+": "+b(f)+";",i))}for(var p in t){var h=t[p];null!=h&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+y(p+": "+b(h)+";",i))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),y(e+" {"+r,--i)+y("}",i)):r}var x=/([[\].#*$><+~=|^:(),"'`\s])/g,w="undefined"!==typeof CSS&&CSS.escape,k=function(e){return w?w(e):e.replace(x,"\\$1")},E=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var i=null==o||!1===o,a=e in this.style;if(i&&!a&&!r)return this;var l=i&&a;if(l?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var u=this.options.sheet;return u&&u.attached,this},e}(),S=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var i=r.selector,a=r.scoped,l=r.sheet,u=r.generateId;return i?o.selectorText=i:!1!==a&&(o.id=u(Object(d.a)(Object(d.a)(o)),l),o.selectorText="."+k(o.id)),o}Object(c.a)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!==typeof n?e[t]=n:Array.isArray(n)&&(e[t]=b(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(o.a)({},e,{allowEmpty:!0}):e;return g(this.selectorText,this.style,n)},Object(s.a)(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(E),O={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new S(e,t,n)}},C={indent:1,children:!0},T=/@([\w-]+)/,j=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e;var r=e.match(T);for(var i in this.at=r?r[1]:"unknown",this.query=n.name||"@"+this.at,this.options=n,this.rules=new G(Object(o.a)({},n,{parent:this})),t)this.rules.add(i,t[i]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=C),null==e.indent&&(e.indent=C.indent),null==e.children&&(e.children=C.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),P=/@media|@supports\s+/,R={onCreateRule:function(e,t,n){return P.test(e)?new j(e,t,n):null}},N={indent:1,children:!0},M=/@keyframes\s+([\w-]+)/,_=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var r=e.match(M);r&&r[1]?this.name=r[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var i=n.scoped,a=n.sheet,l=n.generateId;for(var u in this.id=!1===i?this.name:k(l(this,a)),this.rules=new G(Object(o.a)({},n,{parent:this})),t)this.rules.add(u,t[u],Object(o.a)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=N),null==e.indent&&(e.indent=N.indent),null==e.children&&(e.children=N.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),A=/@keyframes\s+/,z=/\$([\w-]+)/g,I=function(e,t){return"string"===typeof e?e.replace(z,(function(e,n){return n in t?t[n]:e})):e},F=function(e,t,n){var r=e[t],o=I(r,n);o!==r&&(e[t]=o)},D={onCreateRule:function(e,t,n){return"string"===typeof e&&A.test(e)?new _(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&F(e,"animation-name",n.keyframes),"animation"in e&&F(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return I(e,r.keyframes);default:return e}}},L=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return Object(c.a)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(o.a)({},e,{allowEmpty:!0}):e;return g(this.key,this.style,n)},t}(E),W={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new L(e,t,n):null}},B=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=g(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return g(this.at,this.style,e)},e}(),U=/@font-face/,$={onCreateRule:function(e,t,n){return U.test(e)?new B(e,t,n):null}},V=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return g(this.key,this.style,e)},e}(),H={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new V(e,t,n):null}},q=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),K={"@charset":!0,"@import":!0,"@namespace":!0},Q=[O,R,D,W,$,H,{onCreateRule:function(e,t,n){return e in K?new q(e,t,n):null}}],X={process:!0},Y={force:!0,process:!0},G=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var r=this.options,i=r.parent,a=r.sheet,l=r.jss,u=r.Renderer,s=r.generateId,c=r.scoped,d=Object(o.a)({classes:this.classes,parent:i,sheet:a,jss:l,Renderer:u,generateId:s,scoped:c,name:e,keyframes:this.keyframes,selector:void 0},n),f=e;e in this.raw&&(f=e+"-d"+this.counter++),this.raw[f]=t,f in this.classes&&(d.selector="."+k(this.classes[f]));var p=m(f,t,d);if(!p)return null;this.register(p);var h=void 0===d.index?this.index.length:d.index;return this.index.splice(h,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof S?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof _&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof S?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof _&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"===typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=X);var o=this.options,i=o.jss.plugins,a=o.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var l=t,u=l.style;if(i.onUpdate(n,t,a,r),r.process&&u&&u!==l.style){for(var s in i.onProcessStyle(l.style,l,a),l.style){var c=l.style[s];c!==u[s]&&l.prop(s,c,Y)}for(var d in u){var f=l.style[d],p=u[d];null==f&&f!==p&&l.prop(d,null,Y)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t},e}(),J=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=Object(o.a)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new G(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"===typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),Z=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),ee=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=Object(f.a)(t,["attached"]),o="",i=0;i<this.registry.length;i++){var a=this.registry[i];null!=n&&a.attached!==n||(o&&(o+="\n"),o+=a.toString(r))}return o},Object(s.a)(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),te="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),ne="2f1acc6c3a606b082e5eef5e54414ffb";null==te[ne]&&(te[ne]=0);var re=te[ne]++,oe=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var o="",i="";return r&&(r.options.classNamePrefix&&(i=r.options.classNamePrefix),null!=r.options.jss.id&&(o=String(r.options.jss.id))),e.minify?""+(i||"c")+re+o+t:i+n.key+"-"+re+(o?"-"+o:"")+"-"+t}},ie=function(e){var t;return function(){return t||(t=e()),t}},ae=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(n){return""}},le=function(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=b(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(o){return!1}return!0},ue=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(n){}},se=function(e,t){return e.selectorText=t,e.selectorText===t},ce=ie((function(){return document.querySelector("head")}));function de(e){var t=ee.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"===typeof r){var o=function(e){for(var t=ce(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}var fe=ie((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),pe=function(e,t,n){try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(r){return!1}return e.cssRules[n]},he=function(e,t){var n=e.cssRules.length;return void 0===t||t>n?n:t},me=function(){function e(e){this.getPropertyValue=ae,this.setProperty=le,this.removeProperty=ue,this.setSelector=se,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,this.cssRules=[],e&&ee.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,o=t.element;this.element=o||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var i=fe();i&&this.element.setAttribute("nonce",i)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=de(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"===typeof n.nodeType){var o=n,i=o.parentNode;i&&i.insertBefore(e,o.nextSibling)}else ce().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;if("conditional"===e.type||"keyframes"===e.type){var i=he(n,t);if(!1===(o=pe(n,r.toString({children:!1}),i)))return!1;this.refCssRule(e,i,o)}return this.insertRules(r.rules,o),o}var a=e.toString();if(!a)return!1;var l=he(n,t),u=pe(n,a,l);return!1!==u&&(this.hasInsertedRules=!0,this.refCssRule(e,l,u),u)},t.refCssRule=function(e,t,n){e.renderable=n,e.options.parent instanceof J&&(this.cssRules[t]=n)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),this.cssRules.splice(n,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.cssRules.splice(n,1),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),ve=0,be=function(){function e(e){this.id=ve++,this.version="10.5.1",this.plugins=new Z,this.options={id:{minify:!1},createGenerateId:oe,Renderer:u?me:null,plugins:[]},this.generateId=oe({minify:!1});for(var t=0;t<Q.length;t++)this.plugins.use(Q[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=Object(o.a)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!==typeof n&&(n=0===ee.index?0:ee.index+1);var r=new J(e,Object(o.a)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r},t.removeStyleSheet=function(e){return e.detach(),ee.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"===typeof e)return this.createRule(void 0,e,t);var r=Object(o.a)({},n,{name:e,jss:this,Renderer:this.options.Renderer});r.generateId||(r.generateId=this.generateId),r.classes||(r.classes={}),r.keyframes||(r.keyframes={});var i=m(e,t,r);return i&&this.plugins.onProcessRule(i),i},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();var ye="object"===typeof CSS&&null!=CSS&&"number"in CSS,ge=function(e){return new be(e)},xe=(ge(),n(134)),we={set:function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}},ke=n(105),Ee=(n(5),n(39)),Se=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];var Oe=Date.now(),Ce="fnValues"+Oe,Te="fnStyle"+ ++Oe,je=function(){return{onCreateRule:function(e,t,n){if("function"!==typeof t)return null;var r=m(e,{},n);return r[Te]=t,r},onProcessStyle:function(e,t){if(Ce in t||Te in t)return e;var n={};for(var r in e){var o=e[r];"function"===typeof o&&(delete e[r],n[r]=o)}return t[Ce]=n,e},onUpdate:function(e,t,n,r){var o=t,i=o[Te];i&&(o.style=i(e)||{});var a=o[Ce];if(a)for(var l in a)o.prop(l,a[l](e),r)}}},Pe="@global",Re=function(){function e(e,t,n){for(var r in this.type="global",this.at=Pe,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new G(Object(o.a)({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),Ne=function(){function e(e,t,n){this.type="global",this.at=Pe,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr("@global ".length);this.rule=n.jss.createRule(r,t,Object(o.a)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),Me=/\s*,\s*/g;function _e(e,t){for(var n=e.split(Me),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}var Ae=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===Pe)return new Re(e,t,n);if("@"===e[0]&&"@global "===e.substr(0,"@global ".length))return new Ne(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var n=e.options,r=e.style,i=r?r[Pe]:null;if(i){for(var a in i)t.addRule(a,i[a],Object(o.a)({},n,{selector:_e(a,e.selector)}));delete r[Pe]}}(e,t),function(e,t){var n=e.options,r=e.style;for(var i in r)if("@"===i[0]&&i.substr(0,Pe.length)===Pe){var a=_e(i.substr(Pe.length),e.selector);t.addRule(a,r[i],Object(o.a)({},n,{selector:a})),delete r[i]}}(e,t))}}},ze=/\s*,\s*/g,Ie=/&/g,Fe=/\$([\w-]+)/g;var De=function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split(ze),r=e.split(ze),o="",i=0;i<n.length;i++)for(var a=n[i],l=0;l<r.length;l++){var u=r[l];o&&(o+=", "),o+=-1!==u.indexOf("&")?u.replace(Ie,a):a+" "+u}return o}function n(e,t,n){if(n)return Object(o.a)({},n,{index:n.index+1});var r=e.options.nestingLevel;r=void 0===r?1:r+1;var i=Object(o.a)({},e.options,{nestingLevel:r,index:t.indexOf(e)+1});return delete i.name,i}return{onProcessStyle:function(r,i,a){if("style"!==i.type)return r;var l,u,s=i,c=s.options.parent;for(var d in r){var f=-1!==d.indexOf("&"),p="@"===d[0];if(f||p){if(l=n(s,c,l),f){var h=t(d,s.selector);u||(u=e(c,a)),h=h.replace(Fe,u),c.addRule(h,r[d],Object(o.a)({},l,{selector:h}))}else p&&c.addRule(d,{},l).addRule(s.key,r[d],{selector:s.selector});delete r[d]}}return r}}},Le=/[A-Z]/g,We=/^ms-/,Be={};function Ue(e){return"-"+e.toLowerCase()}var $e=function(e){if(Be.hasOwnProperty(e))return Be[e];var t=e.replace(Le,Ue);return Be[e]=We.test(t)?"-"+t:t};function Ve(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:$e(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(Ve):t.fallbacks=Ve(e.fallbacks)),t}var He=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=Ve(e[t]);return e}return Ve(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=$e(t);return t===r?e:(n.prop(r,e),null)}}},qe=ye&&CSS?CSS.px:"px",Ke=ye&&CSS?CSS.ms:"ms",Qe=ye&&CSS?CSS.percent:"%";function Xe(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var Ye=Xe({"animation-delay":Ke,"animation-duration":Ke,"background-position":qe,"background-position-x":qe,"background-position-y":qe,"background-size":qe,border:qe,"border-bottom":qe,"border-bottom-left-radius":qe,"border-bottom-right-radius":qe,"border-bottom-width":qe,"border-left":qe,"border-left-width":qe,"border-radius":qe,"border-right":qe,"border-right-width":qe,"border-top":qe,"border-top-left-radius":qe,"border-top-right-radius":qe,"border-top-width":qe,"border-width":qe,"border-block":qe,"border-block-end":qe,"border-block-end-width":qe,"border-block-start":qe,"border-block-start-width":qe,"border-block-width":qe,"border-inline":qe,"border-inline-end":qe,"border-inline-end-width":qe,"border-inline-start":qe,"border-inline-start-width":qe,"border-inline-width":qe,"border-start-start-radius":qe,"border-start-end-radius":qe,"border-end-start-radius":qe,"border-end-end-radius":qe,margin:qe,"margin-bottom":qe,"margin-left":qe,"margin-right":qe,"margin-top":qe,"margin-block":qe,"margin-block-end":qe,"margin-block-start":qe,"margin-inline":qe,"margin-inline-end":qe,"margin-inline-start":qe,padding:qe,"padding-bottom":qe,"padding-left":qe,"padding-right":qe,"padding-top":qe,"padding-block":qe,"padding-block-end":qe,"padding-block-start":qe,"padding-inline":qe,"padding-inline-end":qe,"padding-inline-start":qe,"mask-position-x":qe,"mask-position-y":qe,"mask-size":qe,height:qe,width:qe,"min-height":qe,"max-height":qe,"min-width":qe,"max-width":qe,bottom:qe,left:qe,top:qe,right:qe,inset:qe,"inset-block":qe,"inset-block-end":qe,"inset-block-start":qe,"inset-inline":qe,"inset-inline-end":qe,"inset-inline-start":qe,"box-shadow":qe,"text-shadow":qe,"column-gap":qe,"column-rule":qe,"column-rule-width":qe,"column-width":qe,"font-size":qe,"font-size-delta":qe,"letter-spacing":qe,"text-decoration-thickness":qe,"text-indent":qe,"text-stroke":qe,"text-stroke-width":qe,"word-spacing":qe,motion:qe,"motion-offset":qe,outline:qe,"outline-offset":qe,"outline-width":qe,perspective:qe,"perspective-origin-x":Qe,"perspective-origin-y":Qe,"transform-origin":Qe,"transform-origin-x":Qe,"transform-origin-y":Qe,"transform-origin-z":Qe,"transition-delay":Ke,"transition-duration":Ke,"vertical-align":qe,"flex-basis":qe,"shape-margin":qe,size:qe,gap:qe,grid:qe,"grid-gap":qe,"row-gap":qe,"grid-row-gap":qe,"grid-column-gap":qe,"grid-template-rows":qe,"grid-template-columns":qe,"grid-auto-rows":qe,"grid-auto-columns":qe,"box-shadow-x":qe,"box-shadow-y":qe,"box-shadow-blur":qe,"box-shadow-spread":qe,"font-line-height":qe,"text-shadow-x":qe,"text-shadow-y":qe,"text-shadow-blur":qe});function Ge(e,t,n){if(null==t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=Ge(e,t[r],n);else if("object"===typeof t)if("fallbacks"===e)for(var o in t)t[o]=Ge(o,t[o],n);else for(var i in t)t[i]=Ge(e+"-"+i,t[i],n);else if("number"===typeof t&&!Number.isNaN(t)){var a=n[e]||Ye[e];return!a||0===t&&a===qe?t.toString():"function"===typeof a?a(t).toString():""+t+a}return t}var Je=function(e){void 0===e&&(e={});var t=Xe(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=Ge(r,e[r],t);return e},onChangeValue:function(e,n){return Ge(n,e,t)}}},Ze=n(14),et="",tt="",nt="",rt="",ot=u&&"ontouchstart"in document.documentElement;if(u){var it={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},at=document.createElement("p").style;for(var lt in it)if(lt+"Transform"in at){et=lt,tt=it[lt];break}"Webkit"===et&&"msHyphens"in at&&(et="ms",tt=it.ms,rt="edge"),"Webkit"===et&&"-apple-trailing-word"in at&&(nt="apple")}var ut=et,st=tt,ct=nt,dt=rt,ft=ot;var pt={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===ut?"-webkit-"+e:st+e)}},ht={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===ut?st+"print-"+e:e)}},mt=/[-\s]+(.)?/g;function vt(e,t){return t?t.toUpperCase():""}function bt(e){return e.replace(mt,vt)}function yt(e){return bt("-"+e)}var gt,xt={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===ut){if(bt("mask-image")in t)return e;if(ut+yt("mask-image")in t)return st+e}return e}},wt={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==ct||ft?e:st+e)}},kt={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:st+e)}},Et={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:st+e)}},St={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===ut||"ms"===ut&&"edge"!==dt?st+e:e)}},Ot={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===ut||"ms"===ut||"apple"===ct?st+e:e)}},Ct={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===ut?"WebkitColumn"+yt(e)in t&&st+"column-"+e:"Moz"===ut&&("page"+yt(e)in t&&"page-"+e))}},Tt={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===ut)return e;var n=e.replace("-inline","");return ut+yt(n)in t&&st+n}},jt={supportedProperty:function(e,t){return bt(e)in t&&e}},Pt={supportedProperty:function(e,t){var n=yt(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:ut+n in t?st+e:"Webkit"!==ut&&"Webkit"+n in t&&"-webkit-"+e}},Rt={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===ut?""+st+e:e)}},Nt={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===ut?st+"scroll-chaining":e)}},Mt={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},_t={supportedProperty:function(e,t){var n=Mt[e];return!!n&&(ut+yt(n)in t&&st+n)}},At={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},zt=Object.keys(At),It=function(e){return st+e},Ft=[pt,ht,xt,wt,kt,Et,St,Ot,Ct,Tt,jt,Pt,Rt,Nt,_t,{supportedProperty:function(e,t,n){var r=n.multiple;if(zt.indexOf(e)>-1){var o=At[e];if(!Array.isArray(o))return ut+yt(o)in t&&st+o;if(!r)return!1;for(var i=0;i<o.length;i++)if(!(ut+yt(o[0])in t))return!1;return o.map(It)}return!1}}],Dt=Ft.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),Lt=Ft.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,Object(Ze.a)(t.noPrefill)),e}),[]),Wt={};if(u){gt=document.createElement("p");var Bt=window.getComputedStyle(document.documentElement,"");for(var Ut in Bt)isNaN(Ut)||(Wt[Bt[Ut]]=Bt[Ut]);Lt.forEach((function(e){return delete Wt[e]}))}function $t(e,t){if(void 0===t&&(t={}),!gt)return e;if(null!=Wt[e])return Wt[e];"transition"!==e&&"transform"!==e||(t[e]=e in gt.style);for(var n=0;n<Dt.length&&(Wt[e]=Dt[n](e,gt.style,t),!Wt[e]);n++);try{gt.style[e]=""}catch(r){return!1}return Wt[e]}var Vt,Ht={},qt={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},Kt=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Qt(e,t,n){if("var"===t)return"var";if("all"===t)return"all";if("all"===n)return", all";var r=t?$t(t):", "+$t(n);return r||(t||n)}function Xt(e,t){var n=t;if(!Vt||"content"===e)return t;if("string"!==typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=Ht[r])return Ht[r];try{Vt.style[e]=n}catch(o){return Ht[r]=!1,!1}if(qt[e])n=n.replace(Kt,Qt);else if(""===Vt.style[e]&&("-ms-flex"===(n=st+n)&&(Vt.style[e]="-ms-flexbox"),Vt.style[e]=n,""===Vt.style[e]))return Ht[r]=!1,!1;return Vt.style[e]="",Ht[r]=n,Ht[r]}u&&(Vt=document.createElement("p"));var Yt=function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var o=!1,i=$t(n);i&&i!==n&&(o=!0);var a=!1,l=Xt(i,b(r));l&&l!==r&&(a=!0),(o||a)&&(o&&delete t[n],t[i||n]=l||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at="-"===(n=t.at)[1]||"ms"===ut?n:"@"+st+"keyframes"+n.substr(10)}var n},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return Xt(t,b(e))||e}}};var Gt=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},o=Object.keys(t).sort(e),i=0;i<o.length;i++)r[o[i]]=t[o[i]];return r}}};function Jt(){return{plugins:[je(),Ae(),De(),He(),Je(),"undefined"===typeof window?null:Yt(),Gt()]}}var Zt=ge(Jt()),en={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,i=e.seed,a=void 0===i?"":i,l=""===a?"":"".concat(a,"-"),u=0,s=function(){return u+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==Se.indexOf(e.key))return"Mui-".concat(e.key);var i="".concat(l).concat(r,"-").concat(e.key);return t.options.theme[Ee.a]&&""===a?"".concat(i,"-").concat(s()):i}return"".concat(l).concat(o).concat(s())}}(),jss:Zt,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},tn=a.a.createContext(en);var nn=-1e9;function rn(){return nn+=1}var on=n(17);function an(e){return e&&"object"===Object(on.a)(e)&&e.constructor===Object}function ln(e){var t="function"===typeof e;return{create:function(n,r){var i;try{i=t?e(n):e}catch(u){throw u}if(!r||!n.overrides||!n.overrides[r])return i;var a=n.overrides[r],l=Object(o.a)({},i);return Object.keys(a).forEach((function(e){l[e]=function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},i=r.clone?Object(o.a)({},t):t;return an(t)&&an(n)&&Object.keys(n).forEach((function(o){"__proto__"!==o&&(an(n[o])&&o in t?i[o]=e(t[o],n[o],r):i[o]=n[o])})),i}(l[e],a[e])})),l},options:{}}}var un={};function sn(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=Object(xe.a)({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function cn(e,t){var n=e.state,r=e.theme,i=e.stylesOptions,a=e.stylesCreator,l=e.name;if(!i.disableGeneration){var u=we.get(i.sheetsManager,a,r);u||(u={refs:0,staticSheet:null,dynamicStyles:null},we.set(i.sheetsManager,a,r,u));var s=Object(o.a)({},a.options,i,{theme:r,flip:"boolean"===typeof i.flip?i.flip:"rtl"===r.direction});s.generateId=s.serverGenerateClassName||s.generateClassName;var c=i.sheetsRegistry;if(0===u.refs){var d;i.sheetsCache&&(d=we.get(i.sheetsCache,a,r));var f=a.create(r,l);d||((d=i.jss.createStyleSheet(f,Object(o.a)({link:!1},s))).attach(),i.sheetsCache&&we.set(i.sheetsCache,a,r,d)),c&&c.add(d),u.staticSheet=d,u.dynamicStyles=function e(t){var n=null;for(var r in t){var o=t[r],i=typeof o;if("function"===i)n||(n={}),n[r]=o;else if("object"===i&&null!==o&&!Array.isArray(o)){var a=e(o);a&&(n||(n={}),n[r]=a)}}return n}(f)}if(u.dynamicStyles){var p=i.jss.createStyleSheet(u.dynamicStyles,Object(o.a)({link:!0},s));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=Object(xe.a)({baseClasses:u.staticSheet.classes,newClasses:p.classes}),c&&c.add(p)}else n.classes=u.staticSheet.classes;u.refs+=1}}function dn(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function fn(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var i=we.get(r.sheetsManager,o,n);i.refs-=1;var a=r.sheetsRegistry;0===i.refs&&(we.delete(r.sheetsManager,o,n),r.jss.removeStyleSheet(i.staticSheet),a&&a.remove(i.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function pn(e,t){var n,r=a.a.useRef([]),o=a.a.useMemo((function(){return{}}),t);r.current!==o&&(r.current=o,n=e()),a.a.useEffect((function(){return function(){n&&n()}}),[o])}function hn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,i=t.classNamePrefix,l=t.Component,u=t.defaultTheme,s=void 0===u?un:u,c=Object(r.a)(t,["name","classNamePrefix","Component","defaultTheme"]),d=ln(e),f=n||i||"makeStyles";d.options={index:rn(),name:n,meta:f,classNamePrefix:f};var p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object(ke.a)()||s,r=Object(o.a)({},a.a.useContext(tn),c),i=a.a.useRef(),u=a.a.useRef();pn((function(){var o={name:n,state:{},stylesCreator:d,stylesOptions:r,theme:t};return cn(o,e),u.current=!1,i.current=o,function(){fn(o)}}),[t,d]),a.a.useEffect((function(){u.current&&dn(i.current,e),u.current=!0}));var f=sn(i.current,e.classes,l);return f};return p}},function(e,t,n){"use strict";var r=n(1),o=n(2),i=n(0),a=n.n(i),l=(n(5),n(9)),u=n(3),s=n(8),c=n(18),d=n(4),f=n(43),p=n(14),h=n(19),m=n(34),v=n(24),b=n(28);function y(e,t){var n=Object.create(null);return e&&i.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&Object(i.isValidElement)(e)?t(e):e}(e)})),n}function g(e,t,n){return null!=n[t]?n[t]:e.props[t]}function x(e,t,n){var r=y(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var l={};for(var u in t){if(o[u])for(r=0;r<o[u].length;r++){var s=o[u][r];l[o[u][r]]=n(s)}l[u]=n(u)}for(r=0;r<i.length;r++)l[i[r]]=n(i[r]);return l}(t,r);return Object.keys(o).forEach((function(a){var l=o[a];if(Object(i.isValidElement)(l)){var u=a in t,s=a in r,c=t[a],d=Object(i.isValidElement)(c)&&!c.props.in;!s||u&&!d?s||!u||d?s&&u&&Object(i.isValidElement)(c)&&(o[a]=Object(i.cloneElement)(l,{onExited:n.bind(null,l),in:c.props.in,exit:g(l,"exit",e),enter:g(l,"enter",e)})):o[a]=Object(i.cloneElement)(l,{in:!1}):o[a]=Object(i.cloneElement)(l,{onExited:n.bind(null,l),in:!0,exit:g(l,"exit",e),enter:g(l,"enter",e)})}})),o}var w=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},k=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(Object(m.a)(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}Object(v.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,r,o=t.children,a=t.handleExited;return{children:t.firstRender?(n=e,r=a,y(n.children,(function(e){return Object(i.cloneElement)(e,{onExited:r.bind(null,e),in:!0,appear:g(e,"appear",n),enter:g(e,"enter",n),exit:g(e,"exit",n)})}))):x(e,o,a),firstRender:!1}},n.handleExited=function(e,t){var n=y(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=Object(r.a)({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=Object(h.a)(e,["component","childFactory"]),o=this.state.contextValue,i=w(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?a.a.createElement(b.a.Provider,{value:o},i):a.a.createElement(b.a.Provider,{value:o},a.a.createElement(t,r,i))},t}(a.a.Component);k.propTypes={},k.defaultProps={component:"div",childFactory:function(e){return e}};var E=k,S="undefined"===typeof window?i.useEffect:i.useLayoutEffect;var O=function(e){var t=e.classes,n=e.pulsate,r=void 0!==n&&n,o=e.rippleX,a=e.rippleY,l=e.rippleSize,s=e.in,d=e.onExited,f=void 0===d?function(){}:d,p=e.timeout,h=i.useState(!1),m=h[0],v=h[1],b=Object(u.a)(t.ripple,t.rippleVisible,r&&t.ripplePulsate),y={width:l,height:l,top:-l/2+a,left:-l/2+o},g=Object(u.a)(t.child,m&&t.childLeaving,r&&t.childPulsate),x=Object(c.a)(f);return S((function(){if(!s){v(!0);var e=setTimeout(x,p);return function(){clearTimeout(e)}}}),[x,s,p]),i.createElement("span",{className:b,style:y},i.createElement("span",{className:g}))},C=i.forwardRef((function(e,t){var n=e.center,a=void 0!==n&&n,l=e.classes,s=e.className,c=Object(o.a)(e,["center","classes","className"]),d=i.useState([]),f=d[0],h=d[1],m=i.useRef(0),v=i.useRef(null);i.useEffect((function(){v.current&&(v.current(),v.current=null)}),[f]);var b=i.useRef(!1),y=i.useRef(null),g=i.useRef(null),x=i.useRef(null);i.useEffect((function(){return function(){clearTimeout(y.current)}}),[]);var w=i.useCallback((function(e){var t=e.pulsate,n=e.rippleX,r=e.rippleY,o=e.rippleSize,a=e.cb;h((function(e){return[].concat(Object(p.a)(e),[i.createElement(O,{key:m.current,classes:l,timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o})])})),m.current+=1,v.current=a}),[l]),k=i.useCallback((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,r=t.pulsate,o=void 0!==r&&r,i=t.center,l=void 0===i?a||t.pulsate:i,u=t.fakeElement,s=void 0!==u&&u;if("mousedown"===e.type&&b.current)b.current=!1;else{"touchstart"===e.type&&(b.current=!0);var c,d,f,p=s?null:x.current,h=p?p.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(l||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(h.width/2),d=Math.round(h.height/2);else{var m=e.touches?e.touches[0]:e,v=m.clientX,k=m.clientY;c=Math.round(v-h.left),d=Math.round(k-h.top)}if(l)(f=Math.sqrt((2*Math.pow(h.width,2)+Math.pow(h.height,2))/3))%2===0&&(f+=1);else{var E=2*Math.max(Math.abs((p?p.clientWidth:0)-c),c)+2,S=2*Math.max(Math.abs((p?p.clientHeight:0)-d),d)+2;f=Math.sqrt(Math.pow(E,2)+Math.pow(S,2))}e.touches?null===g.current&&(g.current=function(){w({pulsate:o,rippleX:c,rippleY:d,rippleSize:f,cb:n})},y.current=setTimeout((function(){g.current&&(g.current(),g.current=null)}),80)):w({pulsate:o,rippleX:c,rippleY:d,rippleSize:f,cb:n})}}),[a,w]),S=i.useCallback((function(){k({},{pulsate:!0})}),[k]),C=i.useCallback((function(e,t){if(clearTimeout(y.current),"touchend"===e.type&&g.current)return e.persist(),g.current(),g.current=null,void(y.current=setTimeout((function(){C(e,t)})));g.current=null,h((function(e){return e.length>0?e.slice(1):e})),v.current=t}),[]);return i.useImperativeHandle(t,(function(){return{pulsate:S,start:k,stop:C}}),[S,k,C]),i.createElement("span",Object(r.a)({className:Object(u.a)(l.root,s),ref:x},c),i.createElement(E,{component:null,exit:!0},f))})),T=Object(d.a)((function(e){return{root:{overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"$enter ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"$exit ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"$pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}}),{flip:!1,name:"MuiTouchRipple"})(i.memo(C)),j=i.forwardRef((function(e,t){var n=e.action,a=e.buttonRef,d=e.centerRipple,p=void 0!==d&&d,h=e.children,m=e.classes,v=e.className,b=e.component,y=void 0===b?"button":b,g=e.disabled,x=void 0!==g&&g,w=e.disableRipple,k=void 0!==w&&w,E=e.disableTouchRipple,S=void 0!==E&&E,O=e.focusRipple,C=void 0!==O&&O,j=e.focusVisibleClassName,P=e.onBlur,R=e.onClick,N=e.onFocus,M=e.onFocusVisible,_=e.onKeyDown,A=e.onKeyUp,z=e.onMouseDown,I=e.onMouseLeave,F=e.onMouseUp,D=e.onTouchEnd,L=e.onTouchMove,W=e.onTouchStart,B=e.onDragLeave,U=e.tabIndex,$=void 0===U?0:U,V=e.TouchRippleProps,H=e.type,q=void 0===H?"button":H,K=Object(o.a)(e,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type"]),Q=i.useRef(null);var X=i.useRef(null),Y=i.useState(!1),G=Y[0],J=Y[1];x&&G&&J(!1);var Z=Object(f.a)(),ee=Z.isFocusVisible,te=Z.onBlurVisible,ne=Z.ref;function re(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:S;return Object(c.a)((function(r){return t&&t(r),!n&&X.current&&X.current[e](r),!0}))}i.useImperativeHandle(n,(function(){return{focusVisible:function(){J(!0),Q.current.focus()}}}),[]),i.useEffect((function(){G&&C&&!k&&X.current.pulsate()}),[k,C,G]);var oe=re("start",z),ie=re("stop",B),ae=re("stop",F),le=re("stop",(function(e){G&&e.preventDefault(),I&&I(e)})),ue=re("start",W),se=re("stop",D),ce=re("stop",L),de=re("stop",(function(e){G&&(te(e),J(!1)),P&&P(e)}),!1),fe=Object(c.a)((function(e){Q.current||(Q.current=e.currentTarget),ee(e)&&(J(!0),M&&M(e)),N&&N(e)})),pe=function(){var e=l.findDOMNode(Q.current);return y&&"button"!==y&&!("A"===e.tagName&&e.href)},he=i.useRef(!1),me=Object(c.a)((function(e){C&&!he.current&&G&&X.current&&" "===e.key&&(he.current=!0,e.persist(),X.current.stop(e,(function(){X.current.start(e)}))),e.target===e.currentTarget&&pe()&&" "===e.key&&e.preventDefault(),_&&_(e),e.target===e.currentTarget&&pe()&&"Enter"===e.key&&!x&&(e.preventDefault(),R&&R(e))})),ve=Object(c.a)((function(e){C&&" "===e.key&&X.current&&G&&!e.defaultPrevented&&(he.current=!1,e.persist(),X.current.stop(e,(function(){X.current.pulsate(e)}))),A&&A(e),R&&e.target===e.currentTarget&&pe()&&" "===e.key&&!e.defaultPrevented&&R(e)})),be=y;"button"===be&&K.href&&(be="a");var ye={};"button"===be?(ye.type=q,ye.disabled=x):("a"===be&&K.href||(ye.role="button"),ye["aria-disabled"]=x);var ge=Object(s.a)(a,t),xe=Object(s.a)(ne,Q),we=Object(s.a)(ge,xe),ke=i.useState(!1),Ee=ke[0],Se=ke[1];i.useEffect((function(){Se(!0)}),[]);var Oe=Ee&&!k&&!x;return i.createElement(be,Object(r.a)({className:Object(u.a)(m.root,v,G&&[m.focusVisible,j],x&&m.disabled),onBlur:de,onClick:R,onFocus:fe,onKeyDown:me,onKeyUp:ve,onMouseDown:oe,onMouseLeave:le,onMouseUp:ae,onDragLeave:ie,onTouchEnd:se,onTouchMove:ce,onTouchStart:ue,ref:we,tabIndex:x?-1:$},ye,K),h,Oe?i.createElement(T,Object(r.a)({ref:X,center:p},V)):null)}));t.a=Object(d.a)({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})(j)},,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(1);function o(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;e.Component;if(!n)return t;var o=Object(r.a)({},t);return Object.keys(n).forEach((function(e){n[e]&&(o[e]="".concat(t[e]," ").concat(n[e]))})),o}},function(e,t,n){"use strict";var r=n(2),o=n(1),i=n(0),a=(n(5),n(3)),l=n(4),u=[0,1,2,3,4,5,6,7,8,9,10],s=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];function c(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=parseFloat(e);return"".concat(n/t).concat(String(e).replace(String(n),"")||"px")}var d=i.forwardRef((function(e,t){var n=e.alignContent,l=void 0===n?"stretch":n,u=e.alignItems,s=void 0===u?"stretch":u,c=e.classes,d=e.className,f=e.component,p=void 0===f?"div":f,h=e.container,m=void 0!==h&&h,v=e.direction,b=void 0===v?"row":v,y=e.item,g=void 0!==y&&y,x=e.justify,w=void 0===x?"flex-start":x,k=e.lg,E=void 0!==k&&k,S=e.md,O=void 0!==S&&S,C=e.sm,T=void 0!==C&&C,j=e.spacing,P=void 0===j?0:j,R=e.wrap,N=void 0===R?"wrap":R,M=e.xl,_=void 0!==M&&M,A=e.xs,z=void 0!==A&&A,I=e.zeroMinWidth,F=void 0!==I&&I,D=Object(r.a)(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),L=Object(a.a)(c.root,d,m&&[c.container,0!==P&&c["spacing-xs-".concat(String(P))]],g&&c.item,F&&c.zeroMinWidth,"row"!==b&&c["direction-xs-".concat(String(b))],"wrap"!==N&&c["wrap-xs-".concat(String(N))],"stretch"!==s&&c["align-items-xs-".concat(String(s))],"stretch"!==l&&c["align-content-xs-".concat(String(l))],"flex-start"!==w&&c["justify-xs-".concat(String(w))],!1!==z&&c["grid-xs-".concat(String(z))],!1!==T&&c["grid-sm-".concat(String(T))],!1!==O&&c["grid-md-".concat(String(O))],!1!==E&&c["grid-lg-".concat(String(E))],!1!==_&&c["grid-xl-".concat(String(_))]);return i.createElement(p,Object(o.a)({className:L,ref:t},D))})),f=Object(l.a)((function(e){return Object(o.a)(Object(o.a)({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return u.forEach((function(r){var o=e.spacing(r);0!==o&&(n["spacing-".concat(t,"-").concat(r)]={margin:"-".concat(c(o,2)),width:"calc(100% + ".concat(c(o),")"),"& > $item":{padding:c(o,2)}})})),n}(e,"xs")),e.breakpoints.keys.reduce((function(t,n){return function(e,t,n){var r={};s.forEach((function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var o="".concat(Math.round(e/12*1e8)/1e6,"%");r[t]={flexBasis:o,flexGrow:0,maxWidth:o}}else r[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else r[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}})),"xs"===n?Object(o.a)(e,r):e[t.breakpoints.up(n)]=r}(t,e,n),t}),{}))}),{name:"MuiGrid"})(d);t.a=f},function(e,t,n){"use strict";function r(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(1),o=n(2),i=n(0),a=(n(5),n(3)),l=n(6),u=n(4),s=n(43),c=n(8),d=n(106),f=i.forwardRef((function(e,t){var n=e.classes,u=e.className,f=e.color,p=void 0===f?"primary":f,h=e.component,m=void 0===h?"a":h,v=e.onBlur,b=e.onFocus,y=e.TypographyClasses,g=e.underline,x=void 0===g?"hover":g,w=e.variant,k=void 0===w?"inherit":w,E=Object(o.a)(e,["classes","className","color","component","onBlur","onFocus","TypographyClasses","underline","variant"]),S=Object(s.a)(),O=S.isFocusVisible,C=S.onBlurVisible,T=S.ref,j=i.useState(!1),P=j[0],R=j[1],N=Object(c.a)(t,T);return i.createElement(d.a,Object(r.a)({className:Object(a.a)(n.root,n["underline".concat(Object(l.a)(x))],u,P&&n.focusVisible,"button"===m&&n.button),classes:y,color:p,component:m,onBlur:function(e){P&&(C(),R(!1)),v&&v(e)},onFocus:function(e){O(e)&&R(!0),b&&b(e)},ref:N,variant:k},E))}));t.a=Object(u.a)({root:{},underlineNone:{textDecoration:"none"},underlineHover:{textDecoration:"none","&:hover":{textDecoration:"underline"}},underlineAlways:{textDecoration:"underline"},button:{position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none","&::-moz-focus-inner":{borderStyle:"none"},"&$focusVisible":{outline:"auto"}},focusVisible:{}},{name:"MuiLink"})(f)},function(e,t,n){"use strict";var r=n(1),o=n(107),i=n(20);t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(o.a)(e,Object(r.a)({defaultTheme:i.a},t))}},function(e,t,n){"use strict";var r=n(1),o=n(0),i=n.n(o),a=(n(5),n(37)),l=n(105),u=n(39);t.a=function(e){var t=e.children,n=e.theme,o=Object(l.a)(),s=i.a.useMemo((function(){var e=null===o?n:function(e,t){return"function"===typeof t?t(e):Object(r.a)({},e,t)}(o,n);return null!=e&&(e[u.a]=null!==o),e}),[n,o]);return i.a.createElement(a.a.Provider,{value:s},t)}},function(e,t,n){"use strict";var r=n(1),o=n(0),i=(n(5),n(4)),a={WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box"},l=function(e){return Object(r.a)(Object(r.a)({color:e.palette.text.primary},e.typography.body2),{},{backgroundColor:e.palette.background.default,"@media print":{backgroundColor:e.palette.common.white}})};t.a=Object(i.a)((function(e){return{"@global":{html:a,"*, *::before, *::after":{boxSizing:"inherit"},"strong, b":{fontWeight:e.typography.fontWeightBold},body:Object(r.a)(Object(r.a)({margin:0},l(e)),{},{"&::backdrop":{backgroundColor:e.palette.background.default}})}}}),{name:"MuiCssBaseline"})((function(e){var t=e.children,n=void 0===t?null:t;return e.classes,o.createElement(o.Fragment,null,n)}))},function(e,t,n){"use strict";var r=n(2),o=n(1),i=n(0),a=(n(5),n(3)),l=n(4),u=n(7),s=n(108),c=n(6),d=i.forwardRef((function(e,t){var n=e.children,l=e.classes,u=e.className,d=e.color,f=void 0===d?"default":d,p=e.component,h=void 0===p?"button":p,m=e.disabled,v=void 0!==m&&m,b=e.disableElevation,y=void 0!==b&&b,g=e.disableFocusRipple,x=void 0!==g&&g,w=e.endIcon,k=e.focusVisibleClassName,E=e.fullWidth,S=void 0!==E&&E,O=e.size,C=void 0===O?"medium":O,T=e.startIcon,j=e.type,P=void 0===j?"button":j,R=e.variant,N=void 0===R?"text":R,M=Object(r.a)(e,["children","classes","className","color","component","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"]),_=T&&i.createElement("span",{className:Object(a.a)(l.startIcon,l["iconSize".concat(Object(c.a)(C))])},T),A=w&&i.createElement("span",{className:Object(a.a)(l.endIcon,l["iconSize".concat(Object(c.a)(C))])},w);return i.createElement(s.a,Object(o.a)({className:Object(a.a)(l.root,l[N],u,"inherit"===f?l.colorInherit:"default"!==f&&l["".concat(N).concat(Object(c.a)(f))],"medium"!==C&&[l["".concat(N,"Size").concat(Object(c.a)(C))],l["size".concat(Object(c.a)(C))]],y&&l.disableElevation,v&&l.disabled,S&&l.fullWidth),component:h,disabled:v,focusRipple:!x,focusVisibleClassName:Object(a.a)(l.focusVisible,k),ref:t,type:P},M),i.createElement("span",{className:l.label},_,n,A))}));t.a=Object(l.a)((function(e){return{root:Object(o.a)(Object(o.a)({},e.typography.button),{},{boxSizing:"border-box",minWidth:64,padding:"6px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:Object(u.c)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{padding:"6px 8px"},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:Object(u.c)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object(u.c)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlined:{padding:"5px 15px",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"&$disabled":{border:"1px solid ".concat(e.palette.action.disabledBackground)}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat(Object(u.c)(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:Object(u.c)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat(Object(u.c)(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:Object(u.c)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&:hover":{backgroundColor:e.palette.grey.A100,boxShadow:e.shadows[4],"@media (hover: none)":{boxShadow:e.shadows[2],backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}},"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},disableElevation:{boxShadow:"none","&:hover":{boxShadow:"none"},"&$focusVisible":{boxShadow:"none"},"&:active":{boxShadow:"none"},"&$disabled":{boxShadow:"none"}},focusVisible:{},disabled:{},colorInherit:{color:"inherit",borderColor:"currentColor"},textSizeSmall:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},textSizeLarge:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},outlinedSizeSmall:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},outlinedSizeLarge:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},containedSizeSmall:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},containedSizeLarge:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},sizeSmall:{},sizeLarge:{},fullWidth:{width:"100%"},startIcon:{display:"inherit",marginRight:8,marginLeft:-4,"&$iconSizeSmall":{marginLeft:-2}},endIcon:{display:"inherit",marginRight:-4,marginLeft:8,"&$iconSizeSmall":{marginRight:-2}},iconSizeSmall:{"& > *:first-child":{fontSize:18}},iconSizeMedium:{"& > *:first-child":{fontSize:20}},iconSizeLarge:{"& > *:first-child":{fontSize:22}}}}),{name:"MuiButton"})(d)},function(e,t,n){"use strict";var r=n(1),o=n(2),i=n(0),a=n.n(i),l=(n(5),n(3));function u(e){var t=e.props,n=e.states,r=e.muiFormControl;return n.reduce((function(e,n){return e[n]=t[n],r&&"undefined"===typeof t[n]&&(e[n]=r[n]),e}),{})}var s=i.createContext();var c=s,d=n(4),f=n(6),p=n(8);function h(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:166;function r(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];var a=this,l=function(){e.apply(a,o)};clearTimeout(t),t=setTimeout(l,n)}return r.clear=function(){clearTimeout(t)},r}function m(e,t){return parseInt(e[t],10)||0}var v="undefined"!==typeof window?i.useLayoutEffect:i.useEffect,b={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"},y=i.forwardRef((function(e,t){var n=e.onChange,a=e.rows,l=e.rowsMax,u=e.rowsMin,s=void 0===u?1:u,c=e.style,d=e.value,f=Object(o.a)(e,["onChange","rows","rowsMax","rowsMin","style","value"]),y=a||s,g=i.useRef(null!=d).current,x=i.useRef(null),w=Object(p.a)(t,x),k=i.useRef(null),E=i.useRef(0),S=i.useState({}),O=S[0],C=S[1],T=i.useCallback((function(){var t=x.current,n=window.getComputedStyle(t),r=k.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");var o=n["box-sizing"],i=m(n,"padding-bottom")+m(n,"padding-top"),a=m(n,"border-bottom-width")+m(n,"border-top-width"),u=r.scrollHeight-i;r.value="x";var s=r.scrollHeight-i,c=u;y&&(c=Math.max(Number(y)*s,c)),l&&(c=Math.min(Number(l)*s,c));var d=(c=Math.max(c,s))+("border-box"===o?i+a:0),f=Math.abs(c-u)<=1;C((function(e){return E.current<20&&(d>0&&Math.abs((e.outerHeightStyle||0)-d)>1||e.overflow!==f)?(E.current+=1,{overflow:f,outerHeightStyle:d}):e}))}),[l,y,e.placeholder]);i.useEffect((function(){var e=h((function(){E.current=0,T()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}),[T]),v((function(){T()})),i.useEffect((function(){E.current=0}),[d]);return i.createElement(i.Fragment,null,i.createElement("textarea",Object(r.a)({value:d,onChange:function(e){E.current=0,g||T(),n&&n(e)},ref:w,rows:y,style:Object(r.a)({height:O.outerHeightStyle,overflow:O.overflow?"hidden":null},c)},f)),i.createElement("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:k,tabIndex:-1,style:Object(r.a)(Object(r.a)({},b),c)}))}));function g(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function x(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(g(e.value)&&""!==e.value||t&&g(e.defaultValue)&&""!==e.defaultValue)}var w="undefined"===typeof window?i.useEffect:i.useLayoutEffect,k=i.forwardRef((function(e,t){var n=e["aria-describedby"],a=e.autoComplete,d=e.autoFocus,h=e.classes,m=e.className,v=(e.color,e.defaultValue),b=e.disabled,g=e.endAdornment,k=(e.error,e.fullWidth),E=void 0!==k&&k,S=e.id,O=e.inputComponent,C=void 0===O?"input":O,T=e.inputProps,j=void 0===T?{}:T,P=e.inputRef,R=(e.margin,e.multiline),N=void 0!==R&&R,M=e.name,_=e.onBlur,A=e.onChange,z=e.onClick,I=e.onFocus,F=e.onKeyDown,D=e.onKeyUp,L=e.placeholder,W=e.readOnly,B=e.renderSuffix,U=e.rows,$=e.rowsMax,V=e.rowsMin,H=e.startAdornment,q=e.type,K=void 0===q?"text":q,Q=e.value,X=Object(o.a)(e,["aria-describedby","autoComplete","autoFocus","classes","className","color","defaultValue","disabled","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","rowsMax","rowsMin","startAdornment","type","value"]),Y=null!=j.value?j.value:Q,G=i.useRef(null!=Y).current,J=i.useRef(),Z=i.useCallback((function(e){0}),[]),ee=Object(p.a)(j.ref,Z),te=Object(p.a)(P,ee),ne=Object(p.a)(J,te),re=i.useState(!1),oe=re[0],ie=re[1],ae=i.useContext(s);var le=u({props:e,muiFormControl:ae,states:["color","disabled","error","hiddenLabel","margin","required","filled"]});le.focused=ae?ae.focused:oe,i.useEffect((function(){!ae&&b&&oe&&(ie(!1),_&&_())}),[ae,b,oe,_]);var ue=ae&&ae.onFilled,se=ae&&ae.onEmpty,ce=i.useCallback((function(e){x(e)?ue&&ue():se&&se()}),[ue,se]);w((function(){G&&ce({value:Y})}),[Y,ce,G]);i.useEffect((function(){ce(J.current)}),[]);var de=C,fe=Object(r.a)(Object(r.a)({},j),{},{ref:ne});"string"!==typeof de?fe=Object(r.a)(Object(r.a)({inputRef:ne,type:K},fe),{},{ref:null}):N?!U||$||V?(fe=Object(r.a)({rows:U,rowsMax:$},fe),de=y):de="textarea":fe=Object(r.a)({type:K},fe);return i.useEffect((function(){ae&&ae.setAdornedStart(Boolean(H))}),[ae,H]),i.createElement("div",Object(r.a)({className:Object(l.a)(h.root,h["color".concat(Object(f.a)(le.color||"primary"))],m,le.disabled&&h.disabled,le.error&&h.error,E&&h.fullWidth,le.focused&&h.focused,ae&&h.formControl,N&&h.multiline,H&&h.adornedStart,g&&h.adornedEnd,"dense"===le.margin&&h.marginDense),onClick:function(e){J.current&&e.currentTarget===e.target&&J.current.focus(),z&&z(e)},ref:t},X),H,i.createElement(c.Provider,{value:null},i.createElement(de,Object(r.a)({"aria-invalid":le.error,"aria-describedby":n,autoComplete:a,autoFocus:d,defaultValue:v,disabled:le.disabled,id:S,onAnimationStart:function(e){ce("mui-auto-fill-cancel"===e.animationName?J.current:{value:"x"})},name:M,placeholder:L,readOnly:W,required:le.required,rows:U,value:Y,onKeyDown:F,onKeyUp:D},fe,{className:Object(l.a)(h.input,j.className,le.disabled&&h.disabled,N&&h.inputMultiline,le.hiddenLabel&&h.inputHiddenLabel,H&&h.inputAdornedStart,g&&h.inputAdornedEnd,"search"===K&&h.inputTypeSearch,"dense"===le.margin&&h.inputMarginDense),onBlur:function(e){_&&_(e),j.onBlur&&j.onBlur(e),ae&&ae.onBlur?ae.onBlur(e):ie(!1)},onChange:function(e){if(!G){var t=e.target||J.current;if(null==t)throw new TypeError("Material-UI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://material-ui.com/r/input-component-ref-interface for more info.");ce({value:t.value})}for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];j.onChange&&j.onChange.apply(j,[e].concat(r)),A&&A.apply(void 0,[e].concat(r))},onFocus:function(e){le.disabled?e.stopPropagation():(I&&I(e),j.onFocus&&j.onFocus(e),ae&&ae.onFocus?ae.onFocus(e):ie(!0))}}))),g,B?B(Object(r.a)(Object(r.a)({},le),{},{startAdornment:H})):null)})),E=Object(d.a)((function(e){var t="light"===e.palette.type,n={color:"currentColor",opacity:t?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},o={opacity:"0 !important"},i={opacity:t?.42:.5};return{"@global":{"@keyframes mui-auto-fill":{from:{}},"@keyframes mui-auto-fill-cancel":{from:{}}},root:Object(r.a)(Object(r.a)({},e.typography.body1),{},{color:e.palette.text.primary,lineHeight:"1.1876em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center","&$disabled":{color:e.palette.text.disabled,cursor:"default"}}),formControl:{},focused:{},disabled:{},adornedStart:{},adornedEnd:{},error:{},marginDense:{},multiline:{padding:"".concat(6,"px 0 ").concat(7,"px"),"&$marginDense":{paddingTop:3}},colorSecondary:{},fullWidth:{width:"100%"},input:{font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"".concat(6,"px 0 ").concat(7,"px"),border:0,boxSizing:"content-box",background:"none",height:"1.1876em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{"-webkit-appearance":"none"},"label[data-shrink=false] + $formControl &":{"&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus::-webkit-input-placeholder":i,"&:focus::-moz-placeholder":i,"&:focus:-ms-input-placeholder":i,"&:focus::-ms-input-placeholder":i},"&$disabled":{opacity:1},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},inputMarginDense:{paddingTop:3},inputMultiline:{height:"auto",resize:"none",padding:0},inputTypeSearch:{"-moz-appearance":"textfield","-webkit-appearance":"textfield"},inputAdornedStart:{},inputAdornedEnd:{},inputHiddenLabel:{}}}),{name:"MuiInputBase"})(k),S=i.forwardRef((function(e,t){var n=e.disableUnderline,a=e.classes,u=e.fullWidth,s=void 0!==u&&u,c=e.inputComponent,d=void 0===c?"input":c,f=e.multiline,p=void 0!==f&&f,h=e.type,m=void 0===h?"text":h,v=Object(o.a)(e,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return i.createElement(E,Object(r.a)({classes:Object(r.a)(Object(r.a)({},a),{},{root:Object(l.a)(a.root,!n&&a.underline),underline:null}),fullWidth:s,inputComponent:d,multiline:p,ref:t,type:m},v))}));S.muiName="Input";var O=Object(d.a)((function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return{root:{position:"relative"},formControl:{"label + &":{marginTop:16}},focused:{},disabled:{},colorSecondary:{"&$underline:after":{borderBottomColor:e.palette.secondary.main}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary.main),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(t),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:not($disabled):before":{borderBottom:"2px solid ".concat(e.palette.text.primary),"@media (hover: none)":{borderBottom:"1px solid ".concat(t)}},"&$disabled:before":{borderBottomStyle:"dotted"}},error:{},marginDense:{},multiline:{},fullWidth:{},input:{},inputMarginDense:{},inputMultiline:{},inputTypeSearch:{}}}),{name:"MuiInput"})(S),C=i.forwardRef((function(e,t){var n=e.disableUnderline,a=e.classes,u=e.fullWidth,s=void 0!==u&&u,c=e.inputComponent,d=void 0===c?"input":c,f=e.multiline,p=void 0!==f&&f,h=e.type,m=void 0===h?"text":h,v=Object(o.a)(e,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return i.createElement(E,Object(r.a)({classes:Object(r.a)(Object(r.a)({},a),{},{root:Object(l.a)(a.root,!n&&a.underline),underline:null}),fullWidth:s,inputComponent:d,multiline:p,ref:t,type:m},v))}));C.muiName="Input";var T=Object(d.a)((function(e){var t="light"===e.palette.type,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",r=t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)";return{root:{position:"relative",backgroundColor:r,borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:t?"rgba(0, 0, 0, 0.13)":"rgba(255, 255, 255, 0.13)","@media (hover: none)":{backgroundColor:r}},"&$focused":{backgroundColor:t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)"},"&$disabled":{backgroundColor:t?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)"}},colorSecondary:{"&$underline:after":{borderBottomColor:e.palette.secondary.main}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary.main),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(n),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:before":{borderBottom:"1px solid ".concat(e.palette.text.primary)},"&$disabled:before":{borderBottomStyle:"dotted"}},focused:{},disabled:{},adornedStart:{paddingLeft:12},adornedEnd:{paddingRight:12},error:{},marginDense:{},multiline:{padding:"27px 12px 10px","&$marginDense":{paddingTop:23,paddingBottom:6}},input:{padding:"27px 12px 10px","&:-webkit-autofill":{WebkitBoxShadow:"dark"===e.palette.type?"0 0 0 100px #266798 inset":null,WebkitTextFillColor:"dark"===e.palette.type?"#fff":null,caretColor:"dark"===e.palette.type?"#fff":null,borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},inputMarginDense:{paddingTop:23,paddingBottom:6},inputHiddenLabel:{paddingTop:18,paddingBottom:19,"&$inputMarginDense":{paddingTop:10,paddingBottom:11}},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}}),{name:"MuiFilledInput"})(C),j=n(15),P=n(105),R=n(20);function N(){return Object(P.a)()||R.a}var M=i.forwardRef((function(e,t){e.children;var n=e.classes,a=e.className,u=e.label,s=e.labelWidth,c=e.notched,d=e.style,p=Object(o.a)(e,["children","classes","className","label","labelWidth","notched","style"]),h="rtl"===N().direction?"right":"left";if(void 0!==u)return i.createElement("fieldset",Object(r.a)({"aria-hidden":!0,className:Object(l.a)(n.root,a),ref:t,style:d},p),i.createElement("legend",{className:Object(l.a)(n.legendLabelled,c&&n.legendNotched)},u?i.createElement("span",null,u):i.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})));var m=s>0?.75*s+8:.01;return i.createElement("fieldset",Object(r.a)({"aria-hidden":!0,style:Object(r.a)(Object(j.a)({},"padding".concat(Object(f.a)(h)),8),d),className:Object(l.a)(n.root,a),ref:t},p),i.createElement("legend",{className:n.legend,style:{width:c?m:.01}},i.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})))})),_=Object(d.a)((function(e){return{root:{position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden"},legend:{textAlign:"left",padding:0,lineHeight:"11px",transition:e.transitions.create("width",{duration:150,easing:e.transitions.easing.easeOut})},legendLabelled:{display:"block",width:"auto",textAlign:"left",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:e.transitions.create("max-width",{duration:50,easing:e.transitions.easing.easeOut}),"& > span":{paddingLeft:5,paddingRight:5,display:"inline-block"}},legendNotched:{maxWidth:1e3,transition:e.transitions.create("max-width",{duration:100,easing:e.transitions.easing.easeOut,delay:50})}}}),{name:"PrivateNotchedOutline"})(M),A=i.forwardRef((function(e,t){var n=e.classes,a=e.fullWidth,u=void 0!==a&&a,s=e.inputComponent,c=void 0===s?"input":s,d=e.label,f=e.labelWidth,p=void 0===f?0:f,h=e.multiline,m=void 0!==h&&h,v=e.notched,b=e.type,y=void 0===b?"text":b,g=Object(o.a)(e,["classes","fullWidth","inputComponent","label","labelWidth","multiline","notched","type"]);return i.createElement(E,Object(r.a)({renderSuffix:function(e){return i.createElement(_,{className:n.notchedOutline,label:d,labelWidth:p,notched:"undefined"!==typeof v?v:Boolean(e.startAdornment||e.filled||e.focused)})},classes:Object(r.a)(Object(r.a)({},n),{},{root:Object(l.a)(n.root,n.underline),notchedOutline:null}),fullWidth:u,inputComponent:c,multiline:m,ref:t,type:y},g))}));A.muiName="Input";var z=Object(d.a)((function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{root:{position:"relative",borderRadius:e.shape.borderRadius,"&:hover $notchedOutline":{borderColor:e.palette.text.primary},"@media (hover: none)":{"&:hover $notchedOutline":{borderColor:t}},"&$focused $notchedOutline":{borderColor:e.palette.primary.main,borderWidth:2},"&$error $notchedOutline":{borderColor:e.palette.error.main},"&$disabled $notchedOutline":{borderColor:e.palette.action.disabled}},colorSecondary:{"&$focused $notchedOutline":{borderColor:e.palette.secondary.main}},focused:{},disabled:{},adornedStart:{paddingLeft:14},adornedEnd:{paddingRight:14},error:{},marginDense:{},multiline:{padding:"18.5px 14px","&$marginDense":{paddingTop:10.5,paddingBottom:10.5}},notchedOutline:{borderColor:t},input:{padding:"18.5px 14px","&:-webkit-autofill":{WebkitBoxShadow:"dark"===e.palette.type?"0 0 0 100px #266798 inset":null,WebkitTextFillColor:"dark"===e.palette.type?"#fff":null,caretColor:"dark"===e.palette.type?"#fff":null,borderRadius:"inherit"}},inputMarginDense:{paddingTop:10.5,paddingBottom:10.5},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}}),{name:"MuiOutlinedInput"})(A);function I(){return i.useContext(c)}var F=i.forwardRef((function(e,t){var n=e.children,a=e.classes,s=e.className,c=(e.color,e.component),d=void 0===c?"label":c,p=(e.disabled,e.error,e.filled,e.focused,e.required,Object(o.a)(e,["children","classes","className","color","component","disabled","error","filled","focused","required"])),h=u({props:e,muiFormControl:I(),states:["color","required","focused","disabled","error","filled"]});return i.createElement(d,Object(r.a)({className:Object(l.a)(a.root,a["color".concat(Object(f.a)(h.color||"primary"))],s,h.disabled&&a.disabled,h.error&&a.error,h.filled&&a.filled,h.focused&&a.focused,h.required&&a.required),ref:t},p),n,h.required&&i.createElement("span",{"aria-hidden":!0,className:Object(l.a)(a.asterisk,h.error&&a.error)},"\u2009","*"))})),D=Object(d.a)((function(e){return{root:Object(r.a)(Object(r.a)({color:e.palette.text.secondary},e.typography.body1),{},{lineHeight:1,padding:0,"&$focused":{color:e.palette.primary.main},"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),colorSecondary:{"&$focused":{color:e.palette.secondary.main}},focused:{},disabled:{},error:{},filled:{},required:{},asterisk:{"&$error":{color:e.palette.error.main}}}}),{name:"MuiFormLabel"})(F),L=i.forwardRef((function(e,t){var n=e.classes,a=e.className,s=e.disableAnimation,c=void 0!==s&&s,d=(e.margin,e.shrink),f=(e.variant,Object(o.a)(e,["classes","className","disableAnimation","margin","shrink","variant"])),p=I(),h=d;"undefined"===typeof h&&p&&(h=p.filled||p.focused||p.adornedStart);var m=u({props:e,muiFormControl:p,states:["margin","variant"]});return i.createElement(D,Object(r.a)({"data-shrink":h,className:Object(l.a)(n.root,a,p&&n.formControl,!c&&n.animated,h&&n.shrink,"dense"===m.margin&&n.marginDense,{filled:n.filled,outlined:n.outlined}[m.variant]),classes:{focused:n.focused,disabled:n.disabled,error:n.error,required:n.required,asterisk:n.asterisk},ref:t},f))})),W=Object(d.a)((function(e){return{root:{display:"block",transformOrigin:"top left"},focused:{},disabled:{},error:{},required:{},asterisk:{},formControl:{position:"absolute",left:0,top:0,transform:"translate(0, 24px) scale(1)"},marginDense:{transform:"translate(0, 21px) scale(1)"},shrink:{transform:"translate(0, 1.5px) scale(0.75)",transformOrigin:"top left"},animated:{transition:e.transitions.create(["color","transform"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},filled:{zIndex:1,pointerEvents:"none",transform:"translate(12px, 20px) scale(1)","&$marginDense":{transform:"translate(12px, 17px) scale(1)"},"&$shrink":{transform:"translate(12px, 10px) scale(0.75)","&$marginDense":{transform:"translate(12px, 7px) scale(0.75)"}}},outlined:{zIndex:1,pointerEvents:"none",transform:"translate(14px, 20px) scale(1)","&$marginDense":{transform:"translate(14px, 12px) scale(1)"},"&$shrink":{transform:"translate(14px, -6px) scale(0.75)"}}}}),{name:"MuiInputLabel"})(L);function B(e,t){return i.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}var U=i.forwardRef((function(e,t){var n=e.children,a=e.classes,u=e.className,s=e.color,d=void 0===s?"primary":s,p=e.component,h=void 0===p?"div":p,m=e.disabled,v=void 0!==m&&m,b=e.error,y=void 0!==b&&b,g=e.fullWidth,w=void 0!==g&&g,k=e.focused,E=e.hiddenLabel,S=void 0!==E&&E,O=e.margin,C=void 0===O?"none":O,T=e.required,j=void 0!==T&&T,P=e.size,R=e.variant,N=void 0===R?"standard":R,M=Object(o.a)(e,["children","classes","className","color","component","disabled","error","fullWidth","focused","hiddenLabel","margin","required","size","variant"]),_=i.useState((function(){var e=!1;return n&&i.Children.forEach(n,(function(t){if(B(t,["Input","Select"])){var n=B(t,["Select"])?t.props.input:t;n&&n.props.startAdornment&&(e=!0)}})),e})),A=_[0],z=_[1],I=i.useState((function(){var e=!1;return n&&i.Children.forEach(n,(function(t){B(t,["Input","Select"])&&x(t.props,!0)&&(e=!0)})),e})),F=I[0],D=I[1],L=i.useState(!1),W=L[0],U=L[1],$=void 0!==k?k:W;v&&$&&U(!1);var V=i.useCallback((function(){D(!0)}),[]),H={adornedStart:A,setAdornedStart:z,color:d,disabled:v,error:y,filled:F,focused:$,fullWidth:w,hiddenLabel:S,margin:("small"===P?"dense":void 0)||C,onBlur:function(){U(!1)},onEmpty:i.useCallback((function(){D(!1)}),[]),onFilled:V,onFocus:function(){U(!0)},registerEffect:void 0,required:j,variant:N};return i.createElement(c.Provider,{value:H},i.createElement(h,Object(r.a)({className:Object(l.a)(a.root,u,"none"!==C&&a["margin".concat(Object(f.a)(C))],w&&a.fullWidth),ref:t},M),n))})),$=Object(d.a)({root:{display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},marginNormal:{marginTop:16,marginBottom:8},marginDense:{marginTop:8,marginBottom:4},fullWidth:{width:"100%"}},{name:"MuiFormControl"})(U),V=i.forwardRef((function(e,t){var n=e.children,a=e.classes,s=e.className,c=e.component,d=void 0===c?"p":c,f=(e.disabled,e.error,e.filled,e.focused,e.margin,e.required,e.variant,Object(o.a)(e,["children","classes","className","component","disabled","error","filled","focused","margin","required","variant"])),p=u({props:e,muiFormControl:I(),states:["variant","margin","disabled","error","filled","focused","required"]});return i.createElement(d,Object(r.a)({className:Object(l.a)(a.root,("filled"===p.variant||"outlined"===p.variant)&&a.contained,s,p.disabled&&a.disabled,p.error&&a.error,p.filled&&a.filled,p.focused&&a.focused,p.required&&a.required,"dense"===p.margin&&a.marginDense),ref:t},f)," "===n?i.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}}):n)})),H=Object(d.a)((function(e){return{root:Object(r.a)(Object(r.a)({color:e.palette.text.secondary},e.typography.caption),{},{textAlign:"left",marginTop:3,margin:0,"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),error:{},disabled:{},marginDense:{marginTop:4},contained:{marginLeft:14,marginRight:14},focused:{},filled:{},required:{}}}),{name:"MuiFormHelperText"})(V),q=n(134),K=n(14),Q=n(26),X=n(17);n(36);function Y(e){return e&&e.ownerDocument||document}var G=n(9),J=n.n(G);function Z(e){return Y(e).defaultView||window}function ee(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}}),(function(){}))}var te=n(136),ne=n(22);var re="undefined"!==typeof window?i.useLayoutEffect:i.useEffect;var oe=i.forwardRef((function(e,t){var n=e.children,r=e.container,o=e.disablePortal,a=void 0!==o&&o,l=e.onRendered,u=i.useState(null),s=u[0],c=u[1],d=Object(p.a)(i.isValidElement(n)?n.ref:null,t);return re((function(){a||c(function(e){return e="function"===typeof e?e():e,G.findDOMNode(e)}(r)||document.body)}),[r,a]),re((function(){if(s&&!a)return Object(ne.a)(t,s),function(){Object(ne.a)(t,null)}}),[t,s,a]),re((function(){l&&(s||a)&&l()}),[l,s,a]),a?i.isValidElement(n)?i.cloneElement(n,{ref:d}):n:s?G.createPortal(n,s):s})),ie=n(18),ae=n(42);var le=n(27);function ue(){var e=document.createElement("div");e.style.width="99px",e.style.height="99px",e.style.position="absolute",e.style.top="-9999px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}function se(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function ce(e){return parseInt(window.getComputedStyle(e)["padding-right"],10)||0}function de(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o=arguments.length>4?arguments[4]:void 0,i=[t,n].concat(Object(K.a)(r)),a=["TEMPLATE","SCRIPT","STYLE"];[].forEach.call(e.children,(function(e){1===e.nodeType&&-1===i.indexOf(e)&&-1===a.indexOf(e.tagName)&&se(e,o)}))}function fe(e,t){var n=-1;return e.some((function(e,r){return!!t(e)&&(n=r,!0)})),n}function pe(e,t){var n,r=[],o=[],i=e.container;if(!t.disableScrollLock){if(function(e){var t=Y(e);return t.body===e?Z(t).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(i)){var a=ue();r.push({value:i.style.paddingRight,key:"padding-right",el:i}),i.style["padding-right"]="".concat(ce(i)+a,"px"),n=Y(i).querySelectorAll(".mui-fixed"),[].forEach.call(n,(function(e){o.push(e.style.paddingRight),e.style.paddingRight="".concat(ce(e)+a,"px")}))}var l=i.parentElement,u="HTML"===l.nodeName&&"scroll"===window.getComputedStyle(l)["overflow-y"]?l:i;r.push({value:u.style.overflow,key:"overflow",el:u}),u.style.overflow="hidden"}return function(){n&&[].forEach.call(n,(function(e,t){o[t]?e.style.paddingRight=o[t]:e.style.removeProperty("padding-right")})),r.forEach((function(e){var t=e.value,n=e.el,r=e.key;t?n.style.setProperty(r,t):n.style.removeProperty(r)}))}}var he=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.modals=[],this.containers=[]}return Object(le.a)(e,[{key:"add",value:function(e,t){var n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&se(e.modalRef,!1);var r=function(e){var t=[];return[].forEach.call(e.children,(function(e){e.getAttribute&&"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);de(t,e.mountNode,e.modalRef,r,!0);var o=fe(this.containers,(function(e){return e.container===t}));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblingNodes:r}),n)}},{key:"mount",value:function(e,t){var n=fe(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];r.restore||(r.restore=pe(r,t))}},{key:"remove",value:function(e){var t=this.modals.indexOf(e);if(-1===t)return t;var n=fe(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)r.restore&&r.restore(),e.modalRef&&se(e.modalRef,!0),de(r.container,e.mountNode,e.modalRef,r.hiddenSiblingNodes,!1),this.containers.splice(n,1);else{var o=r.modals[r.modals.length-1];o.modalRef&&se(o.modalRef,!1)}return t}},{key:"isTopModal",value:function(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}}]),e}();var me=function(e){var t=e.children,n=e.disableAutoFocus,r=void 0!==n&&n,o=e.disableEnforceFocus,a=void 0!==o&&o,l=e.disableRestoreFocus,u=void 0!==l&&l,s=e.getDoc,c=e.isEnabled,d=e.open,f=i.useRef(),h=i.useRef(null),m=i.useRef(null),v=i.useRef(),b=i.useRef(null),y=i.useCallback((function(e){b.current=G.findDOMNode(e)}),[]),g=Object(p.a)(t.ref,y),x=i.useRef();return i.useEffect((function(){x.current=d}),[d]),!x.current&&d&&"undefined"!==typeof window&&(v.current=s().activeElement),i.useEffect((function(){if(d){var e=Y(b.current);r||!b.current||b.current.contains(e.activeElement)||(b.current.hasAttribute("tabIndex")||b.current.setAttribute("tabIndex",-1),b.current.focus());var t=function(){e.hasFocus()&&!a&&c()&&!f.current?b.current&&!b.current.contains(e.activeElement)&&b.current.focus():f.current=!1},n=function(t){!a&&c()&&9===t.keyCode&&e.activeElement===b.current&&(f.current=!0,t.shiftKey?m.current.focus():h.current.focus())};e.addEventListener("focus",t,!0),e.addEventListener("keydown",n,!0);var o=setInterval((function(){t()}),50);return function(){clearInterval(o),e.removeEventListener("focus",t,!0),e.removeEventListener("keydown",n,!0),u||(v.current&&v.current.focus&&v.current.focus(),v.current=null)}}}),[r,a,u,c,d]),i.createElement(i.Fragment,null,i.createElement("div",{tabIndex:0,ref:h,"data-test":"sentinelStart"}),i.cloneElement(t,{ref:g}),i.createElement("div",{tabIndex:0,ref:m,"data-test":"sentinelEnd"}))},ve={root:{zIndex:-1,position:"fixed",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},invisible:{backgroundColor:"transparent"}},be=i.forwardRef((function(e,t){var n=e.invisible,a=void 0!==n&&n,l=e.open,u=Object(o.a)(e,["invisible","open"]);return l?i.createElement("div",Object(r.a)({"aria-hidden":!0,ref:t},u,{style:Object(r.a)(Object(r.a)(Object(r.a)({},ve.root),a?ve.invisible:{}),u.style)})):null}));var ye=new he,ge=i.forwardRef((function(e,t){var n=Object(P.a)(),a=Object(te.a)({name:"MuiModal",props:Object(r.a)({},e),theme:n}),l=a.BackdropComponent,u=void 0===l?be:l,s=a.BackdropProps,c=a.children,d=a.closeAfterTransition,f=void 0!==d&&d,h=a.container,m=a.disableAutoFocus,v=void 0!==m&&m,b=a.disableBackdropClick,y=void 0!==b&&b,g=a.disableEnforceFocus,x=void 0!==g&&g,w=a.disableEscapeKeyDown,k=void 0!==w&&w,E=a.disablePortal,S=void 0!==E&&E,O=a.disableRestoreFocus,C=void 0!==O&&O,T=a.disableScrollLock,j=void 0!==T&&T,R=a.hideBackdrop,N=void 0!==R&&R,M=a.keepMounted,_=void 0!==M&&M,A=a.manager,z=void 0===A?ye:A,I=a.onBackdropClick,F=a.onClose,D=a.onEscapeKeyDown,L=a.onRendered,W=a.open,B=Object(o.a)(a,["BackdropComponent","BackdropProps","children","closeAfterTransition","container","disableAutoFocus","disableBackdropClick","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onEscapeKeyDown","onRendered","open"]),U=i.useState(!0),$=U[0],V=U[1],H=i.useRef({}),q=i.useRef(null),K=i.useRef(null),Q=Object(p.a)(K,t),X=function(e){return!!e.children&&e.children.props.hasOwnProperty("in")}(a),J=function(){return Y(q.current)},Z=function(){return H.current.modalRef=K.current,H.current.mountNode=q.current,H.current},ne=function(){z.mount(Z(),{disableScrollLock:j}),K.current.scrollTop=0},re=Object(ie.a)((function(){var e=function(e){return e="function"===typeof e?e():e,G.findDOMNode(e)}(h)||J().body;z.add(Z(),e),K.current&&ne()})),le=i.useCallback((function(){return z.isTopModal(Z())}),[z]),ue=Object(ie.a)((function(e){q.current=e,e&&(L&&L(),W&&le()?ne():se(K.current,!0))})),ce=i.useCallback((function(){z.remove(Z())}),[z]);if(i.useEffect((function(){return function(){ce()}}),[ce]),i.useEffect((function(){W?re():X&&f||ce()}),[W,ce,X,f,re]),!_&&!W&&(!X||$))return null;var de=function(e){return{root:{position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},hidden:{visibility:"hidden"}}}(n||{zIndex:ae.a}),fe={};return void 0===c.props.tabIndex&&(fe.tabIndex=c.props.tabIndex||"-1"),X&&(fe.onEnter=ee((function(){V(!1)}),c.props.onEnter),fe.onExited=ee((function(){V(!0),f&&ce()}),c.props.onExited)),i.createElement(oe,{ref:ue,container:h,disablePortal:S},i.createElement("div",Object(r.a)({ref:Q,onKeyDown:function(e){"Escape"===e.key&&le()&&(D&&D(e),k||(e.stopPropagation(),F&&F(e,"escapeKeyDown")))},role:"presentation"},B,{style:Object(r.a)(Object(r.a)(Object(r.a)({},de.root),!W&&$?de.hidden:{}),B.style)}),N?null:i.createElement(u,Object(r.a)({open:W,onClick:function(e){e.target===e.currentTarget&&(I&&I(e),!y&&F&&F(e,"backdropClick"))}},s)),i.createElement(me,{disableEnforceFocus:x,disableAutoFocus:v,disableRestoreFocus:C,getDoc:J,isEnabled:le,open:W},i.cloneElement(c,fe))))})),xe=n(19),we=n(24),ke=!1,Ee=n(28),Se=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,i=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?i?(o="exited",r.appearStatus="entering"):o="entered":o=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:o},r.nextCallback=null,r}Object(we.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!==typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),"entering"===t?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[J.a.findDOMNode(this),r],i=o[0],a=o[1],l=this.getTimeouts(),u=r?l.appear:l.enter;!e&&!n||ke?this.safeSetState({status:"entered"},(function(){t.props.onEntered(i)})):(this.props.onEnter(i,a),this.safeSetState({status:"entering"},(function(){t.props.onEntering(i,a),t.onTransitionEnd(u,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(i,a)}))}))})))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:J.a.findDOMNode(this);t&&!ke?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:J.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],i=o[0],a=o[1];this.props.addEndListener(i,a)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Object(xe.a)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return a.a.createElement(Ee.a.Provider,{value:null},"function"===typeof n?n(e,r):a.a.cloneElement(a.a.Children.only(n),r))},t}(a.a.Component);function Oe(){}Se.contextType=Ee.a,Se.propTypes={},Se.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Oe,onEntering:Oe,onEntered:Oe,onExit:Oe,onExiting:Oe,onExited:Oe},Se.UNMOUNTED="unmounted",Se.EXITED="exited",Se.ENTERING="entering",Se.ENTERED="entered",Se.EXITING="exiting";var Ce=Se;function Te(e,t){var n=e.timeout,r=e.style,o=void 0===r?{}:r;return{duration:o.transitionDuration||"number"===typeof n?n:n[t.mode]||0,delay:o.transitionDelay}}function je(e){return"scale(".concat(e,", ").concat(Math.pow(e,2),")")}var Pe={entering:{opacity:1,transform:je(1)},entered:{opacity:1,transform:"none"}},Re=i.forwardRef((function(e,t){var n=e.children,a=e.disableStrictModeCompat,l=void 0!==a&&a,u=e.in,s=e.onEnter,c=e.onEntered,d=e.onEntering,f=e.onExit,h=e.onExited,m=e.onExiting,v=e.style,b=e.timeout,y=void 0===b?"auto":b,g=e.TransitionComponent,x=void 0===g?Ce:g,w=Object(o.a)(e,["children","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),k=i.useRef(),E=i.useRef(),S=N(),O=S.unstable_strictMode&&!l,C=i.useRef(null),T=Object(p.a)(n.ref,t),j=Object(p.a)(O?C:void 0,T),P=function(e){return function(t,n){if(e){var r=O?[C.current,t]:[t,n],o=Object(Q.a)(r,2),i=o[0],a=o[1];void 0===a?e(i):e(i,a)}}},R=P(d),M=P((function(e,t){!function(e){e.scrollTop}(e);var n,r=Te({style:v,timeout:y},{mode:"enter"}),o=r.duration,i=r.delay;"auto"===y?(n=S.transitions.getAutoHeightDuration(e.clientHeight),E.current=n):n=o,e.style.transition=[S.transitions.create("opacity",{duration:n,delay:i}),S.transitions.create("transform",{duration:.666*n,delay:i})].join(","),s&&s(e,t)})),_=P(c),A=P(m),z=P((function(e){var t,n=Te({style:v,timeout:y},{mode:"exit"}),r=n.duration,o=n.delay;"auto"===y?(t=S.transitions.getAutoHeightDuration(e.clientHeight),E.current=t):t=r,e.style.transition=[S.transitions.create("opacity",{duration:t,delay:o}),S.transitions.create("transform",{duration:.666*t,delay:o||.333*t})].join(","),e.style.opacity="0",e.style.transform=je(.75),f&&f(e)})),I=P(h);return i.useEffect((function(){return function(){clearTimeout(k.current)}}),[]),i.createElement(x,Object(r.a)({appear:!0,in:u,nodeRef:O?C:void 0,onEnter:M,onEntered:_,onEntering:R,onExit:z,onExited:I,onExiting:A,addEndListener:function(e,t){var n=O?e:t;"auto"===y&&(k.current=setTimeout(n,E.current||0))},timeout:"auto"===y?null:y},w),(function(e,t){return i.cloneElement(n,Object(r.a)({style:Object(r.a)(Object(r.a)(Object(r.a)({opacity:0,transform:je(.75),visibility:"exited"!==e||u?void 0:"hidden"},Pe[e]),v),n.props.style),ref:j},t))}))}));Re.muiSupportAuto=!0;var Ne=Re,Me=i.forwardRef((function(e,t){var n=e.classes,a=e.className,u=e.component,s=void 0===u?"div":u,c=e.square,d=void 0!==c&&c,f=e.elevation,p=void 0===f?1:f,h=e.variant,m=void 0===h?"elevation":h,v=Object(o.a)(e,["classes","className","component","square","elevation","variant"]);return i.createElement(s,Object(r.a)({className:Object(l.a)(n.root,a,"outlined"===m?n.outlined:n["elevation".concat(p)],!d&&n.rounded),ref:t},v))})),_e=Object(d.a)((function(e){var t={};return e.shadows.forEach((function(e,n){t["elevation".concat(n)]={boxShadow:e}})),Object(r.a)({root:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},rounded:{borderRadius:e.shape.borderRadius},outlined:{border:"1px solid ".concat(e.palette.divider)}},t)}),{name:"MuiPaper"})(Me);function Ae(e,t){var n=0;return"number"===typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function ze(e,t){var n=0;return"number"===typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function Ie(e){return[e.horizontal,e.vertical].map((function(e){return"number"===typeof e?"".concat(e,"px"):e})).join(" ")}function Fe(e){return"function"===typeof e?e():e}var De=i.forwardRef((function(e,t){var n=e.action,a=e.anchorEl,u=e.anchorOrigin,s=void 0===u?{vertical:"top",horizontal:"left"}:u,c=e.anchorPosition,d=e.anchorReference,f=void 0===d?"anchorEl":d,p=e.children,m=e.classes,v=e.className,b=e.container,y=e.elevation,g=void 0===y?8:y,x=e.getContentAnchorEl,w=e.marginThreshold,k=void 0===w?16:w,E=e.onEnter,S=e.onEntered,O=e.onEntering,C=e.onExit,T=e.onExited,j=e.onExiting,P=e.open,R=e.PaperProps,N=void 0===R?{}:R,M=e.transformOrigin,_=void 0===M?{vertical:"top",horizontal:"left"}:M,A=e.TransitionComponent,z=void 0===A?Ne:A,I=e.transitionDuration,F=void 0===I?"auto":I,D=e.TransitionProps,L=void 0===D?{}:D,W=Object(o.a)(e,["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","classes","className","container","elevation","getContentAnchorEl","marginThreshold","onEnter","onEntered","onEntering","onExit","onExited","onExiting","open","PaperProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"]),B=i.useRef(),U=i.useCallback((function(e){if("anchorPosition"===f)return c;var t=Fe(a),n=(t&&1===t.nodeType?t:Y(B.current).body).getBoundingClientRect(),r=0===e?s.vertical:"center";return{top:n.top+Ae(n,r),left:n.left+ze(n,s.horizontal)}}),[a,s.horizontal,s.vertical,c,f]),$=i.useCallback((function(e){var t=0;if(x&&"anchorEl"===f){var n=x(e);if(n&&e.contains(n)){var r=function(e,t){for(var n=t,r=0;n&&n!==e;)r+=(n=n.parentElement).scrollTop;return r}(e,n);t=n.offsetTop+n.clientHeight/2-r||0}0}return t}),[s.vertical,f,x]),V=i.useCallback((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return{vertical:Ae(e,_.vertical)+t,horizontal:ze(e,_.horizontal)}}),[_.horizontal,_.vertical]),H=i.useCallback((function(e){var t=$(e),n={width:e.offsetWidth,height:e.offsetHeight},r=V(n,t);if("none"===f)return{top:null,left:null,transformOrigin:Ie(r)};var o=U(t),i=o.top-r.vertical,l=o.left-r.horizontal,u=i+n.height,s=l+n.width,c=Z(Fe(a)),d=c.innerHeight-k,p=c.innerWidth-k;if(i<k){var h=i-k;i-=h,r.vertical+=h}else if(u>d){var m=u-d;i-=m,r.vertical+=m}if(l<k){var v=l-k;l-=v,r.horizontal+=v}else if(s>p){var b=s-p;l-=b,r.horizontal+=b}return{top:"".concat(Math.round(i),"px"),left:"".concat(Math.round(l),"px"),transformOrigin:Ie(r)}}),[a,f,U,$,V,k]),q=i.useCallback((function(){var e=B.current;if(e){var t=H(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin}}),[H]),K=i.useCallback((function(e){B.current=G.findDOMNode(e)}),[]);i.useEffect((function(){P&&q()})),i.useImperativeHandle(n,(function(){return P?{updatePosition:function(){q()}}:null}),[P,q]),i.useEffect((function(){if(P){var e=h((function(){q()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}}),[P,q]);var Q=F;"auto"!==F||z.muiSupportAuto||(Q=void 0);var X=b||(a?Y(Fe(a)).body:void 0);return i.createElement(ge,Object(r.a)({container:X,open:P,ref:t,BackdropProps:{invisible:!0},className:Object(l.a)(m.root,v)},W),i.createElement(z,Object(r.a)({appear:!0,in:P,onEnter:E,onEntered:S,onExit:C,onExited:T,onExiting:j,timeout:Q},L,{onEntering:ee((function(e,t){O&&O(e,t),q()}),L.onEntering)}),i.createElement(_e,Object(r.a)({elevation:g,ref:K},N,{className:Object(l.a)(m.paper,N.className)}),p)))})),Le=Object(d.a)({root:{},paper:{position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}},{name:"MuiPopover"})(De);var We=i.createContext({}),Be=i.forwardRef((function(e,t){var n=e.children,a=e.classes,u=e.className,s=e.component,c=void 0===s?"ul":s,d=e.dense,f=void 0!==d&&d,p=e.disablePadding,h=void 0!==p&&p,m=e.subheader,v=Object(o.a)(e,["children","classes","className","component","dense","disablePadding","subheader"]),b=i.useMemo((function(){return{dense:f}}),[f]);return i.createElement(We.Provider,{value:b},i.createElement(c,Object(r.a)({className:Object(l.a)(a.root,u,f&&a.dense,!h&&a.padding,m&&a.subheader),ref:t},v),m,n))})),Ue=Object(d.a)({root:{listStyle:"none",margin:0,padding:0,position:"relative"},padding:{paddingTop:8,paddingBottom:8},dense:{},subheader:{paddingTop:0}},{name:"MuiList"})(Be);function $e(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function Ve(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function He(e,t){if(void 0===t)return!0;var n=e.innerText;return void 0===n&&(n=e.textContent),0!==(n=n.trim().toLowerCase()).length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function qe(e,t,n,r,o,i){for(var a=!1,l=o(e,t,!!t&&n);l;){if(l===e.firstChild){if(a)return;a=!0}var u=!r&&(l.disabled||"true"===l.getAttribute("aria-disabled"));if(l.hasAttribute("tabindex")&&He(l,i)&&!u)return void l.focus();l=o(e,l,n)}}var Ke="undefined"===typeof window?i.useEffect:i.useLayoutEffect,Qe=i.forwardRef((function(e,t){var n=e.actions,a=e.autoFocus,l=void 0!==a&&a,u=e.autoFocusItem,s=void 0!==u&&u,c=e.children,d=e.className,f=e.disabledItemsFocusable,h=void 0!==f&&f,m=e.disableListWrap,v=void 0!==m&&m,b=e.onKeyDown,y=e.variant,g=void 0===y?"selectedMenu":y,x=Object(o.a)(e,["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"]),w=i.useRef(null),k=i.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});Ke((function(){l&&w.current.focus()}),[l]),i.useImperativeHandle(n,(function(){return{adjustStyleForScrollbar:function(e,t){var n=!w.current.style.width;if(e.clientHeight<w.current.clientHeight&&n){var r="".concat(ue(),"px");w.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=r,w.current.style.width="calc(100% + ".concat(r,")")}return w.current}}}),[]);var E=i.useCallback((function(e){w.current=G.findDOMNode(e)}),[]),S=Object(p.a)(E,t),O=-1;i.Children.forEach(c,(function(e,t){i.isValidElement(e)&&(e.props.disabled||("selectedMenu"===g&&e.props.selected||-1===O)&&(O=t))}));var C=i.Children.map(c,(function(e,t){if(t===O){var n={};return s&&(n.autoFocus=!0),void 0===e.props.tabIndex&&"selectedMenu"===g&&(n.tabIndex=0),i.cloneElement(e,n)}return e}));return i.createElement(Ue,Object(r.a)({role:"menu",ref:S,className:d,onKeyDown:function(e){var t=w.current,n=e.key,r=Y(t).activeElement;if("ArrowDown"===n)e.preventDefault(),qe(t,r,v,h,$e);else if("ArrowUp"===n)e.preventDefault(),qe(t,r,v,h,Ve);else if("Home"===n)e.preventDefault(),qe(t,null,v,h,$e);else if("End"===n)e.preventDefault(),qe(t,null,v,h,Ve);else if(1===n.length){var o=k.current,i=n.toLowerCase(),a=performance.now();o.keys.length>0&&(a-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&i!==o.keys[0]&&(o.repeating=!1)),o.lastTime=a,o.keys.push(i);var l=r&&!o.repeating&&He(r,o);o.previousKeyMatched&&(l||qe(t,r,!1,h,$e,o))?e.preventDefault():o.previousKeyMatched=!1}b&&b(e)},tabIndex:l?0:-1},x),C)})),Xe={vertical:"top",horizontal:"right"},Ye={vertical:"top",horizontal:"left"},Ge=i.forwardRef((function(e,t){var n=e.autoFocus,a=void 0===n||n,u=e.children,s=e.classes,c=e.disableAutoFocusItem,d=void 0!==c&&c,f=e.MenuListProps,p=void 0===f?{}:f,h=e.onClose,m=e.onEntering,v=e.open,b=e.PaperProps,y=void 0===b?{}:b,g=e.PopoverClasses,x=e.transitionDuration,w=void 0===x?"auto":x,k=e.variant,E=void 0===k?"selectedMenu":k,S=Object(o.a)(e,["autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","onEntering","open","PaperProps","PopoverClasses","transitionDuration","variant"]),O=N(),C=a&&!d&&v,T=i.useRef(null),j=i.useRef(null),P=-1;i.Children.map(u,(function(e,t){i.isValidElement(e)&&(e.props.disabled||("menu"!==E&&e.props.selected||-1===P)&&(P=t))}));var R=i.Children.map(u,(function(e,t){return t===P?i.cloneElement(e,{ref:function(t){j.current=G.findDOMNode(t),Object(ne.a)(e.ref,t)}}):e}));return i.createElement(Le,Object(r.a)({getContentAnchorEl:function(){return j.current},classes:g,onClose:h,onEntering:function(e,t){T.current&&T.current.adjustStyleForScrollbar(e,O),m&&m(e,t)},anchorOrigin:"rtl"===O.direction?Xe:Ye,transformOrigin:"rtl"===O.direction?Xe:Ye,PaperProps:Object(r.a)(Object(r.a)({},y),{},{classes:Object(r.a)(Object(r.a)({},y.classes),{},{root:s.paper})}),open:v,ref:t,transitionDuration:w},S),i.createElement(Qe,Object(r.a)({onKeyDown:function(e){"Tab"===e.key&&(e.preventDefault(),h&&h(e,"tabKeyDown"))},actions:T,autoFocus:a&&(-1===P||d),autoFocusItem:C,variant:E},p,{className:Object(l.a)(s.list,p.className)}),R))})),Je=Object(d.a)({paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"},list:{outline:0}},{name:"MuiMenu"})(Ge);function Ze(e,t){return"object"===Object(X.a)(t)&&null!==t?e===t:String(e)===String(t)}var et=i.forwardRef((function(e,t){var n=e["aria-label"],a=e.autoFocus,u=e.autoWidth,s=e.children,c=e.classes,d=e.className,h=e.defaultValue,m=e.disabled,v=e.displayEmpty,b=e.IconComponent,y=e.inputRef,g=e.labelId,w=e.MenuProps,k=void 0===w?{}:w,E=e.multiple,S=e.name,O=e.onBlur,C=e.onChange,T=e.onClose,j=e.onFocus,P=e.onOpen,R=e.open,N=e.readOnly,M=e.renderValue,_=(e.required,e.SelectDisplayProps),A=void 0===_?{}:_,z=e.tabIndex,I=(e.type,e.value),F=e.variant,D=void 0===F?"standard":F,L=Object(o.a)(e,["aria-label","autoFocus","autoWidth","children","classes","className","defaultValue","disabled","displayEmpty","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","required","SelectDisplayProps","tabIndex","type","value","variant"]),W=function(e){var t=e.controlled,n=e.default,r=(e.name,e.state,i.useRef(void 0!==t).current),o=i.useState(n),a=o[0],l=o[1];return[r?t:a,i.useCallback((function(e){r||l(e)}),[])]}({controlled:I,default:h,name:"Select"}),B=Object(Q.a)(W,2),U=B[0],$=B[1],V=i.useRef(null),H=i.useState(null),q=H[0],X=H[1],G=i.useRef(null!=R).current,J=i.useState(),Z=J[0],ee=J[1],te=i.useState(!1),ne=te[0],re=te[1],oe=Object(p.a)(t,y);i.useImperativeHandle(oe,(function(){return{focus:function(){q.focus()},node:V.current,value:U}}),[q,U]),i.useEffect((function(){a&&q&&q.focus()}),[a,q]),i.useEffect((function(){if(q){var e=Y(q).querySelector("#".concat(g));if(e){var t=function(){getSelection().isCollapsed&&q.focus()};return e.addEventListener("click",t),function(){e.removeEventListener("click",t)}}}}),[g,q]);var ie,ae,le=function(e,t){e?P&&P(t):T&&T(t),G||(ee(u?null:q.clientWidth),re(e))},ue=function(e){return function(t){var n;if(E||le(!1,t),E){n=Array.isArray(U)?Object(K.a)(U):[];var r=U.indexOf(e.props.value);-1===r?n.push(e.props.value):n.splice(r,1)}else n=e.props.value;e.props.onClick&&e.props.onClick(t),U!==n&&($(n),C&&(t.persist(),Object.defineProperty(t,"target",{writable:!0,value:{value:n,name:S}}),C(t,e)))}},se=null!==q&&(G?R:ne);delete L["aria-invalid"];var ce=[],de=!1;(x({value:U})||v)&&(M?ie=M(U):de=!0);var fe=i.Children.map(s,(function(e){if(!i.isValidElement(e))return null;var t;if(E){if(!Array.isArray(U))throw new Error("Material-UI: The `value` prop must be an array when using the `Select` component with `multiple`.");(t=U.some((function(t){return Ze(t,e.props.value)})))&&de&&ce.push(e.props.children)}else(t=Ze(U,e.props.value))&&de&&(ae=e.props.children);return t&&!0,i.cloneElement(e,{"aria-selected":t?"true":void 0,onClick:ue(e),onKeyUp:function(t){" "===t.key&&t.preventDefault(),e.props.onKeyUp&&e.props.onKeyUp(t)},role:"option",selected:t,value:void 0,"data-value":e.props.value})}));de&&(ie=E?ce.join(", "):ae);var pe,he=Z;!u&&G&&q&&(he=q.clientWidth),pe="undefined"!==typeof z?z:m?null:0;var me=A.id||(S?"mui-component-select-".concat(S):void 0);return i.createElement(i.Fragment,null,i.createElement("div",Object(r.a)({className:Object(l.a)(c.root,c.select,c.selectMenu,c[D],d,m&&c.disabled),ref:X,tabIndex:pe,role:"button","aria-disabled":m?"true":void 0,"aria-expanded":se?"true":void 0,"aria-haspopup":"listbox","aria-label":n,"aria-labelledby":[g,me].filter(Boolean).join(" ")||void 0,onKeyDown:function(e){if(!N){-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),le(!0,e))}},onMouseDown:m||N?null:function(e){0===e.button&&(e.preventDefault(),q.focus(),le(!0,e))},onBlur:function(e){!se&&O&&(e.persist(),Object.defineProperty(e,"target",{writable:!0,value:{value:U,name:S}}),O(e))},onFocus:j},A,{id:me}),function(e){return null==e||"string"===typeof e&&!e.trim()}(ie)?i.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}}):ie),i.createElement("input",Object(r.a)({value:Array.isArray(U)?U.join(","):U,name:S,ref:V,type:"hidden",autoFocus:a},L)),i.createElement(b,{className:Object(l.a)(c.icon,c["icon".concat(Object(f.a)(D))],se&&c.iconOpen,m&&c.disabled)}),i.createElement(Je,Object(r.a)({id:"menu-".concat(S||""),anchorEl:q,open:se,onClose:function(e){le(!1,e)}},k,{MenuListProps:Object(r.a)({"aria-labelledby":g,role:"listbox",disableListWrap:!0},k.MenuListProps),PaperProps:Object(r.a)(Object(r.a)({},k.PaperProps),{},{style:Object(r.a)({minWidth:he},null!=k.PaperProps?k.PaperProps.style:null)})}),fe))})),tt=n(45),nt=Object(tt.a)(i.createElement("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown"),rt=i.forwardRef((function(e,t){var n=e.classes,a=e.className,u=e.disabled,s=e.IconComponent,c=e.inputRef,d=e.variant,p=void 0===d?"standard":d,h=Object(o.a)(e,["classes","className","disabled","IconComponent","inputRef","variant"]);return i.createElement(i.Fragment,null,i.createElement("select",Object(r.a)({className:Object(l.a)(n.root,n.select,n[p],a,u&&n.disabled),disabled:u,ref:c||t},h)),e.multiple?null:i.createElement(s,{className:Object(l.a)(n.icon,n["icon".concat(Object(f.a)(p))],u&&n.disabled)}))})),ot=function(e){return{root:{},select:{"-moz-appearance":"none","-webkit-appearance":"none",userSelect:"none",borderRadius:0,minWidth:16,cursor:"pointer","&:focus":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&::-ms-expand":{display:"none"},"&$disabled":{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:e.palette.background.paper},"&&":{paddingRight:24}},filled:{"&&":{paddingRight:32}},outlined:{borderRadius:e.shape.borderRadius,"&&":{paddingRight:32}},selectMenu:{height:"auto",minHeight:"1.1876em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},disabled:{},icon:{position:"absolute",right:0,top:"calc(50% - 12px)",pointerEvents:"none",color:e.palette.action.active,"&$disabled":{color:e.palette.action.disabled}},iconOpen:{transform:"rotate(180deg)"},iconFilled:{right:7},iconOutlined:{right:7}}},it=i.createElement(O,null),at=i.forwardRef((function(e,t){var n=e.children,a=e.classes,l=e.IconComponent,s=void 0===l?nt:l,c=e.input,d=void 0===c?it:c,f=e.inputProps,p=(e.variant,Object(o.a)(e,["children","classes","IconComponent","input","inputProps","variant"])),h=u({props:e,muiFormControl:I(),states:["variant"]});return i.cloneElement(d,Object(r.a)({inputComponent:rt,inputProps:Object(r.a)(Object(r.a)({children:n,classes:a,IconComponent:s,variant:h.variant,type:void 0},f),d?d.props.inputProps:{}),ref:t},p))}));at.muiName="Select";Object(d.a)(ot,{name:"MuiNativeSelect"})(at);var lt=ot,ut=i.createElement(O,null),st=i.createElement(T,null),ct=i.forwardRef((function e(t,n){var a=t.autoWidth,l=void 0!==a&&a,s=t.children,c=t.classes,d=t.displayEmpty,f=void 0!==d&&d,p=t.IconComponent,h=void 0===p?nt:p,m=t.id,v=t.input,b=t.inputProps,y=t.label,g=t.labelId,x=t.labelWidth,w=void 0===x?0:x,k=t.MenuProps,E=t.multiple,S=void 0!==E&&E,O=t.native,C=void 0!==O&&O,T=t.onClose,j=t.onOpen,P=t.open,R=t.renderValue,N=t.SelectDisplayProps,M=t.variant,_=void 0===M?"standard":M,A=Object(o.a)(t,["autoWidth","children","classes","displayEmpty","IconComponent","id","input","inputProps","label","labelId","labelWidth","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"]),F=C?rt:et,D=u({props:t,muiFormControl:I(),states:["variant"]}).variant||_,L=v||{standard:ut,outlined:i.createElement(z,{label:y,labelWidth:w}),filled:st}[D];return i.cloneElement(L,Object(r.a)({inputComponent:F,inputProps:Object(r.a)(Object(r.a)(Object(r.a)({children:s,IconComponent:h,variant:D,type:void 0,multiple:S},C?{id:m}:{autoWidth:l,displayEmpty:f,labelId:g,MenuProps:k,onClose:T,onOpen:j,open:P,renderValue:R,SelectDisplayProps:Object(r.a)({id:m},N)}),b),{},{classes:b?Object(q.a)({baseClasses:c,newClasses:b.classes,Component:e}):c},v?v.props.inputProps:{}),ref:n},A))}));ct.muiName="Select";var dt=Object(d.a)(lt,{name:"MuiSelect"})(ct),ft={standard:O,filled:T,outlined:z},pt=i.forwardRef((function(e,t){var n=e.autoComplete,a=e.autoFocus,u=void 0!==a&&a,s=e.children,c=e.classes,d=e.className,f=e.color,p=void 0===f?"primary":f,h=e.defaultValue,m=e.disabled,v=void 0!==m&&m,b=e.error,y=void 0!==b&&b,g=e.FormHelperTextProps,x=e.fullWidth,w=void 0!==x&&x,k=e.helperText,E=e.hiddenLabel,S=e.id,O=e.InputLabelProps,C=e.inputProps,T=e.InputProps,j=e.inputRef,P=e.label,R=e.multiline,N=void 0!==R&&R,M=e.name,_=e.onBlur,A=e.onChange,z=e.onFocus,I=e.placeholder,F=e.required,D=void 0!==F&&F,L=e.rows,B=e.rowsMax,U=e.select,V=void 0!==U&&U,q=e.SelectProps,K=e.type,Q=e.value,X=e.variant,Y=void 0===X?"standard":X,G=Object(o.a)(e,["autoComplete","autoFocus","children","classes","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","hiddenLabel","id","InputLabelProps","inputProps","InputProps","inputRef","label","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","rowsMax","select","SelectProps","type","value","variant"]);var J={};if("outlined"===Y&&(O&&"undefined"!==typeof O.shrink&&(J.notched=O.shrink),P)){var Z,ee=null!==(Z=null===O||void 0===O?void 0:O.required)&&void 0!==Z?Z:D;J.label=i.createElement(i.Fragment,null,P,ee&&"\xa0*")}V&&(q&&q.native||(J.id=void 0),J["aria-describedby"]=void 0);var te=k&&S?"".concat(S,"-helper-text"):void 0,ne=P&&S?"".concat(S,"-label"):void 0,re=ft[Y],oe=i.createElement(re,Object(r.a)({"aria-describedby":te,autoComplete:n,autoFocus:u,defaultValue:h,fullWidth:w,multiline:N,name:M,rows:L,rowsMax:B,type:K,value:Q,id:S,inputRef:j,onBlur:_,onChange:A,onFocus:z,placeholder:I,inputProps:C},J,T));return i.createElement($,Object(r.a)({className:Object(l.a)(c.root,d),disabled:v,error:y,fullWidth:w,hiddenLabel:E,ref:t,required:D,color:p,variant:Y},G),P&&i.createElement(W,Object(r.a)({htmlFor:S,id:ne},O),P),V?i.createElement(dt,Object(r.a)({"aria-describedby":te,id:S,labelId:ne,value:Q,input:oe},q),s):oe,k&&i.createElement(H,Object(r.a)({id:te},g),k))}));t.a=Object(d.a)({root:{}},{name:"MuiTextField"})(pt)},function(e,t,n){"use strict";var r=n(14),o=n(1),i=(n(5),n(21));var a=function(e){var t=function(t){var n=e(t);return t.css?Object(o.a)(Object(o.a)({},Object(i.a)(n,e(Object(o.a)({theme:t.theme},t.css)))),function(e,t){var n={};return Object.keys(e).forEach((function(r){-1===t.indexOf(r)&&(n[r]=e[r])})),n}(t.css,[e.filterProps])):n};return t.propTypes={},t.filterProps=["css"].concat(Object(r.a)(e.filterProps)),t};var l=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=function(e){return t.reduce((function(t,n){var r=n(e);return r?Object(i.a)(t,r):t}),{})};return r.propTypes={},r.filterProps=t.reduce((function(e,t){return e.concat(t.filterProps)}),[]),r},u=n(15),s=n(41);function c(e,t){return t&&"string"===typeof t?t.split(".").reduce((function(e,t){return e&&e[t]?e[t]:null}),e):null}var d=function(e){var t=e.prop,n=e.cssProperty,r=void 0===n?e.prop:n,o=e.themeKey,i=e.transform,a=function(e){if(null==e[t])return null;var n=e[t],a=c(e.theme,o)||{};return Object(s.a)(e,n,(function(e){var t;return"function"===typeof a?t=a(e):Array.isArray(a)?t=a[e]||e:(t=c(a,e)||e,i&&(t=i(t))),!1===r?t:Object(u.a)({},r,t)}))};return a.propTypes={},a.filterProps=[t],a};function f(e){return"number"!==typeof e?e:"".concat(e,"px solid")}var p=l(d({prop:"border",themeKey:"borders",transform:f}),d({prop:"borderTop",themeKey:"borders",transform:f}),d({prop:"borderRight",themeKey:"borders",transform:f}),d({prop:"borderBottom",themeKey:"borders",transform:f}),d({prop:"borderLeft",themeKey:"borders",transform:f}),d({prop:"borderColor",themeKey:"palette"}),d({prop:"borderRadius",themeKey:"shape"})),h=l(d({prop:"displayPrint",cssProperty:!1,transform:function(e){return{"@media print":{display:e}}}}),d({prop:"display"}),d({prop:"overflow"}),d({prop:"textOverflow"}),d({prop:"visibility"}),d({prop:"whiteSpace"})),m=l(d({prop:"flexBasis"}),d({prop:"flexDirection"}),d({prop:"flexWrap"}),d({prop:"justifyContent"}),d({prop:"alignItems"}),d({prop:"alignContent"}),d({prop:"order"}),d({prop:"flex"}),d({prop:"flexGrow"}),d({prop:"flexShrink"}),d({prop:"alignSelf"}),d({prop:"justifyItems"}),d({prop:"justifySelf"})),v=l(d({prop:"gridGap"}),d({prop:"gridColumnGap"}),d({prop:"gridRowGap"}),d({prop:"gridColumn"}),d({prop:"gridRow"}),d({prop:"gridAutoFlow"}),d({prop:"gridAutoColumns"}),d({prop:"gridAutoRows"}),d({prop:"gridTemplateColumns"}),d({prop:"gridTemplateRows"}),d({prop:"gridTemplateAreas"}),d({prop:"gridArea"})),b=l(d({prop:"position"}),d({prop:"zIndex",themeKey:"zIndex"}),d({prop:"top"}),d({prop:"right"}),d({prop:"bottom"}),d({prop:"left"})),y=l(d({prop:"color",themeKey:"palette"}),d({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette"})),g=d({prop:"boxShadow",themeKey:"shadows"});function x(e){return e<=1?"".concat(100*e,"%"):e}var w=d({prop:"width",transform:x}),k=d({prop:"maxWidth",transform:x}),E=d({prop:"minWidth",transform:x}),S=d({prop:"height",transform:x}),O=d({prop:"maxHeight",transform:x}),C=d({prop:"minHeight",transform:x}),T=(d({prop:"size",cssProperty:"width",transform:x}),d({prop:"size",cssProperty:"height",transform:x}),l(w,k,E,S,O,C,d({prop:"boxSizing"}))),j=n(144),P=l(d({prop:"fontFamily",themeKey:"typography"}),d({prop:"fontSize",themeKey:"typography"}),d({prop:"fontStyle",themeKey:"typography"}),d({prop:"fontWeight",themeKey:"typography"}),d({prop:"letterSpacing"}),d({prop:"lineHeight"}),d({prop:"textAlign"})),R=n(2),N=n(0),M=n.n(N),_=n(3),A=n(40),z=n.n(A),I=n(107);function F(e,t){var n={};return Object.keys(e).forEach((function(r){-1===t.indexOf(r)&&(n[r]=e[r])})),n}var D=n(20),L=function(e){var t=function(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.name,i=Object(R.a)(n,["name"]);var a,l=r,u="function"===typeof t?function(e){return{root:function(n){return t(Object(o.a)({theme:e},n))}}}:{root:t},s=Object(I.a)(u,Object(o.a)({Component:e,name:r||e.displayName,classNamePrefix:l},i));t.filterProps&&(a=t.filterProps,delete t.filterProps),t.propTypes&&(t.propTypes,delete t.propTypes);var c=M.a.forwardRef((function(t,n){var r=t.children,i=t.className,l=t.clone,u=t.component,c=Object(R.a)(t,["children","className","clone","component"]),d=s(t),f=Object(_.a)(d.root,i),p=c;if(a&&(p=F(p,a)),l)return M.a.cloneElement(r,Object(o.a)({className:Object(_.a)(r.props.className,f)},p));if("function"===typeof r)return r(Object(o.a)({className:f},p));var h=u||e;return M.a.createElement(h,Object(o.a)({ref:n,className:f},p),r)}));return z()(c,e),c}}(e);return function(e,n){return t(e,Object(o.a)({defaultTheme:D.a},n))}},W=a(l(p,h,m,v,b,y,g,T,j.b,P)),B=L("div")(W,{name:"MuiBox"});t.a=B},function(e,t,n){"use strict";n.d(t,"a",(function(){return d}));var r=n(26),o=n(41),i=n(21);var a={m:"margin",p:"padding"},l={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},u={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},s=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){if(e.length>2){if(!u[e])return[e];e=u[e]}var t=e.split(""),n=Object(r.a)(t,2),o=n[0],i=n[1],s=a[o],c=l[i]||"";return Array.isArray(c)?c.map((function(e){return s+e})):[s+c]})),c=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function d(e){var t=e.spacing||8;return"number"===typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"===typeof t?t:function(){}}function f(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"===typeof t)return t;var n=e(Math.abs(t));return t>=0?n:"number"===typeof n?-n:"-".concat(n)}(t,n),e}),{})}}function p(e){var t=d(e.theme);return Object.keys(e).map((function(n){if(-1===c.indexOf(n))return null;var r=f(s(n),t),i=e[n];return Object(o.a)(e,i,r)})).reduce(i.a,{})}p.propTypes={},p.filterProps=c;t.b=p}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm0uanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vd2l0aFN0eWxlcy93aXRoU3R5bGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvd2l0aFN0eWxlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9jYXBpdGFsaXplLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY29sb3JNYW5pcHVsYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvdXNlRm9ya1JlZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCIuLi9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVSZXN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvdXNlRXZlbnRDYWxsYmFjay5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvZGVmYXVsdFRoZW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS91dGlscy9lc20vZGVlcG1lcmdlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL21lcmdlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9zZXRSZWYuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlUmVzdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vVGhlbWVQcm92aWRlci9uZXN0ZWQuanMiLCIuLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vYnJlYWtwb2ludHMuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy96SW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TdmdJY29uL1N2Z0ljb24uanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS91dGlscy9lc20vZGVlcG1lcmdlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlQnJlYWtwb2ludHMuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9jb21tb24uanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9ncmV5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvaW5kaWdvLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvcGluay5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL3JlZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL29yYW5nZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2JsdWUuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9ncmVlbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZVBhbGV0dGUuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvc2hhZG93cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3NoYXBlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlU3BhY2luZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3RyYW5zaXRpb25zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlTXVpVGhlbWUuanMiLCIuLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jc3NVdGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3Jlc3BvbnNpdmVGb250U2l6ZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL3VzZVRoZW1lL3VzZVRoZW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UeXBvZ3JhcGh5L1R5cG9ncmFwaHkuanMiLCIuLi9ub2RlX21vZHVsZXMvaXMtaW4tYnJvd3Nlci9kaXN0L21vZHVsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy90aW55LXdhcm5pbmcvZGlzdC90aW55LXdhcm5pbmcuZXNtLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2pzcy9kaXN0L2pzcy5lc20uanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9tdWx0aUtleVN0b3JlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbi9kaXN0L2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1mdW5jdGlvbi5lc20uanMiLCIuLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1nbG9iYWwvZGlzdC9qc3MtcGx1Z2luLWdsb2JhbC5lc20uanMiLCIuLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1uZXN0ZWQvZGlzdC9qc3MtcGx1Z2luLW5lc3RlZC5lc20uanMiLCIuLi9ub2RlX21vZHVsZXMvaHlwaGVuYXRlLXN0eWxlLW5hbWUvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1jYW1lbC1jYXNlL2Rpc3QvanNzLXBsdWdpbi1jYW1lbC1jYXNlLmVzbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWRlZmF1bHQtdW5pdC9kaXN0L2pzcy1wbHVnaW4tZGVmYXVsdC11bml0LmVzbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jc3MtdmVuZG9yL2Rpc3QvY3NzLXZlbmRvci5lc20uanMiLCIuLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi12ZW5kb3ItcHJlZml4ZXIvZGlzdC9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci5lc20uanMiLCIuLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1wcm9wcy1zb3J0L2Rpc3QvanNzLXBsdWdpbi1wcm9wcy1zb3J0LmVzbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9qc3NQcmVzZXQvanNzUHJlc2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1N0eWxlc1Byb3ZpZGVyL1N0eWxlc1Byb3ZpZGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21ha2VTdHlsZXMvaW5kZXhDb3VudGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS91dGlscy9lc20vZGVlcG1lcmdlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFN0eWxlc0NyZWF0b3IvZ2V0U3R5bGVzQ3JlYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRTdHlsZXNDcmVhdG9yL25vb3BUaGVtZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL21ha2VTdHlsZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b25CYXNlL1JpcHBsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uQmFzZS9Ub3VjaFJpcHBsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uQmFzZS9CdXR0b25CYXNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21lcmdlQ2xhc3Nlcy9tZXJnZUNsYXNzZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0dyaWQvR3JpZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRUaGVtZVByb3BzL2dldFRoZW1lUHJvcHMuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpbmsvTGluay5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL21ha2VTdHlsZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vVGhlbWVQcm92aWRlci9UaGVtZVByb3ZpZGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Dc3NCYXNlbGluZS9Dc3NCYXNlbGluZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uL0J1dHRvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9kZWJvdW5jZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGV4dGFyZWFBdXRvc2l6ZS9UZXh0YXJlYUF1dG9zaXplLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dEJhc2UvdXRpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0lucHV0QmFzZS9JbnB1dEJhc2UuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0lucHV0L0lucHV0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9GaWxsZWRJbnB1dC9GaWxsZWRJbnB1dC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3VzZVRoZW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9PdXRsaW5lZElucHV0L05vdGNoZWRPdXRsaW5lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9PdXRsaW5lZElucHV0L091dGxpbmVkSW5wdXQuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Gb3JtTGFiZWwvRm9ybUxhYmVsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dExhYmVsL0lucHV0TGFiZWwuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2lzTXVpRWxlbWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2wuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1IZWxwZXJUZXh0L0Zvcm1IZWxwZXJUZXh0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9vd25lckRvY3VtZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9vd25lcldpbmRvdy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Qb3J0YWwvUG9ydGFsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9nZXRTY3JvbGxiYXJTaXplLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Nb2RhbC9Nb2RhbE1hbmFnZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01vZGFsL1RyYXBGb2N1cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTW9kYWwvU2ltcGxlQmFja2Ryb3AuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01vZGFsL01vZGFsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9jb25maWcuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3RyYW5zaXRpb25zL3V0aWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Hcm93L0dyb3cuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1BhcGVyL1BhcGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Qb3BvdmVyL1BvcG92ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3QvTGlzdENvbnRleHQuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3QvTGlzdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTWVudUxpc3QvTWVudUxpc3QuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01lbnUvTWVudS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU2VsZWN0L1NlbGVjdElucHV0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91c2VDb250cm9sbGVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvQXJyb3dEcm9wRG93bi5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdElucHV0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TZWxlY3QvU2VsZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9UZXh0RmllbGQvVGV4dEZpZWxkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL2Nzcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9jb21wb3NlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3N0eWxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL2JvcmRlcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vZGlzcGxheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9mbGV4Ym94LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL2dyaWQuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vcG9zaXRpb25zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3BhbGV0dGUuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vc2hhZG93cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9zaXppbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vdHlwb2dyYXBoeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9zdHlsZWQvc3R5bGVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvc3R5bGVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Cb3gvQm94LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3NwYWNpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vbWVtb2l6ZS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSIsIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwidGhpcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvVmFsIiwibWl4IiwiayIsInkiLCJzdHIiLCJBcnJheSIsImlzQXJyYXkiLCJ0bXAiLCJ4Iiwid2l0aFN0eWxlcyIsInN0eWxlc09yQ3JlYXRvciIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJDb21wb25lbnQiLCJkZWZhdWx0VGhlbWUiLCJfb3B0aW9ucyR3aXRoVGhlbWUiLCJ3aXRoVGhlbWUiLCJuYW1lIiwic3R5bGVzT3B0aW9ucyIsImNsYXNzTmFtZVByZWZpeCIsInVzZVN0eWxlcyIsIm1ha2VTdHlsZXMiLCJkaXNwbGF5TmFtZSIsIldpdGhTdHlsZXMiLCJSZWFjdCIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsImNsYXNzZXMiLCJ0aGVtZSIsImlubmVyUmVmIiwib3RoZXIiLCJkZWZhdWx0UHJvcHMiLCJtb3JlIiwidXNlVGhlbWUiLCJnZXRUaGVtZVByb3BzIiwiY3JlYXRlRWxlbWVudCIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwid2l0aFN0eWxlc1dpdGhvdXREZWZhdWx0IiwiY2FwaXRhbGl6ZSIsInN0cmluZyIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJjbGFtcCIsInZhbHVlIiwibWluIiwibWF4IiwiTWF0aCIsImRlY29tcG9zZUNvbG9yIiwiY29sb3IiLCJ0eXBlIiwic3Vic3RyIiwicmUiLCJSZWdFeHAiLCJjb25jYXQiLCJjb2xvcnMiLCJtYXRjaCIsIm1hcCIsIm4iLCJpbmRleCIsInBhcnNlSW50Iiwicm91bmQiLCJqb2luIiwiaGV4VG9SZ2IiLCJtYXJrZXIiLCJzdWJzdHJpbmciLCJFcnJvciIsInZhbHVlcyIsInNwbGl0IiwicGFyc2VGbG9hdCIsInJlY29tcG9zZUNvbG9yIiwiZ2V0Q29udHJhc3RSYXRpbyIsImZvcmVncm91bmQiLCJiYWNrZ3JvdW5kIiwibHVtQSIsImdldEx1bWluYW5jZSIsImx1bUIiLCJyZ2IiLCJoIiwicyIsImwiLCJhIiwiZiIsInB1c2giLCJoc2xUb1JnYiIsInZhbCIsInBvdyIsIk51bWJlciIsInRvRml4ZWQiLCJlbXBoYXNpemUiLCJjb2VmZmljaWVudCIsImRhcmtlbiIsImxpZ2h0ZW4iLCJmYWRlIiwidXNlRm9ya1JlZiIsInJlZkEiLCJyZWZCIiwicmVmVmFsdWUiLCJzZXRSZWYiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInByb2Nlc3MiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJiaW5kIiwidG9TdHJpbmciLCJpc1VuZGVmaW5lZCIsImlzT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiaXNGdW5jdGlvbiIsImZvckVhY2giLCJvYmoiLCJmbiIsImlzQXJyYXlCdWZmZXIiLCJpc0J1ZmZlciIsImNvbnN0cnVjdG9yIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIndpbmRvdyIsImRvY3VtZW50IiwibWVyZ2UiLCJyZXN1bHQiLCJhc3NpZ25WYWx1ZSIsImV4dGVuZCIsImIiLCJ0aGlzQXJnIiwidHJpbSIsInJlcGxhY2UiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJjaGFyQ29kZUF0IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiYXJyYXlMaWtlVG9BcnJheSIsIml0ZXIiLCJTeW1ib2wiLCJpdGVyYXRvciIsImZyb20iLCJ1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0eSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJsZW4iLCJhcnIyIiwiX3NsaWNlZFRvQXJyYXkiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaSIsIm5leHQiLCJkb25lIiwibyIsIm1pbkxlbiIsInRlc3QiLCJfdHlwZW9mIiwidXNlRW5oYW5jZWRFZmZlY3QiLCJ1c2VFdmVudENhbGxiYWNrIiwiY3VycmVudCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlS2V5cyIsImtleXMiLCJjcmVhdGVNdWlUaGVtZSIsIml0ZW0iLCJhY2MiLCJkZWVwbWVyZ2UiLCJjbG9uZSIsIm91dHB1dCIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiX19wcm90b19fIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJjcmVhdGVDb250ZXh0IiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIlRoZW1lQ29udGV4dCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsImhhc1N5bWJvbCIsImZvciIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvdG90eXBlIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJlIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsImRlZmF1bHRCcmVha3BvaW50cyIsInVwIiwiaGFuZGxlQnJlYWtwb2ludHMiLCJwcm9wVmFsdWUiLCJzdHlsZUZyb21Qcm9wVmFsdWUiLCJ0aGVtZUJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHMiLCJyZWR1Y2UiLCJfdGhlbWVCcmVha3BvaW50cyIsImJyZWFrcG9pbnQiLCJ6SW5kZXgiLCJtb2JpbGVTdGVwcGVyIiwic3BlZWREaWFsIiwiYXBwQmFyIiwiZHJhd2VyIiwibW9kYWwiLCJzbmFja2JhciIsInRvb2x0aXAiLCJoYWRLZXlib2FyZEV2ZW50IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQiLCJpbnB1dFR5cGVzV2hpdGVsaXN0IiwidGV4dCIsInNlYXJjaCIsInVybCIsInRlbCIsImVtYWlsIiwicGFzc3dvcmQiLCJudW1iZXIiLCJkYXRlIiwibW9udGgiLCJ3ZWVrIiwidGltZSIsImRhdGV0aW1lIiwiaGFuZGxlS2V5RG93biIsImV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJoYW5kbGVQb2ludGVyRG93biIsImhhbmRsZVZpc2liaWxpdHlDaGFuZ2UiLCJ2aXNpYmlsaXR5U3RhdGUiLCJpc0ZvY3VzVmlzaWJsZSIsIm1hdGNoZXMiLCJub2RlIiwidGFnTmFtZSIsInJlYWRPbmx5IiwiaXNDb250ZW50RWRpdGFibGUiLCJmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSIsImhhbmRsZUJsdXJWaXNpYmxlIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInVzZUlzRm9jdXNWaXNpYmxlIiwib25CbHVyVmlzaWJsZSIsImluc3RhbmNlIiwiZG9jIiwiUmVhY3RET00iLCJvd25lckRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIlN2Z0ljb24iLCJjaGlsZHJlbiIsImNsYXNzTmFtZSIsIl9wcm9wcyRjb2xvciIsIl9wcm9wcyRjb21wb25lbnQiLCJfcHJvcHMkZm9udFNpemUiLCJmb250U2l6ZSIsImh0bWxDb2xvciIsInRpdGxlQWNjZXNzIiwiX3Byb3BzJHZpZXdCb3giLCJ2aWV3Qm94IiwiY2xzeCIsInJvb3QiLCJmb2N1c2FibGUiLCJyb2xlIiwibXVpTmFtZSIsInVzZXJTZWxlY3QiLCJ3aWR0aCIsImhlaWdodCIsImRpc3BsYXkiLCJmaWxsIiwiZmxleFNocmluayIsInR5cG9ncmFwaHkiLCJweFRvUmVtIiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25zIiwiZHVyYXRpb24iLCJzaG9ydGVyIiwiY29sb3JQcmltYXJ5IiwicGFsZXR0ZSIsInByaW1hcnkiLCJtYWluIiwiY29sb3JTZWNvbmRhcnkiLCJzZWNvbmRhcnkiLCJjb2xvckFjdGlvbiIsImFjdGlvbiIsImFjdGl2ZSIsImNvbG9yRXJyb3IiLCJjb2xvckRpc2FibGVkIiwiZGlzYWJsZWQiLCJmb250U2l6ZUluaGVyaXQiLCJmb250U2l6ZVNtYWxsIiwiZm9udFNpemVMYXJnZSIsImNyZWF0ZVN2Z0ljb24iLCJwYXRoIiwibWVtbyIsImNyZWF0ZUJyZWFrcG9pbnRzIiwiX2JyZWFrcG9pbnRzJHZhbHVlcyIsIl9icmVha3BvaW50cyR1bml0IiwidW5pdCIsIl9icmVha3BvaW50cyRzdGVwIiwic3RlcCIsImJldHdlZW4iLCJzdGFydCIsImVuZCIsImVuZEluZGV4IiwiZG93biIsInVwcGVyYm91bmQiLCJvbmx5IiwiY3JlYXRlTWl4aW5zIiwic3BhY2luZyIsIl90b29sYmFyIiwiZ3V0dGVycyIsInN0eWxlcyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwidG9vbGJhciIsIm1pbkhlaWdodCIsImNvbW1vbiIsImJsYWNrIiwid2hpdGUiLCJncmV5IiwiNTAiLCIxMDAiLCIyMDAiLCIzMDAiLCI0MDAiLCI1MDAiLCI2MDAiLCI3MDAiLCI4MDAiLCI5MDAiLCJBMTAwIiwiQTIwMCIsIkE0MDAiLCJBNzAwIiwiaW5kaWdvIiwicGluayIsInJlZCIsIm9yYW5nZSIsImJsdWUiLCJncmVlbiIsImxpZ2h0IiwiaGludCIsImRpdmlkZXIiLCJwYXBlciIsImRlZmF1bHQiLCJob3ZlciIsImhvdmVyT3BhY2l0eSIsInNlbGVjdGVkIiwic2VsZWN0ZWRPcGFjaXR5IiwiZGlzYWJsZWRCYWNrZ3JvdW5kIiwiZGlzYWJsZWRPcGFjaXR5IiwiZm9jdXMiLCJmb2N1c09wYWNpdHkiLCJhY3RpdmF0ZWRPcGFjaXR5IiwiZGFyayIsImljb24iLCJhZGRMaWdodE9yRGFyayIsImludGVudCIsImRpcmVjdGlvbiIsInNoYWRlIiwidG9uYWxPZmZzZXQiLCJ0b25hbE9mZnNldExpZ2h0IiwidG9uYWxPZmZzZXREYXJrIiwiY3JlYXRlUGFsZXR0ZSIsIl9wYWxldHRlJHByaW1hcnkiLCJfcGFsZXR0ZSRzZWNvbmRhcnkiLCJfcGFsZXR0ZSRlcnJvciIsIl9wYWxldHRlJHdhcm5pbmciLCJ3YXJuaW5nIiwiX3BhbGV0dGUkaW5mbyIsImluZm8iLCJfcGFsZXR0ZSRzdWNjZXNzIiwic3VjY2VzcyIsIl9wYWxldHRlJHR5cGUiLCJfcGFsZXR0ZSRjb250cmFzdFRocmUiLCJjb250cmFzdFRocmVzaG9sZCIsIl9wYWxldHRlJHRvbmFsT2Zmc2V0IiwiZ2V0Q29udHJhc3RUZXh0IiwiYXVnbWVudENvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb250cmFzdFRleHQiLCJ0eXBlcyIsImNhc2VBbGxDYXBzIiwidGV4dFRyYW5zZm9ybSIsImNyZWF0ZVR5cG9ncmFwaHkiLCJfcmVmIiwiX3JlZiRmb250RmFtaWx5IiwiZm9udEZhbWlseSIsIl9yZWYkZm9udFNpemUiLCJfcmVmJGZvbnRXZWlnaHRMaWdodCIsImZvbnRXZWlnaHRMaWdodCIsIl9yZWYkZm9udFdlaWdodFJlZ3VsYSIsImZvbnRXZWlnaHRSZWd1bGFyIiwiX3JlZiRmb250V2VpZ2h0TWVkaXVtIiwiZm9udFdlaWdodE1lZGl1bSIsIl9yZWYkZm9udFdlaWdodEJvbGQiLCJmb250V2VpZ2h0Qm9sZCIsIl9yZWYkaHRtbEZvbnRTaXplIiwiaHRtbEZvbnRTaXplIiwiYWxsVmFyaWFudHMiLCJweFRvUmVtMiIsImNvZWYiLCJzaXplIiwiYnVpbGRWYXJpYW50IiwiZm9udFdlaWdodCIsImxpbmVIZWlnaHQiLCJsZXR0ZXJTcGFjaW5nIiwiY2FzaW5nIiwidmFyaWFudHMiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJib2R5MSIsImJvZHkyIiwiYnV0dG9uIiwiY2FwdGlvbiIsIm92ZXJsaW5lIiwiY3JlYXRlU2hhZG93Iiwic2hhZG93cyIsInNoYXBlIiwiYm9yZGVyUmFkaXVzIiwiY3JlYXRlU3BhY2luZyIsInNwYWNpbmdJbnB1dCIsIm11aSIsInRyYW5zZm9ybSIsImNyZWF0ZVVuYXJ5U3BhY2luZyIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImFyZ3VtZW50IiwiZ2V0IiwiZWFzaW5nIiwiZWFzZUluT3V0IiwiZWFzZU91dCIsImVhc2VJbiIsInNoYXJwIiwic2hvcnRlc3QiLCJzaG9ydCIsInN0YW5kYXJkIiwiY29tcGxleCIsImVudGVyaW5nU2NyZWVuIiwibGVhdmluZ1NjcmVlbiIsImZvcm1hdE1zIiwibWlsbGlzZWNvbmRzIiwiX29wdGlvbnMkZHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsIl9vcHRpb25zJGVhc2luZyIsImVhc2luZ09wdGlvbiIsIl9vcHRpb25zJGRlbGF5IiwiZGVsYXkiLCJhbmltYXRlZFByb3AiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJjb25zdGFudCIsIl9vcHRpb25zJGJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHNJbnB1dCIsIl9vcHRpb25zJG1peGlucyIsIm1peGluc0lucHV0IiwiX29wdGlvbnMkcGFsZXR0ZSIsInBhbGV0dGVJbnB1dCIsIl9vcHRpb25zJHR5cG9ncmFwaHkiLCJ0eXBvZ3JhcGh5SW5wdXQiLCJtdWlUaGVtZSIsIm92ZXJyaWRlcyIsInByb3BJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwiU3RyaW5nIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJ0byIsInV0aWxzIiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicGFyYW1zIiwicGFyYW1zU2VyaWFsaXplciIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInYiLCJ0b0lTT1N0cmluZyIsImhhc2htYXJrSW5kZXgiLCJfX0NBTkNFTF9fIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaGVhZGVycyIsImRlZmF1bHRzIiwiYWRhcHRlciIsIlhNTEh0dHBSZXF1ZXN0IiwiZ2V0RGVmYXVsdEFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiZGF0YSIsInRyYW5zZm9ybVJlc3BvbnNlIiwicGFyc2UiLCJ0aW1lb3V0IiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJtZXRob2QiLCJzZXR0bGUiLCJjb29raWVzIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwidW5lc2NhcGUiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsImZ1bGxQYXRoIiwiYmFzZVVSTCIsIm9wZW4iLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsInRoZW4iLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJlbmhhbmNlRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsImNvbmZpZzEiLCJjb25maWcyIiwidmFsdWVGcm9tQ29uZmlnMktleXMiLCJtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyIsImRlZmF1bHRUb0NvbmZpZzJLZXlzIiwiZGlyZWN0TWVyZ2VLZXlzIiwiZ2V0TWVyZ2VkVmFsdWUiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwicHJvcCIsImF4aW9zS2V5cyIsIm90aGVyS2V5cyIsImZpbHRlciIsIkNhbmNlbCIsImlzVW5pdGxlc3MiLCJ0b1VuaXRsZXNzIiwiY29udmVydExlbmd0aCIsImJhc2VGb250U2l6ZSIsInRvVW5pdCIsImZyb21Vbml0IiwicHhMZW5ndGgiLCJvdXRwdXRMZW5ndGgiLCJhbGlnblByb3BlcnR5IiwiZ3JpZCIsInNpemVCZWxvdyIsInNpemVBYm92ZSIsImZvbnRHcmlkIiwiX3JlZjIiLCJwaXhlbHMiLCJyZXNwb25zaXZlUHJvcGVydHkiLCJfcmVmMyIsImNzc1Byb3BlcnR5IiwiX3JlZjMkdW5pdCIsIl9yZWYzJGJyZWFrcG9pbnRzIiwiX3JlZjMkdHJhbnNmb3JtIiwiZmFjdG9yIiwicmVzcG9uc2l2ZUZvbnRTaXplcyIsInRoZW1lSW5wdXQiLCJfb3B0aW9ucyRkaXNhYmxlQWxpZ24iLCJkaXNhYmxlQWxpZ24iLCJfb3B0aW9ucyRmYWN0b3IiLCJfb3B0aW9ucyR2YXJpYW50cyIsImNvbnZlcnQiLCJicmVha3BvaW50VmFsdWVzIiwidmFyaWFudCIsInN0eWxlIiwicmVtRm9udFNpemUiLCJtYXhGb250U2l6ZSIsIm1pbkZvbnRTaXplIiwicCIsInEiLCJyIiwidCIsInUiLCJ3IiwieiIsIkEiLCJCIiwiQyIsImMiLCJEIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkUiLCJGIiwiY29udGV4dCIsInJlZnMiLCJ1cGRhdGVyIiwiRyIsIkgiLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIkkiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkoiLCJLIiwiTCIsIl9fc2VsZiIsIl9fc291cmNlIiwiTSIsImQiLCJnIiwibSIsIiQkdHlwZW9mIiwiX293bmVyIiwiTyIsIlAiLCJRIiwiUiIsInBvcCIsImtleVByZWZpeCIsImZ1bmMiLCJjb3VudCIsIlMiLCJWIiwiVCIsIlUiLCJlc2NhcGUiLCJXIiwiYWEiLCJYIiwiTiIsIlkiLCJaIiwiYmEiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJzdXNwZW5zZSIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiUHVyZUNvbXBvbmVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiY2xvbmVFbGVtZW50IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ2ZXJzaW9uIiwib25FcnJvciIsImRhIiwiZWEiLCJmYSIsImhhIiwiaWEiLCJqYSIsImxhIiwibWEiLCJuYSIsIm9hIiwiY3VycmVudFRhcmdldCIsImthIiwicGEiLCJxYSIsInJhIiwic2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInRhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJ1YSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ2YSIsIndhIiwiZGVwZW5kZW5jaWVzIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwic3RhdGVOb2RlIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwiUGEiLCJRYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsIlVhIiwiVmEiLCJ4bGlua0hyZWYiLCJXYSIsIlhhIiwiU2EiLCJpc05hTiIsIlRhIiwiUmEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJjYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJwYiIsInFiIiwidGFnIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyZXR1cm4iLCJyYiIsInNiIiwibm9kZU5hbWUiLCJ4YiIsIl92YWx1ZVRyYWNrZXIiLCJzZXQiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwidGIiLCJ5YiIsImNoZWNrZWQiLCJ6YiIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQWIiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJhY3RpdmVFbGVtZW50IiwiR2IiLCJGYiIsIkhiIiwiZGVmYXVsdFNlbGVjdGVkIiwiSWIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkpiIiwiS2IiLCJMYiIsInRleHRDb250ZW50IiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJSYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwiU2IiLCJUYiIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlViIiwiVmIiLCJXYiIsImFuaW1hdGlvbiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsIldlYWtNYXAiLCJNYXAiLCJjYyIsImRjIiwiYWx0ZXJuYXRlIiwiZWZmZWN0VGFnIiwiZWMiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImZjIiwiaGMiLCJjaGlsZCIsInNpYmxpbmciLCJnYyIsImljIiwiamMiLCJrYyIsImxjIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwibWMiLCJuYyIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJvYyIsInBjIiwicWMiLCJ0b3BMZXZlbFR5cGUiLCJuYXRpdmVFdmVudCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJyYyIsImV2ZW50U3lzdGVtRmxhZ3MiLCJzYyIsImNvbnRhaW5lckluZm8iLCJ0YyIsInVjIiwiaGFzIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIktjIiwiYmxvY2tlZE9uIiwiY29udGFpbmVyIiwiTGMiLCJkZWxldGUiLCJwb2ludGVySWQiLCJNYyIsIk5jIiwiUGMiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJRYyIsIlJjIiwiU2MiLCJUYyIsInNoaWZ0IiwiVWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJWYyIsIldjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5IiwiYmQiLCJjZCIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImlkIiwiT2MiLCJqZCIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibGluZUNsYW1wIiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwia2QiLCJsZCIsInNldFByb3BlcnR5IiwibmQiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJvZCIsInBkIiwiaXMiLCJxZCIsInJkIiwic2QiLCJ0ZCIsImJvZHkiLCJ1ZCIsInZkIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJ4ZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsInlkIiwiY29udGVudEVkaXRhYmxlIiwiRGQiLCJFZCIsIkZkIiwiYXV0b0ZvY3VzIiwiR2QiLCJfX2h0bWwiLCJIZCIsIklkIiwiSmQiLCJLZCIsInByZXZpb3VzU2libGluZyIsIkxkIiwicmFuZG9tIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsImRpc3BhdGNoQ29uZmlnIiwiVWQiLCJfdGFyZ2V0SW5zdCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImVlIiwiZXZlbnRQb29sIiwiZmUiLCJkZXN0cnVjdG9yIiwiZGUiLCJnZXRQb29sZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwiZ2UiLCJoZSIsImllIiwiamUiLCJrZSIsImRvY3VtZW50TW9kZSIsImxlIiwibWUiLCJuZSIsIm9lIiwiYmVmb3JlSW5wdXQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInBlIiwicWUiLCJrZXlDb2RlIiwiZGV0YWlsIiwic2UiLCJ2ZSIsImxvY2FsZSIsIndoaWNoIiwidGUiLCJjaGFyIiwidWUiLCJ3ZSIsInJhbmdlIiwieGUiLCJ5ZSIsImNoYW5nZSIsInplIiwiQWUiLCJCZSIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiR2UiLCJkZXRhY2hFdmVudCIsIkhlIiwiSWUiLCJhdHRhY2hFdmVudCIsIkplIiwiS2UiLCJMZSIsIk1lIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIk5lIiwidmlldyIsIk9lIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBlIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiV2UiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiWGUiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsIlllIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwic2VsZWN0IiwiZWYiLCJmZiIsImdmIiwiaGYiLCJqZiIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0Iiwia2YiLCJvblNlbGVjdCIsImxmIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm1mIiwiY2xpcGJvYXJkRGF0YSIsIm5mIiwib2YiLCJjaGFyQ29kZSIsInBmIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInFmIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInJmIiwicmVwZWF0Iiwic2YiLCJkYXRhVHJhbnNmZXIiLCJ0ZiIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ1ZiIsInZmIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ3ZiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRGYiLCJFZiIsIkZmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiR2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIkhmIiwiSWYiLCJKZiIsIktmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJMZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIk1mIiwidW5zdGFibGVfbm93IiwiTmYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIk9mIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJQZiIsIlFmIiwiUmYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIlNmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiVGYiLCJVZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsIm1nIiwibmciLCJvZyIsInBnIiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsInFnIiwiZmlyc3RDb250ZXh0IiwiZXhwaXJhdGlvblRpbWUiLCJyZyIsInNnIiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsInRnIiwidWciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImJhc2VRdWV1ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwidmciLCJ3ZyIsInN1c3BlbnNlQ29uZmlnIiwicGF5bG9hZCIsImNhbGxiYWNrIiwieGciLCJ5ZyIsInpnIiwiY2EiLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJKZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJHZyIsIkhnIiwiSWciLCJLZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIkxnIiwic3RhdGUiLCJNZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk5nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJPZyIsIlBnIiwiX3N0cmluZ1JlZiIsIlFnIiwiUmciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiU2ciLCJUZyIsIm1vZGUiLCJlbGVtZW50VHlwZSIsIlVnIiwiaW1wbGVtZW50YXRpb24iLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImRvY3VtZW50RWxlbWVudCIsImVoIiwiZmgiLCJnaCIsImhoIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiaWgiLCJyZXNwb25kZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwicXVldWUiLCJ1aCIsInZoIiwid2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJ4aCIsInloIiwiemgiLCJBaCIsImRlc3Ryb3kiLCJkZXBzIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJyZWFkQ29udGV4dCIsInVzZVJlc3BvbmRlciIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwicGVuZGluZ1Byb3BzIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsImVpIiwiZmkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJnaSIsImhpIiwicGVuZGluZ0NvbnRleHQiLCJuaSIsInBpIiwicWkiLCJpaSIsInJldHJ5VGltZSIsImppIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsImtpIiwibGkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbEV4cGlyYXRpb24iLCJ0YWlsTW9kZSIsIm1pIiwicmkiLCJzaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsInN0YWNrIiwiQmkiLCJXZWFrU2V0IiwiU2V0IiwiQ2kiLCJGaSIsIkVpIiwiR2kiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIkhpIiwiSWkiLCJKaSIsIktpIiwiTGkiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIkRpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJSaSIsIlNpIiwiVGkiLCJVaSIsIlZpIiwiYWRkIiwiV2kiLCJYaSIsImVsZW1lbnQiLCJZaSIsIlppIiwiJGkiLCJjb21wb25lbnREaWRDYXRjaCIsImFqIiwiY29tcG9uZW50U3RhY2siLCJSaiIsImJqIiwiY2VpbCIsImNqIiwiZGoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwid2oiLCJ0aW1lb3V0TXMiLCJ4aiIsInlqIiwiemoiLCJsYXN0RXhwaXJlZFRpbWUiLCJBaiIsImZpcnN0UGVuZGluZ1RpbWUiLCJsYXN0UGluZ2VkVGltZSIsIm5leHRLbm93blBlbmRpbmdMZXZlbCIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja1ByaW9yaXR5IiwiY2FsbGJhY2tOb2RlIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZEV4cGlyYXRpb25UaW1lIiwibGFzdFN1c3BlbmRlZFRpbWUiLCJJaiIsInRpbWVvdXRIYW5kbGUiLCJKaiIsImJ1c3lNaW5EdXJhdGlvbk1zIiwiYnVzeURlbGF5TXMiLCJLaiIsIk1qIiwiTmoiLCJwaW5nQ2FjaGUiLCJPaiIsInViIiwiUGoiLCJYYyIsIlFqIiwiU2oiLCJmaXJzdFN1c3BlbmRlZFRpbWUiLCJyYW5nZUNvdW50Iiwid2IiLCJhY3RpdmVFbGVtZW50RGV0YWNoZWQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiVGoiLCJ3ZCIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsInZiIiwiVWoiLCJWaiIsIldqIiwiaGlkZGVuIiwib2IiLCJYaiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlpqIiwicGVuZGluZ0NoaWxkcmVuIiwiYWsiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiSmMiLCJfaW50ZXJuYWxSb290IiwiZ2siLCJpayIsImhhc0F0dHJpYnV0ZSIsImhrIiwiamsiLCJrayIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIllqIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZVByb3BzIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYm9vbCIsIm9iamVjdCIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiUG9ydGFsIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJpc0F4aW9zRXJyb3IiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJjaGFpbiIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZ2V0VXJpIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsInJlYXNvbiIsImZucyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwibm9ybWFsaXplZE5hbWUiLCJ0b0pTT04iLCJkZXNjcmlwdGlvbiIsImNvbHVtbk51bWJlciIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwicmVxdWVzdGVkVVJMIiwicmVsYXRpdmVVUkwiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlZCIsImxpbmUiLCJvcmlnaW5VUkwiLCJtc2llIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwicHJvdG9jb2wiLCJob3N0IiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwicmVxdWVzdFVSTCIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJ0b2tlbiIsImRlZmF1bHRWYXJpYW50TWFwcGluZyIsIlR5cG9ncmFwaHkiLCJfcHJvcHMkYWxpZ24iLCJhbGlnbiIsIl9wcm9wcyRkaXNwbGF5IiwiX3Byb3BzJGd1dHRlckJvdHRvbSIsImd1dHRlckJvdHRvbSIsIl9wcm9wcyRub1dyYXAiLCJub1dyYXAiLCJfcHJvcHMkcGFyYWdyYXBoIiwicGFyYWdyYXBoIiwiX3Byb3BzJHZhcmlhbnQiLCJfcHJvcHMkdmFyaWFudE1hcHBpbmciLCJ2YXJpYW50TWFwcGluZyIsIm1hcmdpbiIsInNyT25seSIsInBvc2l0aW9uIiwib3ZlcmZsb3ciLCJhbGlnbkxlZnQiLCJ0ZXh0QWxpZ24iLCJhbGlnbkNlbnRlciIsImFsaWduUmlnaHQiLCJhbGlnbkp1c3RpZnkiLCJ0ZXh0T3ZlcmZsb3ciLCJ3aGl0ZVNwYWNlIiwibWFyZ2luQm90dG9tIiwiY29sb3JJbmhlcml0IiwiY29sb3JUZXh0UHJpbWFyeSIsImNvbG9yVGV4dFNlY29uZGFyeSIsImRpc3BsYXlJbmxpbmUiLCJkaXNwbGF5QmxvY2siLCJpc0Jyb3dzZXIiLCJwbGFpbk9iamVjdENvbnN0cnVyY3RvciIsImNsb25lU3R5bGUiLCJuZXdTdHlsZSIsImNyZWF0ZVJ1bGUiLCJkZWNsIiwianNzIiwiZGVjbENvcHkiLCJydWxlIiwicGx1Z2lucyIsIm9uQ3JlYXRlUnVsZSIsImJ5IiwidG9Dc3NWYWx1ZSIsImlnbm9yZUltcG9ydGFudCIsImNzc1ZhbHVlIiwiaW5kZW50U3RyIiwiaW5kZW50IiwidG9Dc3MiLCJzZWxlY3RvciIsIl9vcHRpb25zJGluZGVudCIsImZhbGxiYWNrcyIsIl9wcm9wIiwiX3ZhbHVlIiwiX3Byb3AyIiwiX3ZhbHVlMiIsImFsbG93RW1wdHkiLCJlc2NhcGVSZWdleCIsIm5hdGl2ZUVzY2FwZSIsIkNTUyIsIkJhc2VTdHlsZVJ1bGUiLCJpc1Byb2Nlc3NlZCIsInJlbmRlcmVyIiwicmVuZGVyYWJsZSIsInNoZWV0IiwiUmVuZGVyZXIiLCJmb3JjZSIsIm5ld1ZhbHVlIiwib25DaGFuZ2VWYWx1ZSIsImlzRW1wdHkiLCJpc0RlZmluZWQiLCJyZW1vdmVQcm9wZXJ0eSIsImF0dGFjaGVkIiwiU3R5bGVSdWxlIiwiX0Jhc2VTdHlsZVJ1bGUiLCJfdGhpcyIsInNlbGVjdG9yVGV4dCIsInNjb3BlZCIsImdlbmVyYXRlSWQiLCJfcHJvdG8yIiwiYXBwbHlUbyIsImpzb24iLCJvcHRzIiwic2V0U2VsZWN0b3IiLCJyZXBsYWNlUnVsZSIsInBsdWdpblN0eWxlUnVsZSIsInBhcmVudCIsImRlZmF1bHRUb1N0cmluZ09wdGlvbnMiLCJhdFJlZ0V4cCIsIkNvbmRpdGlvbmFsUnVsZSIsImF0IiwicXVlcnkiLCJydWxlcyIsImF0TWF0Y2giLCJSdWxlTGlzdCIsIl9wcm90byIsImdldFJ1bGUiLCJhZGRSdWxlIiwib25Qcm9jZXNzUnVsZSIsImtleVJlZ0V4cCIsInBsdWdpbkNvbmRpdGlvbmFsUnVsZSIsImRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMSIsIm5hbWVSZWdFeHAiLCJLZXlmcmFtZXNSdWxlIiwiZnJhbWVzIiwibmFtZU1hdGNoIiwia2V5UmVnRXhwJDEiLCJyZWZSZWdFeHAiLCJmaW5kUmVmZXJlbmNlZEtleWZyYW1lIiwia2V5ZnJhbWVzIiwicmVwbGFjZVJlZiIsInJlZktleWZyYW1lIiwicGx1Z2luIiwib25Qcm9jZXNzU3R5bGUiLCJLZXlmcmFtZVJ1bGUiLCJwbHVnaW5LZXlmcmFtZVJ1bGUiLCJGb250RmFjZVJ1bGUiLCJrZXlSZWdFeHAkMiIsInBsdWdpbkZvbnRGYWNlUnVsZSIsIlZpZXdwb3J0UnVsZSIsInBsdWdpblZpZXdwb3J0UnVsZSIsIlNpbXBsZVJ1bGUiLCJrZXlzTWFwIiwiZGVmYXVsdFVwZGF0ZU9wdGlvbnMiLCJmb3JjZVVwZGF0ZU9wdGlvbnMiLCJyYXciLCJjb3VudGVyIiwicnVsZU9wdGlvbnMiLCJfdGhpcyRvcHRpb25zIiwicmVnaXN0ZXIiLCJzcGxpY2UiLCJ1bnJlZ2lzdGVyIiwidXBkYXRlIiwidXBkYXRlT25lIiwiX3RoaXMkb3B0aW9uczIiLCJzdHlsZVJ1bGUiLCJvblVwZGF0ZSIsIm5leHRWYWx1ZSIsIl9uZXh0VmFsdWUiLCJfcHJldlZhbHVlIiwiY3NzIiwiU3R5bGVTaGVldCIsImRlcGxveWVkIiwiYXR0YWNoIiwiZGVwbG95IiwiZGV0YWNoIiwiaW5zZXJ0UnVsZSIsImFkZFJ1bGVzIiwiYWRkZWQiLCJkZWxldGVSdWxlIiwiX3RoaXMkcnVsZXMiLCJQbHVnaW5zUmVnaXN0cnkiLCJpbnRlcm5hbCIsImV4dGVybmFsIiwicmVnaXN0cnkiLCJvblByb2Nlc3NTaGVldCIsInByb2Nlc3NlZFZhbHVlIiwibmV3UGx1Z2luIiwiU2hlZXRzUmVnaXN0cnkiLCJyZXNldCIsIl90ZW1wIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwibnMiLCJtb2R1bGVJZCIsImNyZWF0ZUdlbmVyYXRlSWQiLCJydWxlQ291bnRlciIsImpzc0lkIiwicHJlZml4IiwibWluaWZ5IiwibWVtb2l6ZSIsImdldFByb3BlcnR5VmFsdWUiLCJjc3NSdWxlIiwiYXR0cmlidXRlU3R5bGVNYXAiLCJnZXRIZWFkIiwicXVlcnlTZWxlY3RvciIsImZpbmRQcmV2Tm9kZSIsInJlZ2lzdHJ5JDEiLCJpbnNlcnRpb25Qb2ludCIsImZpbmRIaWdoZXJTaGVldCIsImZpbmRIaWdoZXN0U2hlZXQiLCJjb21tZW50IiwiaGVhZCIsImNoaWxkTm9kZXMiLCJmaW5kQ29tbWVudE5vZGUiLCJnZXROb25jZSIsImdldEF0dHJpYnV0ZSIsIl9pbnNlcnRSdWxlIiwiYXBwZW5kUnVsZSIsImNzc1J1bGVzIiwiZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgiLCJtYXhJbmRleCIsIkRvbVJlbmRlcmVyIiwiaGFzSW5zZXJ0ZWRSdWxlcyIsIm1lZGlhIiwiZWwiLCJjcmVhdGVTdHlsZSIsIm5vbmNlIiwibmV4dE5vZGUiLCJpbnNlcnRpb25Qb2ludEVsZW1lbnQiLCJpbnNlcnRTdHlsZSIsIkJvb2xlYW4iLCJpbnNlcnRSdWxlcyIsIm5hdGl2ZVBhcmVudCIsImxhdGVzdE5hdGl2ZVBhcmVudCIsIl9pbnNlcnRpb25JbmRleCIsInJlZkNzc1J1bGUiLCJydWxlU3RyIiwiaW5zZXJ0aW9uSW5kZXgiLCJuYXRpdmVSdWxlIiwiZ2V0UnVsZXMiLCJpbnN0YW5jZUNvdW50ZXIiLCJKc3MiLCJpc0luQnJvd3NlciIsInNldHVwIiwiY3JlYXRlU3R5bGVTaGVldCIsInJlbW92ZVN0eWxlU2hlZXQiLCJoYXNDU1NUT01TdXBwb3J0IiwibXVsdGlLZXlTdG9yZSIsImNhY2hlIiwia2V5MSIsImtleTIiLCJzdWJDYWNoZSIsInBzZXVkb0NsYXNzZXMiLCJmblZhbHVlc05zIiwiZm5SdWxlTnMiLCJmdW5jdGlvblBsdWdpbiIsImZuVmFsdWVzIiwiZm5SdWxlIiwiR2xvYmFsQ29udGFpbmVyUnVsZSIsIkdsb2JhbFByZWZpeGVkUnVsZSIsInNlcGFyYXRvclJlZ0V4cCIsImFkZFNjb3BlIiwic2NvcGUiLCJqc3NHbG9iYWwiLCJoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlIiwiaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlIiwicGFyZW50UmVnRXhwIiwianNzTmVzdGVkIiwiZ2V0UmVwbGFjZVJlZiIsInJlcGxhY2VQYXJlbnRSZWZzIiwibmVzdGVkUHJvcCIsInBhcmVudFByb3AiLCJwYXJlbnRTZWxlY3RvcnMiLCJuZXN0ZWRTZWxlY3RvcnMiLCJqIiwibmVzdGVkIiwiZ2V0T3B0aW9ucyIsInByZXZPcHRpb25zIiwibmVzdGluZ0xldmVsIiwiaXNOZXN0ZWQiLCJpc05lc3RlZENvbmRpdGlvbmFsIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsInRvSHlwaGVuTG93ZXIiLCJoeXBoZW5hdGVTdHlsZU5hbWUiLCJoTmFtZSIsImNvbnZlcnRDYXNlIiwiY29udmVydGVkIiwiaHlwaGVuYXRlIiwiY2FtZWxDYXNlIiwiaHlwaGVuYXRlZFByb3AiLCJweCIsIm1zIiwicGVyY2VudCIsImFkZENhbWVsQ2FzZWRWZXJzaW9uIiwicmVnRXhwIiwibmV3T2JqIiwidW5pdHMiLCJib3JkZXIiLCJwYWRkaW5nIiwiYm90dG9tIiwicmlnaHQiLCJpbnNldCIsIm1vdGlvbiIsIm91dGxpbmUiLCJwZXJzcGVjdGl2ZSIsImdhcCIsIml0ZXJhdGUiLCJpbm5lclByb3AiLCJfaW5uZXJQcm9wIiwiZGVmYXVsdFVuaXQiLCJjYW1lbENhc2VkT3B0aW9ucyIsImpzIiwidmVuZG9yIiwiaXNUb3VjaCIsImpzQ3NzTWFwIiwiTW96IiwiV2Via2l0IiwiYXBwZWFyZW5jZSIsIm5vUHJlZmlsbCIsInN1cHBvcnRlZFByb3BlcnR5IiwiY29sb3JBZGp1c3QiLCJ0b1VwcGVyIiwiY2FtZWxpemUiLCJwYXNjYWxpemUiLCJtYXNrIiwidGV4dE9yaWVudGF0aW9uIiwid3JpdGluZ01vZGUiLCJicmVha1Byb3BzT2xkIiwiaW5saW5lTG9naWNhbE9sZCIsIm5ld1Byb3AiLCJ1bnByZWZpeGVkIiwicHJlZml4ZWQiLCJwYXNjYWxpemVkIiwic2Nyb2xsU25hcCIsIm92ZXJzY3JvbGxCZWhhdmlvciIsInByb3BNYXAiLCJmbGV4MjAxMiIsInByb3BNYXAkMSIsInByb3BLZXlzIiwicHJlZml4Q3NzIiwicHJvcGVydHlEZXRlY3RvcnMiLCJjb21wdXRlZCIsImdldENvbXB1dGVkU3R5bGUiLCJrZXkkMSIsImVsJDEiLCJjYWNoZSQxIiwidHJhbnNpdGlvblByb3BlcnRpZXMiLCJ0cmFuc1Byb3BzUmVnRXhwIiwicHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrIiwicDEiLCJwMiIsInByZWZpeGVkVmFsdWUiLCJzdXBwb3J0ZWRWYWx1ZSIsInByb3BlcnR5IiwiY2FjaGVLZXkiLCJqc3NWZW5kb3JQcmVmaXhlciIsInByZWZpeFN0eWxlIiwiY2hhbmdlUHJvcCIsInN1cHBvcnRlZFByb3AiLCJjaGFuZ2VWYWx1ZSIsInN1cHBvcnRlZFZhbHVlJDEiLCJhdFJ1bGUiLCJqc3NQcm9wc1NvcnQiLCJzb3J0IiwicHJvcDAiLCJwcm9wMSIsImpzc1ByZXNldCIsImZ1bmN0aW9ucyIsImdsb2JhbCIsInZlbmRvclByZWZpeGVyIiwicHJvcHNTb3J0IiwiZGVmYXVsdE9wdGlvbnMiLCJkaXNhYmxlR2VuZXJhdGlvbiIsImdlbmVyYXRlQ2xhc3NOYW1lIiwiX29wdGlvbnMkZGlzYWJsZUdsb2JhIiwiZGlzYWJsZUdsb2JhbCIsIl9vcHRpb25zJHByb2R1Y3Rpb25QciIsInByb2R1Y3Rpb25QcmVmaXgiLCJfb3B0aW9ucyRzZWVkIiwic2VlZCIsInNlZWRQcmVmaXgiLCJnZXROZXh0Q291bnRlcklkIiwic3R5bGVTaGVldCIsImNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lIiwic2hlZXRzQ2FjaGUiLCJzaGVldHNNYW5hZ2VyIiwic2hlZXRzUmVnaXN0cnkiLCJTdHlsZXNDb250ZXh0IiwiaW5kZXhDb3VudGVyIiwiaW5jcmVtZW50IiwiZ2V0U3R5bGVzQ3JlYXRvciIsInRoZW1pbmdFbmFibGVkIiwic3R5bGVzV2l0aE92ZXJyaWRlcyIsIm5vb3BUaGVtZSIsImdldENsYXNzZXMiLCJjYWNoZUNsYXNzZXMiLCJsYXN0UHJvcCIsImxhc3RKU1MiLCJnZW5lcmF0ZSIsIm1lcmdlQ2xhc3NlcyIsImJhc2VDbGFzc2VzIiwibmV3Q2xhc3NlcyIsInN0eWxlc0NyZWF0b3IiLCJzaGVldE1hbmFnZXIiLCJzdGF0aWNTaGVldCIsImR5bmFtaWNTdHlsZXMiLCJmbGlwIiwic2VydmVyR2VuZXJhdGVDbGFzc05hbWUiLCJnZXREeW5hbWljU3R5bGVzIiwiZXh0cmFjdGVkIiwiZHluYW1pY1NoZWV0IiwiX3JlZjQiLCJ1c2VTeW5jaHJvbm91c0VmZmVjdCIsImN1cnJlbnRLZXkiLCJjbGFzc05hbWVQcmVmaXhPcHRpb24iLCJfb3B0aW9ucyRkZWZhdWx0VGhlbWUiLCJzdHlsZXNPcHRpb25zMiIsInNob3VsZFVwZGF0ZSIsImdldENoaWxkTWFwcGluZyIsIm1hcEZuIiwibWFwcGVyIiwiZ2V0UHJvcCIsImdldE5leHRDaGlsZE1hcHBpbmciLCJuZXh0UHJvcHMiLCJwcmV2Q2hpbGRNYXBwaW5nIiwib25FeGl0ZWQiLCJuZXh0Q2hpbGRNYXBwaW5nIiwicHJldiIsImdldFZhbHVlRm9yS2V5IiwibmV4dEtleXNQZW5kaW5nIiwicGVuZGluZ0tleXMiLCJwcmV2S2V5IiwiY2hpbGRNYXBwaW5nIiwibmV4dEtleSIsInBlbmRpbmdOZXh0S2V5IiwibWVyZ2VDaGlsZE1hcHBpbmdzIiwiaGFzUHJldiIsImhhc05leHQiLCJwcmV2Q2hpbGQiLCJpc0xlYXZpbmciLCJpbiIsImV4aXQiLCJlbnRlciIsIlRyYW5zaXRpb25Hcm91cCIsIl9SZWFjdCRDb21wb25lbnQiLCJoYW5kbGVFeGl0ZWQiLCJjb250ZXh0VmFsdWUiLCJpc01vdW50aW5nIiwiZmlyc3RSZW5kZXIiLCJtb3VudGVkIiwiYXBwZWFyIiwiY3VycmVudENoaWxkTWFwcGluZyIsIl90aGlzJHByb3BzIiwiY2hpbGRGYWN0b3J5IiwiVHJhbnNpdGlvbkdyb3VwQ29udGV4dCIsIlJpcHBsZSIsIl9wcm9wcyRwdWxzYXRlIiwicHVsc2F0ZSIsInJpcHBsZVgiLCJyaXBwbGVZIiwicmlwcGxlU2l6ZSIsImluUHJvcCIsIl9wcm9wcyRvbkV4aXRlZCIsIl9SZWFjdCR1c2VTdGF0ZSIsImxlYXZpbmciLCJzZXRMZWF2aW5nIiwicmlwcGxlQ2xhc3NOYW1lIiwicmlwcGxlIiwicmlwcGxlVmlzaWJsZSIsInJpcHBsZVB1bHNhdGUiLCJyaXBwbGVTdHlsZXMiLCJjaGlsZENsYXNzTmFtZSIsImNoaWxkTGVhdmluZyIsImNoaWxkUHVsc2F0ZSIsInRpbWVvdXRJZCIsIlRvdWNoUmlwcGxlIiwiX3Byb3BzJGNlbnRlciIsImNlbnRlciIsImNlbnRlclByb3AiLCJyaXBwbGVzIiwic2V0UmlwcGxlcyIsInJpcHBsZUNhbGxiYWNrIiwiaWdub3JpbmdNb3VzZURvd24iLCJzdGFydFRpbWVyIiwic3RhcnRUaW1lckNvbW1pdCIsInN0YXJ0Q29tbWl0Iiwib2xkUmlwcGxlcyIsIl9vcHRpb25zJHB1bHNhdGUiLCJfb3B0aW9ucyRjZW50ZXIiLCJfb3B0aW9ucyRmYWtlRWxlbWVudCIsImZha2VFbGVtZW50IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNxcnQiLCJzaXplWCIsImFicyIsImNsaWVudFdpZHRoIiwic2l6ZVkiLCJjbGllbnRIZWlnaHQiLCJzdG9wIiwicG9pbnRlckV2ZW50cyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYmFja2dyb3VuZENvbG9yIiwiQnV0dG9uQmFzZSIsImJ1dHRvblJlZlByb3AiLCJidXR0b25SZWYiLCJfcHJvcHMkY2VudGVyUmlwcGxlIiwiY2VudGVyUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVkIiwiX3Byb3BzJGRpc2FibGVSaXBwbGUiLCJkaXNhYmxlUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVUb3VjaFJpIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwiX3Byb3BzJGZvY3VzUmlwcGxlIiwiZm9jdXNSaXBwbGUiLCJmb2N1c1Zpc2libGVDbGFzc05hbWUiLCJvbkJsdXIiLCJvbkZvY3VzIiwib25Gb2N1c1Zpc2libGUiLCJvbktleURvd24iLCJvbktleVVwIiwib25Nb3VzZURvd24iLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlVXAiLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJvbkRyYWdMZWF2ZSIsIl9wcm9wcyR0YWJJbmRleCIsInRhYkluZGV4IiwiVG91Y2hSaXBwbGVQcm9wcyIsIl9wcm9wcyR0eXBlIiwicmlwcGxlUmVmIiwiZm9jdXNWaXNpYmxlIiwic2V0Rm9jdXNWaXNpYmxlIiwiX3VzZUlzRm9jdXNWaXNpYmxlIiwiZm9jdXNWaXNpYmxlUmVmIiwidXNlUmlwcGxlSGFuZGxlciIsInJpcHBsZUFjdGlvbiIsImV2ZW50Q2FsbGJhY2siLCJza2lwUmlwcGxlQWN0aW9uIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlRHJhZ0xlYXZlIiwiaGFuZGxlTW91c2VVcCIsImhhbmRsZU1vdXNlTGVhdmUiLCJoYW5kbGVUb3VjaFN0YXJ0IiwiaGFuZGxlVG91Y2hFbmQiLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVCbHVyIiwiaGFuZGxlRm9jdXMiLCJpc05vbk5hdGl2ZUJ1dHRvbiIsImtleWRvd25SZWYiLCJoYW5kbGVLZXlVcCIsIkNvbXBvbmVudFByb3AiLCJidXR0b25Qcm9wcyIsImhhbmRsZVVzZXJSZWYiLCJoYW5kbGVPd25SZWYiLCJoYW5kbGVSZWYiLCJfUmVhY3QkdXNlU3RhdGUyIiwibW91bnRlZFN0YXRlIiwic2V0TW91bnRlZFN0YXRlIiwiZW5hYmxlVG91Y2hSaXBwbGUiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsImN1cnNvciIsInZlcnRpY2FsQWxpZ24iLCJ0ZXh0RGVjb3JhdGlvbiIsImJvcmRlclN0eWxlIiwibmV4dENsYXNzZXMiLCJTUEFDSU5HUyIsIkdSSURfU0laRVMiLCJnZXRPZmZzZXQiLCJkaXYiLCJHcmlkIiwiX3Byb3BzJGFsaWduQ29udGVudCIsImFsaWduQ29udGVudCIsIl9wcm9wcyRhbGlnbkl0ZW1zIiwiY2xhc3NOYW1lUHJvcCIsIl9wcm9wcyRjb250YWluZXIiLCJfcHJvcHMkZGlyZWN0aW9uIiwiX3Byb3BzJGl0ZW0iLCJfcHJvcHMkanVzdGlmeSIsImp1c3RpZnkiLCJfcHJvcHMkbGciLCJfcHJvcHMkbWQiLCJfcHJvcHMkc20iLCJfcHJvcHMkc3BhY2luZyIsIl9wcm9wcyR3cmFwIiwid3JhcCIsIl9wcm9wcyR4bCIsIl9wcm9wcyR4cyIsIl9wcm9wcyR6ZXJvTWluV2lkdGgiLCJ6ZXJvTWluV2lkdGgiLCJTdHlsZWRHcmlkIiwiYm94U2l6aW5nIiwiZmxleFdyYXAiLCJtaW5XaWR0aCIsImZsZXhEaXJlY3Rpb24iLCJ0aGVtZVNwYWNpbmciLCJnZW5lcmF0ZUd1dHRlciIsImFjY3VtdWxhdG9yIiwiZ2xvYmFsU3R5bGVzIiwiZmxleEJhc2lzIiwibWF4V2lkdGgiLCJnZW5lcmF0ZUdyaWQiLCJMaW5rIiwiVHlwb2dyYXBoeUNsYXNzZXMiLCJfcHJvcHMkdW5kZXJsaW5lIiwidW5kZXJsaW5lIiwiaGFuZGxlclJlZiIsInVuZGVybGluZU5vbmUiLCJ1bmRlcmxpbmVIb3ZlciIsInVuZGVybGluZUFsd2F5cyIsIm1ha2VTdHlsZXNXaXRob3V0RGVmYXVsdCIsIlRoZW1lUHJvdmlkZXIiLCJsb2NhbFRoZW1lIiwib3V0ZXJUaGVtZSIsIm1lcmdlT3V0ZXJMb2NhbFRoZW1lIiwiaHRtbCIsIldlYmtpdEZvbnRTbW9vdGhpbmciLCJNb3pPc3hGb250U21vb3RoaW5nIiwiX3Byb3BzJGNoaWxkcmVuIiwiQnV0dG9uIiwiX3Byb3BzJGRpc2FibGVFbGV2YXRpIiwiZGlzYWJsZUVsZXZhdGlvbiIsIl9wcm9wcyRkaXNhYmxlRm9jdXNSaSIsImRpc2FibGVGb2N1c1JpcHBsZSIsImVuZEljb25Qcm9wIiwiZW5kSWNvbiIsIl9wcm9wcyRmdWxsV2lkdGgiLCJmdWxsV2lkdGgiLCJfcHJvcHMkc2l6ZSIsInN0YXJ0SWNvblByb3AiLCJzdGFydEljb24iLCJsYWJlbCIsInRleHRQcmltYXJ5IiwidGV4dFNlY29uZGFyeSIsIm91dGxpbmVkIiwib3V0bGluZWRQcmltYXJ5Iiwib3V0bGluZWRTZWNvbmRhcnkiLCJjb250YWluZWQiLCJib3hTaGFkb3ciLCJjb250YWluZWRQcmltYXJ5IiwiY29udGFpbmVkU2Vjb25kYXJ5IiwiYm9yZGVyQ29sb3IiLCJ0ZXh0U2l6ZVNtYWxsIiwidGV4dFNpemVMYXJnZSIsIm91dGxpbmVkU2l6ZVNtYWxsIiwib3V0bGluZWRTaXplTGFyZ2UiLCJjb250YWluZWRTaXplU21hbGwiLCJjb250YWluZWRTaXplTGFyZ2UiLCJzaXplU21hbGwiLCJzaXplTGFyZ2UiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkxlZnQiLCJpY29uU2l6ZVNtYWxsIiwiaWNvblNpemVNZWRpdW0iLCJpY29uU2l6ZUxhcmdlIiwiZm9ybUNvbnRyb2xTdGF0ZSIsInN0YXRlcyIsIm11aUZvcm1Db250cm9sIiwiRm9ybUNvbnRyb2xDb250ZXh0IiwiZGVib3VuY2UiLCJ3YWl0IiwiZGVib3VuY2VkIiwidGhhdCIsImxhdGVyIiwiY2xlYXIiLCJnZXRTdHlsZVZhbHVlIiwiY29tcHV0ZWRTdHlsZSIsInZpc2liaWxpdHkiLCJUZXh0YXJlYUF1dG9zaXplIiwib25DaGFuZ2UiLCJyb3dzIiwicm93c01heCIsIl9wcm9wcyRyb3dzTWluIiwicm93c01pbiIsInJvd3NNaW5Qcm9wIiwiaXNDb250cm9sbGVkIiwiaW5wdXRSZWYiLCJzaGFkb3dSZWYiLCJyZW5kZXJzIiwic3luY0hlaWdodCIsImlucHV0U2hhbGxvdyIsInBsYWNlaG9sZGVyIiwiaW5uZXJIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJzaW5nbGVSb3dIZWlnaHQiLCJvdXRlckhlaWdodCIsIm91dGVySGVpZ2h0U3R5bGUiLCJwcmV2U3RhdGUiLCJoYW5kbGVSZXNpemUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGFzVmFsdWUiLCJpc0ZpbGxlZCIsIlNTUiIsIklucHV0QmFzZSIsImFyaWFEZXNjcmliZWRieSIsImF1dG9Db21wbGV0ZSIsImVuZEFkb3JubWVudCIsIl9wcm9wcyRpbnB1dENvbXBvbmVudCIsImlucHV0Q29tcG9uZW50IiwiX3Byb3BzJGlucHV0UHJvcHMiLCJpbnB1dFByb3BzIiwiaW5wdXRQcm9wc1Byb3AiLCJpbnB1dFJlZlByb3AiLCJfcHJvcHMkbXVsdGlsaW5lIiwibXVsdGlsaW5lIiwicmVuZGVyU3VmZml4Iiwic3RhcnRBZG9ybm1lbnQiLCJ2YWx1ZVByb3AiLCJoYW5kbGVJbnB1dFJlZldhcm5pbmciLCJoYW5kbGVJbnB1dFByb3BzUmVmUHJvcCIsImhhbmRsZUlucHV0UmVmUHJvcCIsImhhbmRsZUlucHV0UmVmIiwiZm9jdXNlZCIsInNldEZvY3VzZWQiLCJmY3MiLCJvbkZpbGxlZCIsIm9uRW1wdHkiLCJjaGVja0RpcnR5IiwiSW5wdXRDb21wb25lbnQiLCJzZXRBZG9ybmVkU3RhcnQiLCJmb3JtQ29udHJvbCIsImFkb3JuZWRTdGFydCIsImFkb3JuZWRFbmQiLCJtYXJnaW5EZW5zZSIsIm9uQW5pbWF0aW9uU3RhcnQiLCJyZXF1aXJlZCIsImlucHV0TXVsdGlsaW5lIiwiaGlkZGVuTGFiZWwiLCJpbnB1dEhpZGRlbkxhYmVsIiwiaW5wdXRBZG9ybmVkU3RhcnQiLCJpbnB1dEFkb3JuZWRFbmQiLCJpbnB1dFR5cGVTZWFyY2giLCJpbnB1dE1hcmdpbkRlbnNlIiwicGxhY2Vob2xkZXJIaWRkZW4iLCJwbGFjZWhvbGRlclZpc2libGUiLCJwYWRkaW5nVG9wIiwiZm9udCIsInJlc2l6ZSIsIklucHV0IiwiZGlzYWJsZVVuZGVybGluZSIsImJvdHRvbUxpbmVDb2xvciIsIm1hcmdpblRvcCIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyQm90dG9tU3R5bGUiLCJGaWxsZWRJbnB1dCIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsInBhZGRpbmdCb3R0b20iLCJXZWJraXRCb3hTaGFkb3ciLCJXZWJraXRUZXh0RmlsbENvbG9yIiwiY2FyZXRDb2xvciIsInVzZVRoZW1lV2l0aG91dERlZmF1bHQiLCJOb3RjaGVkT3V0bGluZSIsImxhYmVsV2lkdGhQcm9wIiwibGFiZWxXaWR0aCIsIm5vdGNoZWQiLCJsZWdlbmRMYWJlbGxlZCIsImxlZ2VuZE5vdGNoZWQiLCJsZWdlbmQiLCJib3JkZXJXaWR0aCIsIk91dGxpbmVkSW5wdXQiLCJfcHJvcHMkbGFiZWxXaWR0aCIsIm5vdGNoZWRPdXRsaW5lIiwiZmlsbGVkIiwidXNlRm9ybUNvbnRyb2wiLCJGb3JtTGFiZWwiLCJhc3RlcmlzayIsIklucHV0TGFiZWwiLCJfcHJvcHMkZGlzYWJsZUFuaW1hdGkiLCJkaXNhYmxlQW5pbWF0aW9uIiwic2hyaW5rUHJvcCIsInNocmluayIsImFuaW1hdGVkIiwidHJhbnNmb3JtT3JpZ2luIiwiaXNNdWlFbGVtZW50IiwibXVpTmFtZXMiLCJGb3JtQ29udHJvbCIsIl9wcm9wcyRlcnJvciIsInZpc3VhbGx5Rm9jdXNlZCIsIl9wcm9wcyRoaWRkZW5MYWJlbCIsIl9wcm9wcyRtYXJnaW4iLCJfcHJvcHMkcmVxdWlyZWQiLCJpbml0aWFsQWRvcm5lZFN0YXJ0IiwiaW5pdGlhbEZpbGxlZCIsInNldEZpbGxlZCIsIl9SZWFjdCR1c2VTdGF0ZTMiLCJfZm9jdXNlZCIsImNoaWxkQ29udGV4dCIsInJlZ2lzdGVyRWZmZWN0IiwibWFyZ2luTm9ybWFsIiwiRm9ybUhlbHBlclRleHQiLCJvd25lcldpbmRvdyIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsImZ1bmNzIiwiX2xlbjIiLCJfa2V5MiIsIl9wcm9wcyRkaXNhYmxlUG9ydGFsIiwiZGlzYWJsZVBvcnRhbCIsIm9uUmVuZGVyZWQiLCJtb3VudE5vZGUiLCJzZXRNb3VudE5vZGUiLCJnZXRDb250YWluZXIiLCJnZXRTY3JvbGxiYXJTaXplIiwic2Nyb2xsRGl2Iiwic2Nyb2xsYmFyU2l6ZSIsIm9mZnNldFdpZHRoIiwiYXJpYUhpZGRlbiIsInNob3ciLCJnZXRQYWRkaW5nUmlnaHQiLCJhcmlhSGlkZGVuU2libGluZ3MiLCJjdXJyZW50Tm9kZSIsIm5vZGVzVG9FeGNsdWRlIiwiYmxhY2tsaXN0VGFnTmFtZXMiLCJmaW5kSW5kZXhPZiIsImlkeCIsInNvbWUiLCJoYW5kbGVDb250YWluZXIiLCJmaXhlZE5vZGVzIiwicmVzdG9yZVN0eWxlIiwicmVzdG9yZVBhZGRpbmdzIiwiZGlzYWJsZVNjcm9sbExvY2siLCJpbm5lcldpZHRoIiwiaXNPdmVyZmxvd2luZyIsInBhcmVudEVsZW1lbnQiLCJzY3JvbGxDb250YWluZXIiLCJNb2RhbE1hbmFnZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJtb2RhbHMiLCJjb250YWluZXJzIiwibW9kYWxJbmRleCIsIm1vZGFsUmVmIiwiaGlkZGVuU2libGluZ05vZGVzIiwiaGlkZGVuU2libGluZ3MiLCJnZXRIaWRkZW5TaWJsaW5ncyIsImNvbnRhaW5lckluZGV4IiwicmVzdG9yZSIsIm5leHRUb3AiLCJUcmFwRm9jdXMiLCJfcHJvcHMkZGlzYWJsZUF1dG9Gb2MiLCJkaXNhYmxlQXV0b0ZvY3VzIiwiX3Byb3BzJGRpc2FibGVFbmZvcmNlIiwiZGlzYWJsZUVuZm9yY2VGb2N1cyIsIl9wcm9wcyRkaXNhYmxlUmVzdG9yZSIsImRpc2FibGVSZXN0b3JlRm9jdXMiLCJnZXREb2MiLCJpc0VuYWJsZWQiLCJpZ25vcmVOZXh0RW5mb3JjZUZvY3VzIiwic2VudGluZWxTdGFydCIsInNlbnRpbmVsRW5kIiwibm9kZVRvUmVzdG9yZSIsInJvb3RSZWYiLCJwcmV2T3BlblJlZiIsImNvbnRhaW4iLCJoYXNGb2N1cyIsImxvb3BGb2N1cyIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaW52aXNpYmxlIiwiU2ltcGxlQmFja2Ryb3AiLCJfcHJvcHMkaW52aXNpYmxlIiwiZGVmYXVsdE1hbmFnZXIiLCJNb2RhbCIsImluUHJvcHMiLCJfcHJvcHMkQmFja2Ryb3BDb21wb24iLCJCYWNrZHJvcENvbXBvbmVudCIsIkJhY2tkcm9wUHJvcHMiLCJfcHJvcHMkY2xvc2VBZnRlclRyYW4iLCJjbG9zZUFmdGVyVHJhbnNpdGlvbiIsIl9wcm9wcyRkaXNhYmxlQmFja2RybyIsImRpc2FibGVCYWNrZHJvcENsaWNrIiwiX3Byb3BzJGRpc2FibGVFc2NhcGVLIiwiZGlzYWJsZUVzY2FwZUtleURvd24iLCJfcHJvcHMkZGlzYWJsZVNjcm9sbEwiLCJfcHJvcHMkaGlkZUJhY2tkcm9wIiwiaGlkZUJhY2tkcm9wIiwiX3Byb3BzJGtlZXBNb3VudGVkIiwia2VlcE1vdW50ZWQiLCJfcHJvcHMkbWFuYWdlciIsIm1hbmFnZXIiLCJvbkJhY2tkcm9wQ2xpY2siLCJvbkNsb3NlIiwib25Fc2NhcGVLZXlEb3duIiwiZXhpdGVkIiwic2V0RXhpdGVkIiwibW91bnROb2RlUmVmIiwiaGFzVHJhbnNpdGlvbiIsImdldEhhc1RyYW5zaXRpb24iLCJnZXRNb2RhbCIsImhhbmRsZU1vdW50ZWQiLCJtb3VudCIsImhhbmRsZU9wZW4iLCJyZXNvbHZlZENvbnRhaW5lciIsImlzVG9wTW9kYWwiLCJoYW5kbGVQb3J0YWxSZWYiLCJoYW5kbGVDbG9zZSIsImlubGluZVN0eWxlIiwiY2hpbGRQcm9wcyIsIm9uRW50ZXIiLCJUcmFuc2l0aW9uIiwiaW5pdGlhbFN0YXR1cyIsImFwcGVhclN0YXR1cyIsInVubW91bnRPbkV4aXQiLCJtb3VudE9uRW50ZXIiLCJuZXh0Q2FsbGJhY2siLCJ1cGRhdGVTdGF0dXMiLCJwcmV2UHJvcHMiLCJuZXh0U3RhdHVzIiwiY2FuY2VsTmV4dENhbGxiYWNrIiwiZ2V0VGltZW91dHMiLCJtb3VudGluZyIsInBlcmZvcm1FbnRlciIsInBlcmZvcm1FeGl0IiwiX3RoaXMyIiwiYXBwZWFyaW5nIiwibm9kZVJlZiIsIm1heWJlTm9kZSIsIm1heWJlQXBwZWFyaW5nIiwidGltZW91dHMiLCJlbnRlclRpbWVvdXQiLCJzYWZlU2V0U3RhdGUiLCJvbkVudGVyZWQiLCJvbkVudGVyaW5nIiwib25UcmFuc2l0aW9uRW5kIiwiX3RoaXMzIiwib25FeGl0Iiwib25FeGl0aW5nIiwibmV4dFN0YXRlIiwic2V0TmV4dENhbGxiYWNrIiwiX3RoaXM0IiwiaGFuZGxlciIsImRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIiLCJhZGRFbmRMaXN0ZW5lciIsIm1heWJlTmV4dENhbGxiYWNrIiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsImdldFRyYW5zaXRpb25Qcm9wcyIsIl9wcm9wcyRzdHlsZSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImdldFNjYWxlIiwiZW50ZXJpbmciLCJlbnRlcmVkIiwiR3JvdyIsIl9wcm9wcyRkaXNhYmxlU3RyaWN0TSIsImRpc2FibGVTdHJpY3RNb2RlQ29tcGF0IiwiX3Byb3BzJHRpbWVvdXQiLCJfcHJvcHMkVHJhbnNpdGlvbkNvbXAiLCJUcmFuc2l0aW9uQ29tcG9uZW50IiwidGltZXIiLCJhdXRvVGltZW91dCIsImVuYWJsZVN0cmljdE1vZGVDb21wYXQiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZm9yZWlnblJlZiIsIm5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2siLCJub2RlT3JBcHBlYXJpbmciLCJpc0FwcGVhcmluZyIsImhhbmRsZUVudGVyaW5nIiwiaGFuZGxlRW50ZXIiLCJyZWZsb3ciLCJfZ2V0VHJhbnNpdGlvblByb3BzIiwiaGFuZGxlRW50ZXJlZCIsImhhbmRsZUV4aXRpbmciLCJoYW5kbGVFeGl0IiwiX2dldFRyYW5zaXRpb25Qcm9wczIiLCJub2RlT3JOZXh0IiwibWF5YmVOZXh0IiwibXVpU3VwcG9ydEF1dG8iLCJQYXBlciIsIl9wcm9wcyRzcXVhcmUiLCJzcXVhcmUiLCJfcHJvcHMkZWxldmF0aW9uIiwiZWxldmF0aW9uIiwicm91bmRlZCIsImVsZXZhdGlvbnMiLCJzaGFkb3ciLCJnZXRPZmZzZXRUb3AiLCJ2ZXJ0aWNhbCIsImdldE9mZnNldExlZnQiLCJob3Jpem9udGFsIiwiZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUiLCJnZXRBbmNob3JFbCIsImFuY2hvckVsIiwiUG9wb3ZlciIsIl9wcm9wcyRhbmNob3JPcmlnaW4iLCJhbmNob3JPcmlnaW4iLCJhbmNob3JQb3NpdGlvbiIsIl9wcm9wcyRhbmNob3JSZWZlcmVuYyIsImFuY2hvclJlZmVyZW5jZSIsImNvbnRhaW5lclByb3AiLCJnZXRDb250ZW50QW5jaG9yRWwiLCJfcHJvcHMkbWFyZ2luVGhyZXNob2wiLCJtYXJnaW5UaHJlc2hvbGQiLCJfcHJvcHMkUGFwZXJQcm9wcyIsIlBhcGVyUHJvcHMiLCJfcHJvcHMkdHJhbnNmb3JtT3JpZ2kiLCJfcHJvcHMkdHJhbnNpdGlvbkR1cmEiLCJ0cmFuc2l0aW9uRHVyYXRpb25Qcm9wIiwiX3Byb3BzJFRyYW5zaXRpb25Qcm9wIiwiVHJhbnNpdGlvblByb3BzIiwicGFwZXJSZWYiLCJnZXRBbmNob3JPZmZzZXQiLCJjb250ZW50QW5jaG9yT2Zmc2V0IiwicmVzb2x2ZWRBbmNob3JFbCIsImFuY2hvclJlY3QiLCJhbmNob3JWZXJ0aWNhbCIsImdldENvbnRlbnRBbmNob3JPZmZzZXQiLCJjb250ZW50QW5jaG9yRWwiLCJnZXRTY3JvbGxQYXJlbnQiLCJvZmZzZXRUb3AiLCJnZXRUcmFuc2Zvcm1PcmlnaW4iLCJlbGVtUmVjdCIsImdldFBvc2l0aW9uaW5nU3R5bGUiLCJvZmZzZXRIZWlnaHQiLCJlbGVtVHJhbnNmb3JtT3JpZ2luIiwiY29udGFpbmVyV2luZG93IiwiaGVpZ2h0VGhyZXNob2xkIiwid2lkdGhUaHJlc2hvbGQiLCJkaWZmIiwiX2RpZmYiLCJfZGlmZjIiLCJfZGlmZjMiLCJzZXRQb3NpdGlvbmluZ1N0eWxlcyIsInBvc2l0aW9uaW5nIiwiaGFuZGxlUGFwZXJSZWYiLCJ1cGRhdGVQb3NpdGlvbiIsIm92ZXJmbG93WSIsIm92ZXJmbG93WCIsIm1heEhlaWdodCIsIkxpc3RDb250ZXh0IiwiTGlzdCIsIl9wcm9wcyRkZW5zZSIsImRlbnNlIiwiX3Byb3BzJGRpc2FibGVQYWRkaW5nIiwiZGlzYWJsZVBhZGRpbmciLCJzdWJoZWFkZXIiLCJsaXN0U3R5bGUiLCJuZXh0SXRlbSIsImxpc3QiLCJkaXNhYmxlTGlzdFdyYXAiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJwcmV2aW91c0l0ZW0iLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwidGV4dENyaXRlcmlhTWF0Y2hlcyIsIm5leHRGb2N1cyIsInRleHRDcml0ZXJpYSIsImlubmVyVGV4dCIsInJlcGVhdGluZyIsIm1vdmVGb2N1cyIsImN1cnJlbnRGb2N1cyIsImRpc2FibGVkSXRlbXNGb2N1c2FibGUiLCJ0cmF2ZXJzYWxGdW5jdGlvbiIsIndyYXBwZWRPbmNlIiwibmV4dEZvY3VzRGlzYWJsZWQiLCJNZW51TGlzdCIsImFjdGlvbnMiLCJfcHJvcHMkYXV0b0ZvY3VzIiwiX3Byb3BzJGF1dG9Gb2N1c0l0ZW0iLCJhdXRvRm9jdXNJdGVtIiwiX3Byb3BzJGRpc2FibGVkSXRlbXNGIiwiX3Byb3BzJGRpc2FibGVMaXN0V3JhIiwibGlzdFJlZiIsInRleHRDcml0ZXJpYVJlZiIsInByZXZpb3VzS2V5TWF0Y2hlZCIsImxhc3RUaW1lIiwiYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXIiLCJjb250YWluZXJFbGVtZW50Iiwibm9FeHBsaWNpdFdpZHRoIiwiYWN0aXZlSXRlbUluZGV4IiwiaXRlbXMiLCJuZXdDaGlsZFByb3BzIiwiY3JpdGVyaWEiLCJsb3dlcktleSIsImN1cnJUaW1lIiwia2VlcEZvY3VzT25DdXJyZW50IiwiUlRMX09SSUdJTiIsIkxUUl9PUklHSU4iLCJkaXNhYmxlQXV0b0ZvY3VzSXRlbSIsIl9wcm9wcyRNZW51TGlzdFByb3BzIiwiTWVudUxpc3RQcm9wcyIsIlBvcG92ZXJDbGFzc2VzIiwibWVudUxpc3RBY3Rpb25zUmVmIiwiY29udGVudEFuY2hvclJlZiIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwiYXJlRXF1YWxWYWx1ZXMiLCJTZWxlY3RJbnB1dCIsImFyaWFMYWJlbCIsImF1dG9XaWR0aCIsImRpc3BsYXlFbXB0eSIsIkljb25Db21wb25lbnQiLCJsYWJlbElkIiwiX3Byb3BzJE1lbnVQcm9wcyIsIk1lbnVQcm9wcyIsIm9uT3BlbiIsIm9wZW5Qcm9wIiwicmVuZGVyVmFsdWUiLCJfcHJvcHMkU2VsZWN0RGlzcGxheVAiLCJTZWxlY3REaXNwbGF5UHJvcHMiLCJ0YWJJbmRleFByb3AiLCJfdXNlQ29udHJvbGxlZCIsImRlZmF1bHRQcm9wIiwidmFsdWVTdGF0ZSIsInVzZUNvbnRyb2xsZWQiLCJfdXNlQ29udHJvbGxlZDIiLCJkaXNwbGF5Tm9kZSIsInNldERpc3BsYXlOb2RlIiwiaXNPcGVuQ29udHJvbGxlZCIsIm1lbnVNaW5XaWR0aFN0YXRlIiwic2V0TWVudU1pbldpZHRoU3RhdGUiLCJvcGVuU3RhdGUiLCJzZXRPcGVuU3RhdGUiLCJpc0NvbGxhcHNlZCIsImRpc3BsYXlTaW5nbGUiLCJoYW5kbGVJdGVtQ2xpY2siLCJpdGVtSW5kZXgiLCJkaXNwbGF5TXVsdGlwbGUiLCJjb21wdXRlRGlzcGxheSIsIm1lbnVNaW5XaWR0aCIsImJ1dHRvbklkIiwic2VsZWN0TWVudSIsImljb25PcGVuIiwiTmF0aXZlU2VsZWN0SW5wdXQiLCJpY29uRmlsbGVkIiwiaWNvbk91dGxpbmVkIiwiZGVmYXVsdElucHV0IiwiTmF0aXZlU2VsZWN0IiwiX3Byb3BzJEljb25Db21wb25lbnQiLCJBcnJvd0Ryb3BEb3duSWNvbiIsIl9wcm9wcyRpbnB1dCIsIm5hdGl2ZVNlbGVjdFN0eWxlcyIsIlNlbGVjdCIsIl9wcm9wcyRhdXRvV2lkdGgiLCJfcHJvcHMkZGlzcGxheUVtcHR5IiwiX3Byb3BzJG11bHRpcGxlIiwiX3Byb3BzJG5hdGl2ZSIsIm5hdGl2ZSIsInZhcmlhbnRQcm9wcyIsInZhcmlhbnRDb21wb25lbnQiLCJUZXh0RmllbGQiLCJGb3JtSGVscGVyVGV4dFByb3BzIiwiaGVscGVyVGV4dCIsIklucHV0TGFiZWxQcm9wcyIsIklucHV0UHJvcHMiLCJfcHJvcHMkc2VsZWN0IiwiU2VsZWN0UHJvcHMiLCJJbnB1dE1vcmUiLCJfSW5wdXRMYWJlbFByb3BzJHJlcXUiLCJkaXNwbGF5UmVxdWlyZWQiLCJoZWxwZXJUZXh0SWQiLCJpbnB1dExhYmVsSWQiLCJJbnB1dEVsZW1lbnQiLCJodG1sRm9yIiwic3R5bGVGdW5jdGlvbiIsIm5ld1N0eWxlRnVuY3Rpb24iLCJmaWVsZHMiLCJvbWl0IiwiZmlsdGVyUHJvcHMiLCJjb21wb3NlIiwiZ2V0UGF0aCIsIl9vcHRpb25zJGNzc1Byb3BlcnR5IiwidGhlbWVLZXkiLCJ0aGVtZU1hcHBpbmciLCJwcm9wVmFsdWVGaW5hbCIsImdldEJvcmRlciIsImJvcmRlcnMiLCJmbGV4Ym94Iiwic2l6aW5nIiwic3R5bGVkIiwiY29tcG9uZW50Q3JlYXRvciIsIlN0eWxlZENvbXBvbmVudCIsIkZpbmFsQ29tcG9uZW50Iiwic3R5bGVkV2l0aG91dERlZmF1bHQiLCJwb3NpdGlvbnMiLCJCb3giLCJwcm9wZXJ0aWVzIiwiZGlyZWN0aW9ucyIsImFsaWFzZXMiLCJtYXJnaW5YIiwibWFyZ2luWSIsInBhZGRpbmdYIiwicGFkZGluZ1kiLCJnZXRDc3NQcm9wZXJ0aWVzIiwiYXJnIiwiX3Byb3Akc3BsaXQiLCJfcHJvcCRzcGxpdDIiLCJzcGFjaW5nS2V5cyIsImdldFN0eWxlRnJvbVByb3BWYWx1ZSIsImNzc1Byb3BlcnRpZXMiLCJ0cmFuc2Zvcm1lciIsInRyYW5z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RUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEdBQUksSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVB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aUJoNUUsR0FDeUJ1NUUsR0FDMURyeEYsRUFBWWxPLEVBQU1nbUIsR0FDdEIsT0FBTy9YLFlBQWtCak8sRUFBT2tPLEVBQVdDLE1BQzFDRyxPQUFPckgsSUFBTyxJQUduQnFPLEVBQVFwSixVQUdDLEdBQ1RvSixFQUFRaW9GLFlBQWM2QixFQUNQOXBGIiwiZmlsZSI6InN0YXRpYy9qcy8wLjVmMWNkY2I5LmNodW5rLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImltcG9ydCBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCIuL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJmdW5jdGlvbiB0b1ZhbChtaXgpIHtcblx0dmFyIGssIHksIHN0cj0nJztcblxuXHRpZiAodHlwZW9mIG1peCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG1peCA9PT0gJ251bWJlcicpIHtcblx0XHRzdHIgKz0gbWl4O1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtaXggPT09ICdvYmplY3QnKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkobWl4KSkge1xuXHRcdFx0Zm9yIChrPTA7IGsgPCBtaXgubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdGlmICh5ID0gdG9WYWwobWl4W2tdKSkge1xuXHRcdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRcdHN0ciArPSB5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGsgaW4gbWl4KSB7XG5cdFx0XHRcdGlmIChtaXhba10pIHtcblx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdHN0ciArPSBrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuXHR2YXIgaT0wLCB0bXAsIHgsIHN0cj0nJztcblx0d2hpbGUgKGkgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0aWYgKHRtcCA9IGFyZ3VtZW50c1tpKytdKSB7XG5cdFx0XHRpZiAoeCA9IHRvVmFsKHRtcCkpIHtcblx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0c3RyICs9IHhcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHN0cjtcbn1cbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzLCBnZXREaXNwbGF5TmFtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgbWFrZVN0eWxlcyBmcm9tICcuLi9tYWtlU3R5bGVzJztcbmltcG9ydCBnZXRUaGVtZVByb3BzIGZyb20gJy4uL2dldFRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJzsgLy8gTGluayBhIHN0eWxlIHNoZWV0IHdpdGggYSBjb21wb25lbnQuXG4vLyBJdCBkb2VzIG5vdCBtb2RpZnkgdGhlIGNvbXBvbmVudCBwYXNzZWQgdG8gaXQ7XG4vLyBpbnN0ZWFkLCBpdCByZXR1cm5zIGEgbmV3IGNvbXBvbmVudCwgd2l0aCBhIGBjbGFzc2VzYCBwcm9wZXJ0eS5cblxudmFyIHdpdGhTdHlsZXMgPSBmdW5jdGlvbiB3aXRoU3R5bGVzKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHJldHVybiBmdW5jdGlvbiAoQ29tcG9uZW50KSB7XG4gICAgdmFyIGRlZmF1bHRUaGVtZSA9IG9wdGlvbnMuZGVmYXVsdFRoZW1lLFxuICAgICAgICBfb3B0aW9ucyR3aXRoVGhlbWUgPSBvcHRpb25zLndpdGhUaGVtZSxcbiAgICAgICAgd2l0aFRoZW1lID0gX29wdGlvbnMkd2l0aFRoZW1lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHdpdGhUaGVtZSxcbiAgICAgICAgbmFtZSA9IG9wdGlvbnMubmFtZSxcbiAgICAgICAgc3R5bGVzT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJkZWZhdWx0VGhlbWVcIiwgXCJ3aXRoVGhlbWVcIiwgXCJuYW1lXCJdKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoQ29tcG9uZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFsnWW91IGFyZSBjYWxsaW5nIHdpdGhTdHlsZXMoc3R5bGVzKShDb21wb25lbnQpIHdpdGggYW4gdW5kZWZpbmVkIGNvbXBvbmVudC4nLCAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBpbXBvcnQgaXQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjbGFzc05hbWVQcmVmaXggPSBuYW1lO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAvLyBQcm92aWRlIGEgYmV0dGVyIERYIG91dHNpZGUgcHJvZHVjdGlvbi5cbiAgICAgICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZGlzcGxheU5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsYXNzTmFtZVByZWZpeCA9IGRpc3BsYXlOYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoc3R5bGVzT3JDcmVhdG9yLCBfZXh0ZW5kcyh7XG4gICAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZSxcbiAgICAgIENvbXBvbmVudDogQ29tcG9uZW50LFxuICAgICAgbmFtZTogbmFtZSB8fCBDb21wb25lbnQuZGlzcGxheU5hbWUsXG4gICAgICBjbGFzc05hbWVQcmVmaXg6IGNsYXNzTmFtZVByZWZpeFxuICAgIH0sIHN0eWxlc09wdGlvbnMpKTtcbiAgICB2YXIgV2l0aFN0eWxlcyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFdpdGhTdHlsZXMocHJvcHMsIHJlZikge1xuICAgICAgdmFyIGNsYXNzZXNQcm9wID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBpbm5lclJlZiA9IHByb3BzLmlubmVyUmVmLFxuICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiaW5uZXJSZWZcIl0pOyAvLyBUaGUgd3JhcHBlciByZWNlaXZlcyBvbmx5IHVzZXIgc3VwcGxpZWQgcHJvcHMsIHdoaWNoIGNvdWxkIGJlIGEgc3Vic2V0IG9mXG4gICAgICAvLyB0aGUgYWN0dWFsIHByb3BzIENvbXBvbmVudCBtaWdodCByZWNlaXZlIGR1ZSB0byBtZXJnaW5nIHdpdGggZGVmYXVsdFByb3BzLlxuICAgICAgLy8gU28gY29weWluZyBpdCBoZXJlIHdvdWxkIGdpdmUgdXMgdGhlIHNhbWUgcmVzdWx0IGluIHRoZSB3cmFwcGVyIGFzIHdlbGwuXG5cblxuICAgICAgdmFyIGNsYXNzZXMgPSB1c2VTdHlsZXMoX2V4dGVuZHMoe30sIENvbXBvbmVudC5kZWZhdWx0UHJvcHMsIHByb3BzKSk7XG4gICAgICB2YXIgdGhlbWU7XG4gICAgICB2YXIgbW9yZSA9IG90aGVyO1xuXG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnIHx8IHdpdGhUaGVtZSkge1xuICAgICAgICAvLyBuYW1lIGFuZCB3aXRoVGhlbWUgYXJlIGludmFyaWFudCBpbiB0aGUgb3V0ZXIgc2NvcGVcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgICAgIHRoZW1lID0gdXNlVGhlbWUoKSB8fCBkZWZhdWx0VGhlbWU7XG5cbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICBtb3JlID0gZ2V0VGhlbWVQcm9wcyh7XG4gICAgICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgcHJvcHM6IG90aGVyXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gLy8gUHJvdmlkZSB0aGUgdGhlbWUgdG8gdGhlIHdyYXBwZWQgY29tcG9uZW50LlxuICAgICAgICAvLyBTbyB3ZSBkb24ndCBoYXZlIHRvIHVzZSB0aGUgYHdpdGhUaGVtZSgpYCBIaWdoZXItb3JkZXIgQ29tcG9uZW50LlxuXG5cbiAgICAgICAgaWYgKHdpdGhUaGVtZSAmJiAhbW9yZS50aGVtZSkge1xuICAgICAgICAgIG1vcmUudGhlbWUgPSB0aGVtZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogaW5uZXJSZWYgfHwgcmVmLFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzXG4gICAgICB9LCBtb3JlKSk7XG4gICAgfSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gV2l0aFN0eWxlcy5wcm9wVHlwZXMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICAgICAqL1xuICAgICAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2UgdGhhdCBwcm9wIHRvIHBhc3MgYSByZWYgdG8gdGhlIGRlY29yYXRlZCBjb21wb25lbnQuXG4gICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICovXG4gICAgICBpbm5lclJlZjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wcy5pbm5lclJlZiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDsgLy8gcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgLy8gICAnTWF0ZXJpYWwtVUk6IFRoZSBgaW5uZXJSZWZgIHByb3AgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHY1LiAnICtcbiAgICAgICAgLy8gICAgICdSZWZzIGFyZSBub3cgYXV0b21hdGljYWxseSBmb3J3YXJkZWQgdG8gdGhlIGlubmVyIGNvbXBvbmVudC4nLFxuICAgICAgICAvLyApO1xuICAgICAgfSlcbiAgICB9IDogdm9pZCAwO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFdpdGhTdHlsZXMuZGlzcGxheU5hbWUgPSBcIldpdGhTdHlsZXMoXCIuY29uY2F0KGdldERpc3BsYXlOYW1lKENvbXBvbmVudCksIFwiKVwiKTtcbiAgICB9XG5cbiAgICBob2lzdE5vblJlYWN0U3RhdGljcyhXaXRoU3R5bGVzLCBDb21wb25lbnQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIEV4cG9zZWQgZm9yIHRlc3QgcHVycG9zZXMuXG4gICAgICBXaXRoU3R5bGVzLk5ha2VkID0gQ29tcG9uZW50O1xuICAgICAgV2l0aFN0eWxlcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgIFdpdGhTdHlsZXMudXNlU3R5bGVzID0gdXNlU3R5bGVzO1xuICAgIH1cblxuICAgIHJldHVybiBXaXRoU3R5bGVzO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IHdpdGhTdHlsZXMgYXMgd2l0aFN0eWxlc1dpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcblxuZnVuY3Rpb24gd2l0aFN0eWxlcyhzdHlsZXNPckNyZWF0b3IsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHdpdGhTdHlsZXNXaXRob3V0RGVmYXVsdChzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZVxuICB9LCBvcHRpb25zKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXM7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLy8gSXQgc2hvdWxkIHRvIGJlIG5vdGVkIHRoYXQgdGhpcyBmdW5jdGlvbiBpc24ndCBlcXVpdmFsZW50IHRvIGB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZWAuXG4vL1xuLy8gQSBzdHJpY3QgY2FwaXRhbGl6YXRpb24gc2hvdWxkIHVwcGVyY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGVhY2ggd29yZCBhIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWF0ZXJpYWwtVUk6IGNhcGl0YWxpemUoc3RyaW5nKSBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50LicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIHdob3NlIHZhbHVlIGlzIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgY2xhbXBlZFxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBUaGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHJldHVybnMge251bWJlcn0gQSBudW1iZXIgaW4gdGhlIHJhbmdlIFttaW4sIG1heF1cbiAqL1xuZnVuY3Rpb24gY2xhbXAodmFsdWUpIHtcbiAgdmFyIG1pbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgdmFyIG1heCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgXCIuY29uY2F0KHZhbHVlLCBcIiBpcyBvdXQgb2YgcmFuZ2UgW1wiKS5jb25jYXQobWluLCBcIiwgXCIpLmNvbmNhdChtYXgsIFwiXS5cIikpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbHVlKSwgbWF4KTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyBoZXggZm9ybWF0IHRvIENTUyByZ2IgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhleCBjb2xvciwgaS5lLiAjbm5uIG9yICNubm5ubm5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmdcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGNvbG9yLnN1YnN0cigxKTtcbiAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIi57MSxcIi5jb25jYXQoY29sb3IubGVuZ3RoID49IDYgPyAyIDogMSwgXCJ9XCIpLCAnZycpO1xuICB2YXIgY29sb3JzID0gY29sb3IubWF0Y2gocmUpO1xuXG4gIGlmIChjb2xvcnMgJiYgY29sb3JzWzBdLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICAgIHJldHVybiBuICsgbjtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjb2xvcnMgPyBcInJnYlwiLmNvbmNhdChjb2xvcnMubGVuZ3RoID09PSA0ID8gJ2EnIDogJycsIFwiKFwiKS5jb25jYXQoY29sb3JzLm1hcChmdW5jdGlvbiAobiwgaW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPCAzID8gcGFyc2VJbnQobiwgMTYpIDogTWF0aC5yb3VuZChwYXJzZUludChuLCAxNikgLyAyNTUgKiAxMDAwKSAvIDEwMDA7XG4gIH0pLmpvaW4oJywgJyksIFwiKVwiKSA6ICcnO1xufVxuXG5mdW5jdGlvbiBpbnRUb0hleChpbnQpIHtcbiAgdmFyIGhleCA9IGludC50b1N0cmluZygxNik7XG4gIHJldHVybiBoZXgubGVuZ3RoID09PSAxID8gXCIwXCIuY29uY2F0KGhleCkgOiBoZXg7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgcmdiIGZvcm1hdCB0byBDU1MgaGV4IGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBSR0IgY29sb3IsIGkuZS4gcmdiKG4sIG4sIG4pXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nLCBpLmUuICNubm5ubm5cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb0hleChjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci5pbmRleE9mKCcjJykgPT09IDApIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICB2YXIgX2RlY29tcG9zZUNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpLFxuICAgICAgdmFsdWVzID0gX2RlY29tcG9zZUNvbG9yLnZhbHVlcztcblxuICByZXR1cm4gXCIjXCIuY29uY2F0KHZhbHVlcy5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gaW50VG9IZXgobik7XG4gIH0pLmpvaW4oJycpKTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIGhzbCBmb3JtYXQgdG8gcmdiIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIU0wgY29sb3IgdmFsdWVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZ2IgY29sb3IgdmFsdWVzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YXIgX2NvbG9yID0gY29sb3IsXG4gICAgICB2YWx1ZXMgPSBfY29sb3IudmFsdWVzO1xuICB2YXIgaCA9IHZhbHVlc1swXTtcbiAgdmFyIHMgPSB2YWx1ZXNbMV0gLyAxMDA7XG4gIHZhciBsID0gdmFsdWVzWzJdIC8gMTAwO1xuICB2YXIgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG5cbiAgdmFyIGYgPSBmdW5jdGlvbiBmKG4pIHtcbiAgICB2YXIgayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogKG4gKyBoIC8gMzApICUgMTI7XG4gICAgcmV0dXJuIGwgLSBhICogTWF0aC5tYXgoTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSwgLTEpO1xuICB9O1xuXG4gIHZhciB0eXBlID0gJ3JnYic7XG4gIHZhciByZ2IgPSBbTWF0aC5yb3VuZChmKDApICogMjU1KSwgTWF0aC5yb3VuZChmKDgpICogMjU1KSwgTWF0aC5yb3VuZChmKDQpICogMjU1KV07XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdoc2xhJykge1xuICAgIHR5cGUgKz0gJ2EnO1xuICAgIHJnYi5wdXNoKHZhbHVlc1szXSk7XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3Ioe1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWVzOiByZ2JcbiAgfSk7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gQSBNVUkgY29sb3Igb2JqZWN0OiB7dHlwZTogc3RyaW5nLCB2YWx1ZXM6IG51bWJlcltdfVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci50eXBlKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGhleFRvUmdiKGNvbG9yKSk7XG4gIH1cblxuICB2YXIgbWFya2VyID0gY29sb3IuaW5kZXhPZignKCcpO1xuICB2YXIgdHlwZSA9IGNvbG9yLnN1YnN0cmluZygwLCBtYXJrZXIpO1xuXG4gIGlmIChbJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJ10uaW5kZXhPZih0eXBlKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFVuc3VwcG9ydGVkIGBcIi5jb25jYXQoY29sb3IsIFwiYCBjb2xvci5cIiksICdXZSBzdXBwb3J0IHRoZSBmb2xsb3dpbmcgZm9ybWF0czogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKS4nXS5qb2luKCdcXG4nKSk7XG4gIH1cblxuICB2YXIgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpLnNwbGl0KCcsJyk7XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogdmFsdWVzXG4gIH07XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIHZhciB0eXBlID0gY29sb3IudHlwZTtcbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnZhbHVlcztcblxuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAobiwgaSkge1xuICAgICAgcmV0dXJuIGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbjtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IFwiXCIuY29uY2F0KHZhbHVlc1sxXSwgXCIlXCIpO1xuICAgIHZhbHVlc1syXSA9IFwiXCIuY29uY2F0KHZhbHVlc1syXSwgXCIlXCIpO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KHR5cGUsIFwiKFwiKS5jb25jYXQodmFsdWVzLmpvaW4oJywgJyksIFwiKVwiKTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIHZhciBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICB2YXIgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgcmV0dXJuIChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG59XG4vKipcbiAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yIHNwYWNlLFxuICogbm9ybWFsaXplZCB0byAwIGZvciBkYXJrZXN0IGJsYWNrIGFuZCAxIGZvciBsaWdodGVzdCB3aGl0ZS5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YXIgcmdiID0gY29sb3IudHlwZSA9PT0gJ2hzbCcgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuXG4gICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiBNYXRoLnBvdygodmFsICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gIH0pOyAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuXG4gIHJldHVybiBOdW1iZXIoKDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXSkudG9GaXhlZCgzKSk7XG59XG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3IsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlbXBoYXNpemUoY29sb3IpIHtcbiAgdmFyIGNvZWZmaWNpZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwLjE1O1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0xXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmYWRlKGNvbG9yLCB2YWx1ZSkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFsdWUgPSBjbGFtcCh2YWx1ZSk7XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cblxuICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNldFJlZiBmcm9tICcuL3NldFJlZic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGb3JrUmVmKHJlZkEsIHJlZkIpIHtcbiAgLyoqXG4gICAqIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgdGhlIHJlZiBwcm9wcyBjaGFuZ2UgYW5kIGFyZSBkZWZpbmVkLlxuICAgKiBUaGlzIG1lYW5zIHJlYWN0IHdpbGwgY2FsbCB0aGUgb2xkIGZvcmtSZWYgd2l0aCBgbnVsbGAgYW5kIHRoZSBuZXcgZm9ya1JlZlxuICAgKiB3aXRoIHRoZSByZWYuIENsZWFudXAgbmF0dXJhbGx5IGVtZXJnZXMgZnJvbSB0aGlzIGJlaGF2aW9yXG4gICAqL1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJlZkEgPT0gbnVsbCAmJiByZWZCID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAocmVmVmFsdWUpIHtcbiAgICAgIHNldFJlZihyZWZBLCByZWZWYWx1ZSk7XG4gICAgICBzZXRSZWYocmVmQiwgcmVmVmFsdWUpO1xuICAgIH07XG4gIH0sIFtyZWZBLCByZWZCXSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NXG59O1xuIiwiaW1wb3J0IGFycmF5V2l0aG91dEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aG91dEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCI7XG5pbXBvcnQgbm9uSXRlcmFibGVTcHJlYWQgZnJvbSBcIi4vbm9uSXRlcmFibGVTcHJlYWRcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXlcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59IiwiaW1wb3J0IGFycmF5V2l0aEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5TGltaXRcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlUmVzdCBmcm9tIFwiLi9ub25JdGVyYWJsZVJlc3RcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5XCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obik7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE0MDk5I2lzc3VlY29tbWVudC00NDAwMTM4OTJcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2soZm4pIHtcbiAgdmFyIHJlZiA9IFJlYWN0LnVzZVJlZihmbik7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZWYuY3VycmVudCA9IGZuO1xuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKDAsIHJlZi5jdXJyZW50KS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIH0sIFtdKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgY3JlYXRlTXVpVGhlbWUgZnJvbSAnLi9jcmVhdGVNdWlUaGVtZSc7XG52YXIgZGVmYXVsdFRoZW1lID0gY3JlYXRlTXVpVGhlbWUoKTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRUaGVtZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuIGl0ZW0gJiYgX3R5cGVvZihpdGVtKSA9PT0gJ29iamVjdCcgJiYgaXRlbS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7XG4gICAgY2xvbmU6IHRydWVcbiAgfTtcbiAgdmFyIG91dHB1dCA9IG9wdGlvbnMuY2xvbmUgPyBfZXh0ZW5kcyh7fSwgdGFyZ2V0KSA6IHRhcmdldDtcblxuICBpZiAoaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIGlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvLyBBdm9pZCBwcm90b3R5cGUgcG9sbHV0aW9uXG4gICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSAmJiBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJpbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiBtZXJnZShhY2MsIGl0ZW0pIHtcbiAgaWYgKCFpdGVtKSB7XG4gICAgcmV0dXJuIGFjYztcbiAgfVxuXG4gIHJldHVybiBkZWVwbWVyZ2UoYWNjLCBpdGVtLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcCwgaXQncyB3YXkgZmFzdGVyLlxuXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZXJnZTsiLCIvLyBUT0RPIHY1OiBjb25zaWRlciB0byBtYWtlIGl0IHByaXZhdGVcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFJlZihyZWYsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChyZWYpIHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhIb2xlc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheUxpbWl0IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0XCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIi4vbm9uSXRlcmFibGVSZXN0XCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIFRoZW1lQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdUaGVtZUNvbnRleHQnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG4pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn0iLCJ2YXIgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xuZXhwb3J0IGRlZmF1bHQgaGFzU3ltYm9sID8gU3ltYm9sLmZvcignbXVpLm5lc3RlZCcpIDogJ19fVEhFTUVfTkVTVEVEX18nOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJzsgLy8gVGhlIGJyZWFrcG9pbnQgKipzdGFydCoqIGF0IHRoaXMgdmFsdWUuXG4vLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbVsuXG5cbnZhciB2YWx1ZXMgPSB7XG4gIHhzOiAwLFxuICBzbTogNjAwLFxuICBtZDogOTYwLFxuICBsZzogMTI4MCxcbiAgeGw6IDE5MjBcbn07XG52YXIgZGVmYXVsdEJyZWFrcG9pbnRzID0ge1xuICAvLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4gIC8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbiAga2V5czogWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLFxuICB1cDogZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlc1trZXldLCBcInB4KVwiKTtcbiAgfVxufTtcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXByb3BzLnRoZW1lKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogWW91IGFyZSBjYWxsaW5nIGEgc3R5bGUgZnVuY3Rpb24gd2l0aG91dCBhIHRoZW1lIHZhbHVlLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICB2YXIgdGhlbWVCcmVha3BvaW50cyA9IHByb3BzLnRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICByZXR1cm4gcHJvcFZhbHVlLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBpdGVtLCBpbmRleCkge1xuICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAodGhlbWVCcmVha3BvaW50cy5rZXlzW2luZGV4XSldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVtpbmRleF0pO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cblxuICBpZiAoX3R5cGVvZihwcm9wVmFsdWUpID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBfdGhlbWVCcmVha3BvaW50cyA9IHByb3BzLnRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wVmFsdWUpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBicmVha3BvaW50KSB7XG4gICAgICBhY2NbX3RoZW1lQnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVticmVha3BvaW50XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHZhciBvdXRwdXQgPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlKTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gYnJlYWtwb2ludHMoc3R5bGVGdW5jdGlvbikge1xuICB2YXIgbmV3U3R5bGVGdW5jdGlvbiA9IGZ1bmN0aW9uIG5ld1N0eWxlRnVuY3Rpb24ocHJvcHMpIHtcbiAgICB2YXIgYmFzZSA9IHN0eWxlRnVuY3Rpb24ocHJvcHMpO1xuICAgIHZhciB0aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHZhciBleHRlbmRlZCA9IHRoZW1lQnJlYWtwb2ludHMua2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICBpZiAocHJvcHNba2V5XSkge1xuICAgICAgICBhY2MgPSBhY2MgfHwge307XG4gICAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKGtleSldID0gc3R5bGVGdW5jdGlvbihfZXh0ZW5kcyh7XG4gICAgICAgICAgdGhlbWU6IHByb3BzLnRoZW1lXG4gICAgICAgIH0sIHByb3BzW2tleV0pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBudWxsKTtcbiAgICByZXR1cm4gbWVyZ2UoYmFzZSwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIG5ld1N0eWxlRnVuY3Rpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9leHRlbmRzKF9leHRlbmRzKHt9LCBzdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyksIHt9LCB7XG4gICAgeHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc206IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbGc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgeGw6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkgOiB7fTtcbiAgbmV3U3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMpKTtcbiAgcmV0dXJuIG5ld1N0eWxlRnVuY3Rpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJyZWFrcG9pbnRzOyIsIi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxudmFyIHpJbmRleCA9IHtcbiAgbW9iaWxlU3RlcHBlcjogMTAwMCxcbiAgc3BlZWREaWFsOiAxMDUwLFxuICBhcHBCYXI6IDExMDAsXG4gIGRyYXdlcjogMTIwMCxcbiAgbW9kYWw6IDEzMDAsXG4gIHNuYWNrYmFyOiAxNDAwLFxuICB0b29sdGlwOiAxNTAwXG59O1xuZXhwb3J0IGRlZmF1bHQgekluZGV4OyIsIi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi92NC4xLjUvc3JjL2ZvY3VzLXZpc2libGUuanNcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG52YXIgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG52YXIgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbnZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSBudWxsO1xudmFyIGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gIHRleHQ6IHRydWUsXG4gIHNlYXJjaDogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxuICB0ZWw6IHRydWUsXG4gIGVtYWlsOiB0cnVlLFxuICBwYXNzd29yZDogdHJ1ZSxcbiAgbnVtYmVyOiB0cnVlLFxuICBkYXRlOiB0cnVlLFxuICBtb250aDogdHJ1ZSxcbiAgd2VlazogdHJ1ZSxcbiAgdGltZTogdHJ1ZSxcbiAgZGF0ZXRpbWU6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWVcbn07XG4vKipcbiAqIENvbXB1dGVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGVcbiAqIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBiZWluZyBhZGRlZCwgaS5lLiB3aGV0aGVyIGl0IHNob3VsZCBhbHdheXMgbWF0Y2hcbiAqIGA6Zm9jdXMtdmlzaWJsZWAgd2hlbiBmb2N1c2VkLlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KG5vZGUpIHtcbiAgdmFyIHR5cGUgPSBub2RlLnR5cGUsXG4gICAgICB0YWdOYW1lID0gbm9kZS50YWdOYW1lO1xuXG4gIGlmICh0YWdOYW1lID09PSAnSU5QVVQnICYmIGlucHV0VHlwZXNXaGl0ZWxpc3RbdHlwZV0gJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0YWdOYW1lID09PSAnVEVYVEFSRUEnICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAobm9kZS5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBLZWVwIHRyYWNrIG9mIG91ciBrZXlib2FyZCBtb2RhbGl0eSBzdGF0ZSB3aXRoIGBoYWRLZXlib2FyZEV2ZW50YC5cbiAqIElmIHRoZSBtb3N0IHJlY2VudCB1c2VyIGludGVyYWN0aW9uIHdhcyB2aWEgdGhlIGtleWJvYXJkO1xuICogYW5kIHRoZSBrZXkgcHJlc3MgZGlkIG5vdCBpbmNsdWRlIGEgbWV0YSwgYWx0L29wdGlvbiwgb3IgY29udHJvbCBrZXk7XG4gKiB0aGVuIHRoZSBtb2RhbGl0eSBpcyBrZXlib2FyZC4gT3RoZXJ3aXNlLCB0aGUgbW9kYWxpdHkgaXMgbm90IGtleWJvYXJkLlxuICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudFxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICBpZiAoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xufVxuLyoqXG4gKiBJZiBhdCBhbnkgcG9pbnQgYSB1c2VyIGNsaWNrcyB3aXRoIGEgcG9pbnRpbmcgZGV2aWNlLCBlbnN1cmUgdGhhdCB3ZSBjaGFuZ2VcbiAqIHRoZSBtb2RhbGl0eSBhd2F5IGZyb20ga2V5Ym9hcmQuXG4gKiBUaGlzIGF2b2lkcyB0aGUgc2l0dWF0aW9uIHdoZXJlIGEgdXNlciBwcmVzc2VzIGEga2V5IG9uIGFuIGFscmVhZHkgZm9jdXNlZFxuICogZWxlbWVudCwgYW5kIHRoZW4gY2xpY2tzIG9uIGEgZGlmZmVyZW50IGVsZW1lbnQsIGZvY3VzaW5nIGl0IHdpdGggYVxuICogcG9pbnRpbmcgZGV2aWNlLCB3aGlsZSB3ZSBzdGlsbCB0aGluayB3ZSdyZSBpbiBrZXlib2FyZCBtb2RhbGl0eS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGhhbmRsZVBvaW50ZXJEb3duKCkge1xuICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gIGlmICh0aGlzLnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAvLyBJZiB0aGUgdGFiIGJlY29tZXMgYWN0aXZlIGFnYWluLCB0aGUgYnJvd3NlciB3aWxsIGhhbmRsZSBjYWxsaW5nIGZvY3VzXG4gICAgLy8gb24gdGhlIGVsZW1lbnQgKFNhZmFyaSBhY3R1YWxseSBjYWxscyBpdCB0d2ljZSkuXG4gICAgLy8gSWYgdGhpcyB0YWIgY2hhbmdlIGNhdXNlZCBhIGJsdXIgb24gYW4gZWxlbWVudCB3aXRoIGZvY3VzLXZpc2libGUsXG4gICAgLy8gcmUtYXBwbHkgdGhlIGNsYXNzIHdoZW4gdGhlIHVzZXIgc3dpdGNoZXMgYmFjayB0byB0aGUgdGFiLlxuICAgIGlmIChoYWRGb2N1c1Zpc2libGVSZWNlbnRseSkge1xuICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByZXBhcmUoZG9jKSB7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZWFyZG93bihkb2MpIHtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gaXNGb2N1c1Zpc2libGUoZXZlbnQpIHtcbiAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuICB0cnkge1xuICAgIHJldHVybiB0YXJnZXQubWF0Y2hlcygnOmZvY3VzLXZpc2libGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHt9IC8vIGJyb3dzZXJzIG5vdCBpbXBsZW1lbnRpbmcgOmZvY3VzLXZpc2libGUgd2lsbCB0aHJvdyBhIFN5bnRheEVycm9yXG4gIC8vIHdlIHVzZSBvdXIgb3duIGhldXJpc3RpYyBmb3IgdGhvc2UgYnJvd3NlcnNcbiAgLy8gcmV0aHJvdyBtaWdodCBiZSBiZXR0ZXIgaWYgaXQncyBub3QgdGhlIGV4cGVjdGVkIGVycm9yIGJ1dCBkbyB3ZSByZWFsbHlcbiAgLy8gd2FudCB0byBjcmFzaCBpZiBmb2N1cy12aXNpYmxlIG1hbGZ1bmN0aW9uZWQ/XG4gIC8vIG5vIG5lZWQgZm9yIHZhbGlkRm9jdXNUYXJnZXQgY2hlY2suIHRoZSB1c2VyIGRvZXMgdGhhdCBieSBhdHRhY2hpbmcgaXQgdG9cbiAgLy8gZm9jdXNhYmxlIGV2ZW50cyBvbmx5XG5cblxuICByZXR1cm4gaGFkS2V5Ym9hcmRFdmVudCB8fCBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSh0YXJnZXQpO1xufVxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIGlmIGEgYmx1ciBldmVudCBpcyBmaXJlZCBvbiBhIGZvY3VzLXZpc2libGUgZWxlbWVudFxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlQmx1clZpc2libGUoKSB7XG4gIC8vIFRvIGRldGVjdCBhIHRhYi93aW5kb3cgc3dpdGNoLCB3ZSBsb29rIGZvciBhIGJsdXIgZXZlbnQgZm9sbG93ZWRcbiAgLy8gcmFwaWRseSBieSBhIHZpc2liaWxpdHkgY2hhbmdlLlxuICAvLyBJZiB3ZSBkb24ndCBzZWUgYSB2aXNpYmlsaXR5IGNoYW5nZSB3aXRoaW4gMTAwbXMsIGl0J3MgcHJvYmFibHkgYVxuICAvLyByZWd1bGFyIGZvY3VzIGNoYW5nZS5cbiAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSB0cnVlO1xuICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCk7XG4gIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuICB9LCAxMDApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJc0ZvY3VzVmlzaWJsZSgpIHtcbiAgdmFyIHJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIHZhciBub2RlID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuXG4gICAgaWYgKG5vZGUgIT0gbnVsbCkge1xuICAgICAgcHJlcGFyZShub2RlLm93bmVyRG9jdW1lbnQpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZShpc0ZvY3VzVmlzaWJsZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlzRm9jdXNWaXNpYmxlOiBpc0ZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXJWaXNpYmxlOiBoYW5kbGVCbHVyVmlzaWJsZSxcbiAgICByZWY6IHJlZlxuICB9O1xufSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICB3aWR0aDogJzFlbScsXG4gICAgICBoZWlnaHQ6ICcxZW0nLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI0KSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnZmlsbCcsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJhY3Rpb25cImAuICovXG4gICAgY29sb3JBY3Rpb246IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmVcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZGlzYWJsZWRcImAuICovXG4gICAgY29sb3JEaXNhYmxlZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBmb250U2l6ZUluaGVyaXQ6IHtcbiAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBmb250U2l6ZVNtYWxsOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIGZvbnRTaXplTGFyZ2U6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMzUpXG4gICAgfVxuICB9O1xufTtcbnZhciBTdmdJY29uID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdmdJY29uKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnc3ZnJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZm9udFNpemUgPSBwcm9wcy5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3Byb3BzJGZvbnRTaXplID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkZm9udFNpemUsXG4gICAgICBodG1sQ29sb3IgPSBwcm9wcy5odG1sQ29sb3IsXG4gICAgICB0aXRsZUFjY2VzcyA9IHByb3BzLnRpdGxlQWNjZXNzLFxuICAgICAgX3Byb3BzJHZpZXdCb3ggPSBwcm9wcy52aWV3Qm94LFxuICAgICAgdmlld0JveCA9IF9wcm9wcyR2aWV3Qm94ID09PSB2b2lkIDAgPyAnMCAwIDI0IDI0JyA6IF9wcm9wcyR2aWV3Qm94LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZm9udFNpemVcIiwgXCJodG1sQ29sb3JcIiwgXCJ0aXRsZUFjY2Vzc1wiLCBcInZpZXdCb3hcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGNvbG9yICE9PSAnaW5oZXJpdCcgJiYgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIGZvbnRTaXplICE9PSAnZGVmYXVsdCcgJiYgY2xhc3Nlc1tcImZvbnRTaXplXCIuY29uY2F0KGNhcGl0YWxpemUoZm9udFNpemUpKV0pLFxuICAgIGZvY3VzYWJsZTogXCJmYWxzZVwiLFxuICAgIHZpZXdCb3g6IHZpZXdCb3gsXG4gICAgY29sb3I6IGh0bWxDb2xvcixcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRpdGxlQWNjZXNzID8gdW5kZWZpbmVkIDogdHJ1ZSxcbiAgICByb2xlOiB0aXRsZUFjY2VzcyA/ICdpbWcnIDogdW5kZWZpbmVkLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4sIHRpdGxlQWNjZXNzID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiLCBudWxsLCB0aXRsZUFjY2VzcykgOiBudWxsKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3ZnSWNvbi5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBOb2RlIHBhc3NlZCBpbnRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogWW91IGNhbiB1c2UgdGhlIGBodG1sQ29sb3JgIHByb3AgdG8gYXBwbHkgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2FjdGlvbicsICdkaXNhYmxlZCcsICdlcnJvcicsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGZvbnRTaXplIGFwcGxpZWQgdG8gdGhlIGljb24uIERlZmF1bHRzIHRvIDI0cHgsIGJ1dCBjYW4gYmUgY29uZmlndXJlIHRvIGluaGVyaXQgZm9udCBzaXplLlxuICAgKi9cbiAgZm9udFNpemU6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnaW5oZXJpdCcsICdsYXJnZScsICdzbWFsbCddKSxcblxuICAvKipcbiAgICogQXBwbGllcyBhIGNvbG9yIGF0dHJpYnV0ZSB0byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBodG1sQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBzaGFwZS1yZW5kZXJpbmcgYXR0cmlidXRlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZCBvbiB0aGVcbiAgICogW01ETiBXZWIgRG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0F0dHJpYnV0ZS9zaGFwZS1yZW5kZXJpbmcpLlxuICAgKiBJZiB5b3UgYXJlIGhhdmluZyBpc3N1ZXMgd2l0aCBibHVycnkgaWNvbnMgeW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB0aGlzIHByb3BlcnR5LlxuICAgKi9cbiAgc2hhcGVSZW5kZXJpbmc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgaHVtYW4tcmVhZGFibGUgdGl0bGUgZm9yIHRoZSBlbGVtZW50IHRoYXQgY29udGFpbnMgaXQuXG4gICAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9TVkctYWNjZXNzLyNFcXVpdmFsZW50XG4gICAqL1xuICB0aXRsZUFjY2VzczogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byByZWRlZmluZSB3aGF0IHRoZSBjb29yZGluYXRlcyB3aXRob3V0IHVuaXRzIG1lYW4gaW5zaWRlIGFuIFNWRyBlbGVtZW50LlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIFNWRyBlbGVtZW50IGlzIDUwMCAod2lkdGgpIGJ5IDIwMCAoaGVpZ2h0KSxcbiAgICogYW5kIHlvdSBwYXNzIHZpZXdCb3g9XCIwIDAgNTAgMjBcIixcbiAgICogdGhpcyBtZWFucyB0aGF0IHRoZSBjb29yZGluYXRlcyBpbnNpZGUgdGhlIFNWRyB3aWxsIGdvIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciAoMCwwKVxuICAgKiB0byBib3R0b20gcmlnaHQgKDUwLDIwKSBhbmQgZWFjaCB1bml0IHdpbGwgYmUgd29ydGggMTBweC5cbiAgICovXG4gIHZpZXdCb3g6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5TdmdJY29uLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU3ZnSWNvbidcbn0pKFN2Z0ljb24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdmdJY29uIGZyb20gJy4uL1N2Z0ljb24nO1xuLyoqXG4gKiBQcml2YXRlIG1vZHVsZSByZXNlcnZlZCBmb3IgQG1hdGVyaWFsLXVpL3ggcGFja2FnZXMuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3ZnSWNvbihwYXRoLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgQ29tcG9uZW50ID0gUmVhY3QubWVtbyhSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFN2Z0ljb24sIF9leHRlbmRzKHtcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMpLCBwYXRoKTtcbiAgfSkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gXCJcIi5jb25jYXQoZGlzcGxheU5hbWUsIFwiSWNvblwiKTtcbiAgfVxuXG4gIENvbXBvbmVudC5tdWlOYW1lID0gU3ZnSWNvbi5tdWlOYW1lO1xuICByZXR1cm4gQ29tcG9uZW50O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoaXRlbSkge1xuICByZXR1cm4gaXRlbSAmJiBfdHlwZW9mKGl0ZW0pID09PSAnb2JqZWN0JyAmJiBpdGVtLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHtcbiAgICBjbG9uZTogdHJ1ZVxuICB9O1xuICB2YXIgb3V0cHV0ID0gb3B0aW9ucy5jbG9uZSA/IF9leHRlbmRzKHt9LCB0YXJnZXQpIDogdGFyZ2V0O1xuXG4gIGlmIChpc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8vIEF2b2lkIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pICYmIGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbi8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbi8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbmV4cG9ydCB2YXIga2V5cyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXTsgLy8gS2VlcCBpbiBtaW5kIHRoYXQgQG1lZGlhIGlzIGluY2x1c2l2ZSBieSB0aGUgQ1NTIHNwZWNpZmljYXRpb24uXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKSB7XG4gIHZhciBfYnJlYWtwb2ludHMkdmFsdWVzID0gYnJlYWtwb2ludHMudmFsdWVzLFxuICAgICAgdmFsdWVzID0gX2JyZWFrcG9pbnRzJHZhbHVlcyA9PT0gdm9pZCAwID8ge1xuICAgIHhzOiAwLFxuICAgIHNtOiA2MDAsXG4gICAgbWQ6IDk2MCxcbiAgICBsZzogMTI4MCxcbiAgICB4bDogMTkyMFxuICB9IDogX2JyZWFrcG9pbnRzJHZhbHVlcyxcbiAgICAgIF9icmVha3BvaW50cyR1bml0ID0gYnJlYWtwb2ludHMudW5pdCxcbiAgICAgIHVuaXQgPSBfYnJlYWtwb2ludHMkdW5pdCA9PT0gdm9pZCAwID8gJ3B4JyA6IF9icmVha3BvaW50cyR1bml0LFxuICAgICAgX2JyZWFrcG9pbnRzJHN0ZXAgPSBicmVha3BvaW50cy5zdGVwLFxuICAgICAgc3RlcCA9IF9icmVha3BvaW50cyRzdGVwID09PSB2b2lkIDAgPyA1IDogX2JyZWFrcG9pbnRzJHN0ZXAsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhicmVha3BvaW50cywgW1widmFsdWVzXCIsIFwidW5pdFwiLCBcInN0ZXBcIl0pO1xuXG4gIGZ1bmN0aW9uIHVwKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodmFsdWUpLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBkb3duKGtleSkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihrZXkpICsgMTtcbiAgICB2YXIgdXBwZXJib3VuZCA9IHZhbHVlc1trZXlzW2VuZEluZGV4XV07XG5cbiAgICBpZiAoZW5kSW5kZXggPT09IGtleXMubGVuZ3RoKSB7XG4gICAgICAvLyB4bCBkb3duIGFwcGxpZXMgdG8gYWxsIHNpemVzXG4gICAgICByZXR1cm4gdXAoJ3hzJyk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHVwcGVyYm91bmQgPT09ICdudW1iZXInICYmIGVuZEluZGV4ID4gMCA/IHVwcGVyYm91bmQgOiBrZXk7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtYXgtd2lkdGg6XCIuY29uY2F0KHZhbHVlIC0gc3RlcCAvIDEwMCkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJldHdlZW4oc3RhcnQsIGVuZCkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihlbmQpO1xuXG4gICAgaWYgKGVuZEluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiB1cChzdGFydCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHR5cGVvZiB2YWx1ZXNbc3RhcnRdID09PSAnbnVtYmVyJyA/IHZhbHVlc1tzdGFydF0gOiBzdGFydCkuY29uY2F0KHVuaXQsIFwiKSBhbmQgXCIpICsgXCIobWF4LXdpZHRoOlwiLmNvbmNhdCgoZW5kSW5kZXggIT09IC0xICYmIHR5cGVvZiB2YWx1ZXNba2V5c1tlbmRJbmRleCArIDFdXSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5c1tlbmRJbmRleCArIDFdXSA6IGVuZCkgLSBzdGVwIC8gMTAwKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25seShrZXkpIHtcbiAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiB3aWR0aChrZXkpIHtcbiAgICByZXR1cm4gdmFsdWVzW2tleV07XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGtleXM6IGtleXMsXG4gICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgdXA6IHVwLFxuICAgIGRvd246IGRvd24sXG4gICAgYmV0d2VlbjogYmV0d2VlbixcbiAgICBvbmx5OiBvbmx5LFxuICAgIHdpZHRoOiB3aWR0aFxuICB9LCBvdGhlcik7XG59IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBzcGFjaW5nLCBtaXhpbnMpIHtcbiAgdmFyIF90b29sYmFyO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZ3V0dGVyczogZnVuY3Rpb24gZ3V0dGVycygpIHtcbiAgICAgIHZhciBzdHlsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgLy8gVG8gZGVwcmVjYXRlIGluIHY0LjFcbiAgICAgIC8vICAgICAgIHdhcm5pbmcoXG4gICAgICAvLyAgICAgICAgIGZhbHNlLFxuICAgICAgLy8gICAgICAgICBbXG4gICAgICAvLyAgICAgICAgICAgJ01hdGVyaWFsLVVJOiBUaGVtZS5taXhpbnMuZ3V0dGVycygpIGlzIGRlcHJlY2F0ZWQuJyxcbiAgICAgIC8vICAgICAgICAgICAnWW91IGNhbiB1c2UgdGhlIHNvdXJjZSBvZiB0aGUgbWl4aW4gZGlyZWN0bHk6JyxcbiAgICAgIC8vICAgICAgICAgICBgXG4gICAgICAvLyBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIC8vIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIC8vIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgIC8vICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICAvLyAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIC8vIH0sXG4gICAgICAvLyBgLFxuICAgICAgLy8gICAgICAgICBdLmpvaW4oJ1xcbicpLFxuICAgICAgLy8gICAgICAgKTtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyhfZXh0ZW5kcyh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nKDIpLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcoMilcbiAgICAgIH0sIHN0eWxlcyksIHt9LCBfZGVmaW5lUHJvcGVydHkoe30sIGJyZWFrcG9pbnRzLnVwKCdzbScpLCBfZXh0ZW5kcyh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nKDMpLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcoMylcbiAgICAgIH0sIHN0eWxlc1ticmVha3BvaW50cy51cCgnc20nKV0pKSk7XG4gICAgfSxcbiAgICB0b29sYmFyOiAoX3Rvb2xiYXIgPSB7XG4gICAgICBtaW5IZWlnaHQ6IDU2XG4gICAgfSwgX2RlZmluZVByb3BlcnR5KF90b29sYmFyLCBcIlwiLmNvbmNhdChicmVha3BvaW50cy51cCgneHMnKSwgXCIgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVwiKSwge1xuICAgICAgbWluSGVpZ2h0OiA0OFxuICAgIH0pLCBfZGVmaW5lUHJvcGVydHkoX3Rvb2xiYXIsIGJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgfSksIF90b29sYmFyKVxuICB9LCBtaXhpbnMpO1xufSIsInZhciBjb21tb24gPSB7XG4gIGJsYWNrOiAnIzAwMCcsXG4gIHdoaXRlOiAnI2ZmZidcbn07XG5leHBvcnQgZGVmYXVsdCBjb21tb247IiwidmFyIGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZDVkNWQ1JyxcbiAgQTIwMDogJyNhYWFhYWEnLFxuICBBNDAwOiAnIzMwMzAzMCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZXk7IiwidmFyIGluZGlnbyA9IHtcbiAgNTA6ICcjZThlYWY2JyxcbiAgMTAwOiAnI2M1Y2FlOScsXG4gIDIwMDogJyM5ZmE4ZGEnLFxuICAzMDA6ICcjNzk4NmNiJyxcbiAgNDAwOiAnIzVjNmJjMCcsXG4gIDUwMDogJyMzZjUxYjUnLFxuICA2MDA6ICcjMzk0OWFiJyxcbiAgNzAwOiAnIzMwM2Y5ZicsXG4gIDgwMDogJyMyODM1OTMnLFxuICA5MDA6ICcjMWEyMzdlJyxcbiAgQTEwMDogJyM4YzllZmYnLFxuICBBMjAwOiAnIzUzNmRmZScsXG4gIEE0MDA6ICcjM2Q1YWZlJyxcbiAgQTcwMDogJyMzMDRmZmUnXG59O1xuZXhwb3J0IGRlZmF1bHQgaW5kaWdvOyIsInZhciBwaW5rID0ge1xuICA1MDogJyNmY2U0ZWMnLFxuICAxMDA6ICcjZjhiYmQwJyxcbiAgMjAwOiAnI2Y0OGZiMScsXG4gIDMwMDogJyNmMDYyOTInLFxuICA0MDA6ICcjZWM0MDdhJyxcbiAgNTAwOiAnI2U5MWU2MycsXG4gIDYwMDogJyNkODFiNjAnLFxuICA3MDA6ICcjYzIxODViJyxcbiAgODAwOiAnI2FkMTQ1NycsXG4gIDkwMDogJyM4ODBlNGYnLFxuICBBMTAwOiAnI2ZmODBhYicsXG4gIEEyMDA6ICcjZmY0MDgxJyxcbiAgQTQwMDogJyNmNTAwNTcnLFxuICBBNzAwOiAnI2M1MTE2Midcbn07XG5leHBvcnQgZGVmYXVsdCBwaW5rOyIsInZhciByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHJlZDsiLCJ2YXIgb3JhbmdlID0ge1xuICA1MDogJyNmZmYzZTAnLFxuICAxMDA6ICcjZmZlMGIyJyxcbiAgMjAwOiAnI2ZmY2M4MCcsXG4gIDMwMDogJyNmZmI3NGQnLFxuICA0MDA6ICcjZmZhNzI2JyxcbiAgNTAwOiAnI2ZmOTgwMCcsXG4gIDYwMDogJyNmYjhjMDAnLFxuICA3MDA6ICcjZjU3YzAwJyxcbiAgODAwOiAnI2VmNmMwMCcsXG4gIDkwMDogJyNlNjUxMDAnLFxuICBBMTAwOiAnI2ZmZDE4MCcsXG4gIEEyMDA6ICcjZmZhYjQwJyxcbiAgQTQwMDogJyNmZjkxMDAnLFxuICBBNzAwOiAnI2ZmNmQwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBvcmFuZ2U7IiwidmFyIGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGJsdWU7IiwidmFyIGdyZWVuID0ge1xuICA1MDogJyNlOGY1ZTknLFxuICAxMDA6ICcjYzhlNmM5JyxcbiAgMjAwOiAnI2E1ZDZhNycsXG4gIDMwMDogJyM4MWM3ODQnLFxuICA0MDA6ICcjNjZiYjZhJyxcbiAgNTAwOiAnIzRjYWY1MCcsXG4gIDYwMDogJyM0M2EwNDcnLFxuICA3MDA6ICcjMzg4ZTNjJyxcbiAgODAwOiAnIzJlN2QzMicsXG4gIDkwMDogJyMxYjVlMjAnLFxuICBBMTAwOiAnI2I5ZjZjYScsXG4gIEEyMDA6ICcjNjlmMGFlJyxcbiAgQTQwMDogJyMwMGU2NzYnLFxuICBBNzAwOiAnIzAwYzg1Mydcbn07XG5leHBvcnQgZGVmYXVsdCBncmVlbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGNvbW1vbiBmcm9tICcuLi9jb2xvcnMvY29tbW9uJztcbmltcG9ydCBncmV5IGZyb20gJy4uL2NvbG9ycy9ncmV5JztcbmltcG9ydCBpbmRpZ28gZnJvbSAnLi4vY29sb3JzL2luZGlnbyc7XG5pbXBvcnQgcGluayBmcm9tICcuLi9jb2xvcnMvcGluayc7XG5pbXBvcnQgcmVkIGZyb20gJy4uL2NvbG9ycy9yZWQnO1xuaW1wb3J0IG9yYW5nZSBmcm9tICcuLi9jb2xvcnMvb3JhbmdlJztcbmltcG9ydCBibHVlIGZyb20gJy4uL2NvbG9ycy9ibHVlJztcbmltcG9ydCBncmVlbiBmcm9tICcuLi9jb2xvcnMvZ3JlZW4nO1xuaW1wb3J0IHsgZGFya2VuLCBnZXRDb250cmFzdFJhdGlvLCBsaWdodGVuIH0gZnJvbSAnLi9jb2xvck1hbmlwdWxhdG9yJztcbmV4cG9ydCB2YXIgbGlnaHQgPSB7XG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgdGV4dC5cbiAgdGV4dDoge1xuICAgIC8vIFRoZSBtb3N0IGltcG9ydGFudCB0ZXh0LlxuICAgIHByaW1hcnk6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgICAvLyBTZWNvbmRhcnkgdGV4dC5cbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBEaXNhYmxlZCB0ZXh0IGhhdmUgZXZlbiBsb3dlciB2aXN1YWwgcHJvbWluZW5jZS5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknLFxuICAgIC8vIFRleHQgaGludHMuXG4gICAgaGludDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknXG4gIH0sXG4gIC8vIFRoZSBjb2xvciB1c2VkIHRvIGRpdmlkZSBkaWZmZXJlbnQgZWxlbWVudHMuXG4gIGRpdmlkZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgLy8gVGhlIGJhY2tncm91bmQgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHN1cmZhY2VzLlxuICAvLyBDb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZXNlIHZhbHVlcyBpcyBpbXBvcnRhbnQuXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogY29tbW9uLndoaXRlLFxuICAgIGRlZmF1bHQ6IGdyZXlbNTBdXG4gIH0sXG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgYWN0aW9uIGVsZW1lbnRzLlxuICBhY3Rpb246IHtcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gYWN0aXZlIGFjdGlvbiBsaWtlIGFuIGljb24gYnV0dG9uLlxuICAgIGFjdGl2ZTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBob3ZlcmVkIGFjdGlvbi5cbiAgICBob3ZlcjogJ3JnYmEoMCwgMCwgMCwgMC4wNCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wNCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBzZWxlY3RlZCBhY3Rpb24uXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMTJcbiAgfVxufTtcbmV4cG9ydCB2YXIgZGFyayA9IHtcbiAgdGV4dDoge1xuICAgIHByaW1hcnk6IGNvbW1vbi53aGl0ZSxcbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBoaW50OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBpY29uOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJ1xuICB9LFxuICBkaXZpZGVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogZ3JleVs4MDBdLFxuICAgIGRlZmF1bHQ6ICcjMzAzMDMwJ1xuICB9LFxuICBhY3Rpb246IHtcbiAgICBhY3RpdmU6IGNvbW1vbi53aGl0ZSxcbiAgICBob3ZlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wOCxcbiAgICBzZWxlY3RlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNiknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4xNixcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMjRcbiAgfVxufTtcblxuZnVuY3Rpb24gYWRkTGlnaHRPckRhcmsoaW50ZW50LCBkaXJlY3Rpb24sIHNoYWRlLCB0b25hbE9mZnNldCkge1xuICB2YXIgdG9uYWxPZmZzZXRMaWdodCA9IHRvbmFsT2Zmc2V0LmxpZ2h0IHx8IHRvbmFsT2Zmc2V0O1xuICB2YXIgdG9uYWxPZmZzZXREYXJrID0gdG9uYWxPZmZzZXQuZGFyayB8fCB0b25hbE9mZnNldCAqIDEuNTtcblxuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gbGlnaHRlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXRMaWdodCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkYXJrJykge1xuICAgICAgaW50ZW50LmRhcmsgPSBkYXJrZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0RGFyayk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICB2YXIgX3BhbGV0dGUkcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSxcbiAgICAgIHByaW1hcnkgPSBfcGFsZXR0ZSRwcmltYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGluZGlnb1szMDBdLFxuICAgIG1haW46IGluZGlnb1s1MDBdLFxuICAgIGRhcms6IGluZGlnb1s3MDBdXG4gIH0gOiBfcGFsZXR0ZSRwcmltYXJ5LFxuICAgICAgX3BhbGV0dGUkc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnksXG4gICAgICBzZWNvbmRhcnkgPSBfcGFsZXR0ZSRzZWNvbmRhcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogcGluay5BMjAwLFxuICAgIG1haW46IHBpbmsuQTQwMCxcbiAgICBkYXJrOiBwaW5rLkE3MDBcbiAgfSA6IF9wYWxldHRlJHNlY29uZGFyeSxcbiAgICAgIF9wYWxldHRlJGVycm9yID0gcGFsZXR0ZS5lcnJvcixcbiAgICAgIGVycm9yID0gX3BhbGV0dGUkZXJyb3IgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgbWFpbjogcmVkWzUwMF0sXG4gICAgZGFyazogcmVkWzcwMF1cbiAgfSA6IF9wYWxldHRlJGVycm9yLFxuICAgICAgX3BhbGV0dGUkd2FybmluZyA9IHBhbGV0dGUud2FybmluZyxcbiAgICAgIHdhcm5pbmcgPSBfcGFsZXR0ZSR3YXJuaW5nID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IG9yYW5nZVszMDBdLFxuICAgIG1haW46IG9yYW5nZVs1MDBdLFxuICAgIGRhcms6IG9yYW5nZVs3MDBdXG4gIH0gOiBfcGFsZXR0ZSR3YXJuaW5nLFxuICAgICAgX3BhbGV0dGUkaW5mbyA9IHBhbGV0dGUuaW5mbyxcbiAgICAgIGluZm8gPSBfcGFsZXR0ZSRpbmZvID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGJsdWVbMzAwXSxcbiAgICBtYWluOiBibHVlWzUwMF0sXG4gICAgZGFyazogYmx1ZVs3MDBdXG4gIH0gOiBfcGFsZXR0ZSRpbmZvLFxuICAgICAgX3BhbGV0dGUkc3VjY2VzcyA9IHBhbGV0dGUuc3VjY2VzcyxcbiAgICAgIHN1Y2Nlc3MgPSBfcGFsZXR0ZSRzdWNjZXNzID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGdyZWVuWzMwMF0sXG4gICAgbWFpbjogZ3JlZW5bNTAwXSxcbiAgICBkYXJrOiBncmVlbls3MDBdXG4gIH0gOiBfcGFsZXR0ZSRzdWNjZXNzLFxuICAgICAgX3BhbGV0dGUkdHlwZSA9IHBhbGV0dGUudHlwZSxcbiAgICAgIHR5cGUgPSBfcGFsZXR0ZSR0eXBlID09PSB2b2lkIDAgPyAnbGlnaHQnIDogX3BhbGV0dGUkdHlwZSxcbiAgICAgIF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9IHBhbGV0dGUuY29udHJhc3RUaHJlc2hvbGQsXG4gICAgICBjb250cmFzdFRocmVzaG9sZCA9IF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9PT0gdm9pZCAwID8gMyA6IF9wYWxldHRlJGNvbnRyYXN0VGhyZSxcbiAgICAgIF9wYWxldHRlJHRvbmFsT2Zmc2V0ID0gcGFsZXR0ZS50b25hbE9mZnNldCxcbiAgICAgIHRvbmFsT2Zmc2V0ID0gX3BhbGV0dGUkdG9uYWxPZmZzZXQgPT09IHZvaWQgMCA/IDAuMiA6IF9wYWxldHRlJHRvbmFsT2Zmc2V0LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocGFsZXR0ZSwgW1wicHJpbWFyeVwiLCBcInNlY29uZGFyeVwiLCBcImVycm9yXCIsIFwid2FybmluZ1wiLCBcImluZm9cIiwgXCJzdWNjZXNzXCIsIFwidHlwZVwiLCBcImNvbnRyYXN0VGhyZXNob2xkXCIsIFwidG9uYWxPZmZzZXRcIl0pOyAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgLy8gQm9vdHN0cmFwOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8xZDZlMzcxMGRkNDQ3ZGUxYTIwMGYyOWU4ZmE1MjFmOGEwOTA4ZjcwL3Njc3MvX2Z1bmN0aW9ucy5zY3NzI0w1OVxuICAvLyBhbmQgbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9hYzQ2Yjg4NjNjNGRhYjlmYzIyYzRjNjYyZGM2YmQxYjY1ZGQ2NTJmL3BhY2thZ2VzL21kYy10aGVtZS9fZnVuY3Rpb25zLnNjc3MjTDU0XG5cblxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIHZhciBjb250cmFzdFRleHQgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGRhcmsudGV4dC5wcmltYXJ5KSA+PSBjb250cmFzdFRocmVzaG9sZCA/IGRhcmsudGV4dC5wcmltYXJ5IDogbGlnaHQudGV4dC5wcmltYXJ5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBjb250cmFzdCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgY29udHJhc3RUZXh0KTtcblxuICAgICAgaWYgKGNvbnRyYXN0IDwgMykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgY29udHJhc3QgcmF0aW8gb2YgXCIuY29uY2F0KGNvbnRyYXN0LCBcIjoxIGZvciBcIikuY29uY2F0KGNvbnRyYXN0VGV4dCwgXCIgb24gXCIpLmNvbmNhdChiYWNrZ3JvdW5kKSwgJ2ZhbGxzIGJlbG93IHRoZSBXQ0FHIHJlY29tbWVuZGVkIGFic29sdXRlIG1pbmltdW0gY29udHJhc3QgcmF0aW8gb2YgMzoxLicsICdodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyN2aXN1YWwtYXVkaW8tY29udHJhc3QtY29udHJhc3QnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRyYXN0VGV4dDtcbiAgfVxuXG4gIHZhciBhdWdtZW50Q29sb3IgPSBmdW5jdGlvbiBhdWdtZW50Q29sb3IoY29sb3IpIHtcbiAgICB2YXIgbWFpblNoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA1MDA7XG4gICAgdmFyIGxpZ2h0U2hhZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDMwMDtcbiAgICB2YXIgZGFya1NoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiA3MDA7XG4gICAgY29sb3IgPSBfZXh0ZW5kcyh7fSwgY29sb3IpO1xuXG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cblxuICAgIGlmICghY29sb3IubWFpbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBjb2xvciBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuJywgXCJUaGUgY29sb3Igb2JqZWN0IG5lZWRzIHRvIGhhdmUgYSBgbWFpbmAgcHJvcGVydHkgb3IgYSBgXCIuY29uY2F0KG1haW5TaGFkZSwgXCJgIHByb3BlcnR5LlwiKV0uam9pbignXFxuJykpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29sb3IubWFpbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgY29sb3IgcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLicsIFwiYGNvbG9yLm1haW5gIHNob3VsZCBiZSBhIHN0cmluZywgYnV0IGBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbiksIFwiYCB3YXMgcHJvdmlkZWQgaW5zdGVhZC5cIiksICcnLCAnRGlkIHlvdSBpbnRlbmQgdG8gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIGFwcHJvYWNoZXM/JywgJycsICdpbXBvcnQge8KgZ3JlZW4gfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzXCI7JywgJycsICdjb25zdCB0aGVtZTEgPSBjcmVhdGVNdWlUaGVtZSh7IHBhbGV0dGU6IHsnLCAnICBwcmltYXJ5OiBncmVlbiwnLCAnfSB9KTsnLCAnJywgJ2NvbnN0IHRoZW1lMiA9IGNyZWF0ZU11aVRoZW1lKHsgcGFsZXR0ZTogeycsICcgIHByaW1hcnk6IHsgbWFpbjogZ3JlZW5bNTAwXSB9LCcsICd9IH0pOyddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuXG4gICAgaWYgKCFjb2xvci5jb250cmFzdFRleHQpIHtcbiAgICAgIGNvbG9yLmNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0VGV4dChjb2xvci5tYWluKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29sb3I7XG4gIH07XG5cbiAgdmFyIHR5cGVzID0ge1xuICAgIGRhcms6IGRhcmssXG4gICAgbGlnaHQ6IGxpZ2h0XG4gIH07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXR5cGVzW3R5cGVdKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFRoZSBwYWxldHRlIHR5cGUgYFwiLmNvbmNhdCh0eXBlLCBcImAgaXMgbm90IHN1cHBvcnRlZC5cIikpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwYWxldHRlT3V0cHV0ID0gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICAvLyBBIGNvbGxlY3Rpb24gb2YgY29tbW9uIGNvbG9ycy5cbiAgICBjb21tb246IGNvbW1vbixcbiAgICAvLyBUaGUgcGFsZXR0ZSB0eXBlLCBjYW4gYmUgbGlnaHQgb3IgZGFyay5cbiAgICB0eXBlOiB0eXBlLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcHJpbWFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBwcmltYXJ5OiBhdWdtZW50Q29sb3IocHJpbWFyeSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBzZWNvbmRhcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgc2Vjb25kYXJ5OiBhdWdtZW50Q29sb3Ioc2Vjb25kYXJ5LCAnQTQwMCcsICdBMjAwJywgJ0E3MDAnKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IGludGVyZmFjZSBlbGVtZW50cyB0aGF0IHRoZSB1c2VyIHNob3VsZCBiZSBtYWRlIGF3YXJlIG9mLlxuICAgIGVycm9yOiBhdWdtZW50Q29sb3IoZXJyb3IpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIGFjdGlvbnMgb3IgaW1wb3J0YW50IG1lc3NhZ2VzLlxuICAgIHdhcm5pbmc6IGF1Z21lbnRDb2xvcih3YXJuaW5nKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcHJlc2VudCBpbmZvcm1hdGlvbiB0byB0aGUgdXNlciB0aGF0IGlzIG5ldXRyYWwgYW5kIG5vdCBuZWNlc3NhcmlseSBpbXBvcnRhbnQuXG4gICAgaW5mbzogYXVnbWVudENvbG9yKGluZm8pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBpbmRpY2F0ZSB0aGUgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uIG9mIGFuIGFjdGlvbiB0aGF0IHVzZXIgdHJpZ2dlcmVkLlxuICAgIHN1Y2Nlc3M6IGF1Z21lbnRDb2xvcihzdWNjZXNzKSxcbiAgICAvLyBUaGUgZ3JleSBjb2xvcnMuXG4gICAgZ3JleTogZ3JleSxcbiAgICAvLyBVc2VkIGJ5IGBnZXRDb250cmFzdFRleHQoKWAgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0IGJldHdlZW5cbiAgICAvLyB0aGUgYmFja2dyb3VuZCBhbmQgdGhlIHRleHQuXG4gICAgY29udHJhc3RUaHJlc2hvbGQ6IGNvbnRyYXN0VGhyZXNob2xkLFxuICAgIC8vIFRha2VzIGEgYmFja2dyb3VuZCBjb2xvciBhbmQgcmV0dXJucyB0aGUgdGV4dCBjb2xvciB0aGF0IG1heGltaXplcyB0aGUgY29udHJhc3QuXG4gICAgZ2V0Q29udHJhc3RUZXh0OiBnZXRDb250cmFzdFRleHQsXG4gICAgLy8gR2VuZXJhdGUgYSByaWNoIGNvbG9yIG9iamVjdC5cbiAgICBhdWdtZW50Q29sb3I6IGF1Z21lbnRDb2xvcixcbiAgICAvLyBVc2VkIGJ5IHRoZSBmdW5jdGlvbnMgYmVsb3cgdG8gc2hpZnQgYSBjb2xvcidzIGx1bWluYW5jZSBieSBhcHByb3hpbWF0ZWx5XG4gICAgLy8gdHdvIGluZGV4ZXMgd2l0aGluIGl0cyB0b25hbCBwYWxldHRlLlxuICAgIC8vIEUuZy4sIHNoaWZ0IGZyb20gUmVkIDUwMCB0byBSZWQgMzAwIG9yIFJlZCA3MDAuXG4gICAgdG9uYWxPZmZzZXQ6IHRvbmFsT2Zmc2V0XG4gIH0sIHR5cGVzW3R5cGVdKSwgb3RoZXIpO1xuICByZXR1cm4gcGFsZXR0ZU91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5cbnZhciBjYXNlQWxsQ2FwcyA9IHtcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn07XG52YXIgZGVmYXVsdEZvbnRGYW1pbHkgPSAnXCJSb2JvdG9cIiwgXCJIZWx2ZXRpY2FcIiwgXCJBcmlhbFwiLCBzYW5zLXNlcmlmJztcbi8qKlxuICogQHNlZSBAbGlua3todHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3RoZS10eXBlLXN5c3RlbS5odG1sfVxuICogQHNlZSBAbGlua3todHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3VuZGVyc3RhbmRpbmctdHlwb2dyYXBoeS5odG1sfVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeSkge1xuICB2YXIgX3JlZiA9IHR5cGVvZiB0eXBvZ3JhcGh5ID09PSAnZnVuY3Rpb24nID8gdHlwb2dyYXBoeShwYWxldHRlKSA6IHR5cG9ncmFwaHksXG4gICAgICBfcmVmJGZvbnRGYW1pbHkgPSBfcmVmLmZvbnRGYW1pbHksXG4gICAgICBmb250RmFtaWx5ID0gX3JlZiRmb250RmFtaWx5ID09PSB2b2lkIDAgPyBkZWZhdWx0Rm9udEZhbWlseSA6IF9yZWYkZm9udEZhbWlseSxcbiAgICAgIF9yZWYkZm9udFNpemUgPSBfcmVmLmZvbnRTaXplLFxuICAgICAgZm9udFNpemUgPSBfcmVmJGZvbnRTaXplID09PSB2b2lkIDAgPyAxNCA6IF9yZWYkZm9udFNpemUsXG4gICAgICBfcmVmJGZvbnRXZWlnaHRMaWdodCA9IF9yZWYuZm9udFdlaWdodExpZ2h0LFxuICAgICAgZm9udFdlaWdodExpZ2h0ID0gX3JlZiRmb250V2VpZ2h0TGlnaHQgPT09IHZvaWQgMCA/IDMwMCA6IF9yZWYkZm9udFdlaWdodExpZ2h0LFxuICAgICAgX3JlZiRmb250V2VpZ2h0UmVndWxhID0gX3JlZi5mb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRXZWlnaHRSZWd1bGFyID0gX3JlZiRmb250V2VpZ2h0UmVndWxhID09PSB2b2lkIDAgPyA0MDAgOiBfcmVmJGZvbnRXZWlnaHRSZWd1bGEsXG4gICAgICBfcmVmJGZvbnRXZWlnaHRNZWRpdW0gPSBfcmVmLmZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250V2VpZ2h0TWVkaXVtID0gX3JlZiRmb250V2VpZ2h0TWVkaXVtID09PSB2b2lkIDAgPyA1MDAgOiBfcmVmJGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBfcmVmJGZvbnRXZWlnaHRCb2xkID0gX3JlZi5mb250V2VpZ2h0Qm9sZCxcbiAgICAgIGZvbnRXZWlnaHRCb2xkID0gX3JlZiRmb250V2VpZ2h0Qm9sZCA9PT0gdm9pZCAwID8gNzAwIDogX3JlZiRmb250V2VpZ2h0Qm9sZCxcbiAgICAgIF9yZWYkaHRtbEZvbnRTaXplID0gX3JlZi5odG1sRm9udFNpemUsXG4gICAgICBodG1sRm9udFNpemUgPSBfcmVmJGh0bWxGb250U2l6ZSA9PT0gdm9pZCAwID8gMTYgOiBfcmVmJGh0bWxGb250U2l6ZSxcbiAgICAgIGFsbFZhcmlhbnRzID0gX3JlZi5hbGxWYXJpYW50cyxcbiAgICAgIHB4VG9SZW0yID0gX3JlZi5weFRvUmVtLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiZm9udEZhbWlseVwiLCBcImZvbnRTaXplXCIsIFwiZm9udFdlaWdodExpZ2h0XCIsIFwiZm9udFdlaWdodFJlZ3VsYXJcIiwgXCJmb250V2VpZ2h0TWVkaXVtXCIsIFwiZm9udFdlaWdodEJvbGRcIiwgXCJodG1sRm9udFNpemVcIiwgXCJhbGxWYXJpYW50c1wiLCBcInB4VG9SZW1cIl0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBmb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBgZm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaHRtbEZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IGBodG1sRm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb2VmID0gZm9udFNpemUgLyAxNDtcblxuICB2YXIgcHhUb1JlbSA9IHB4VG9SZW0yIHx8IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHNpemUgLyBodG1sRm9udFNpemUgKiBjb2VmLCBcInJlbVwiKTtcbiAgfTtcblxuICB2YXIgYnVpbGRWYXJpYW50ID0gZnVuY3Rpb24gYnVpbGRWYXJpYW50KGZvbnRXZWlnaHQsIHNpemUsIGxpbmVIZWlnaHQsIGxldHRlclNwYWNpbmcsIGNhc2luZykge1xuICAgIHJldHVybiBfZXh0ZW5kcyhfZXh0ZW5kcyhfZXh0ZW5kcyh7XG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodCxcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgICAgLy8gVW5pdGxlc3MgZm9sbG93aW5nIGh0dHBzOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdGhvdWdodHMvMjAwNi8wMi8wOC91bml0bGVzcy1saW5lLWhlaWdodHMvXG4gICAgICBsaW5lSGVpZ2h0OiBsaW5lSGVpZ2h0XG4gICAgfSwgZm9udEZhbWlseSA9PT0gZGVmYXVsdEZvbnRGYW1pbHkgPyB7XG4gICAgICBsZXR0ZXJTcGFjaW5nOiBcIlwiLmNvbmNhdChyb3VuZChsZXR0ZXJTcGFjaW5nIC8gc2l6ZSksIFwiZW1cIilcbiAgICB9IDoge30pLCBjYXNpbmcpLCBhbGxWYXJpYW50cyk7XG4gIH07XG5cbiAgdmFyIHZhcmlhbnRzID0ge1xuICAgIGgxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA5NiwgMS4xNjcsIC0xLjUpLFxuICAgIGgyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA2MCwgMS4yLCAtMC41KSxcbiAgICBoMzogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCA0OCwgMS4xNjcsIDApLFxuICAgIGg0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDM0LCAxLjIzNSwgMC4yNSksXG4gICAgaDU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMjQsIDEuMzM0LCAwKSxcbiAgICBoNjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDIwLCAxLjYsIDAuMTUpLFxuICAgIHN1YnRpdGxlMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS43NSwgMC4xNSksXG4gICAgc3VidGl0bGUyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNTcsIDAuMSksXG4gICAgYm9keTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNSwgMC4xNSksXG4gICAgYm9keTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNDMsIDAuMTUpLFxuICAgIGJ1dHRvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjc1LCAwLjQsIGNhc2VBbGxDYXBzKSxcbiAgICBjYXB0aW9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTtcbiAgcmV0dXJuIGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgaHRtbEZvbnRTaXplOiBodG1sRm9udFNpemUsXG4gICAgcHhUb1JlbTogcHhUb1JlbSxcbiAgICByb3VuZDogcm91bmQsXG4gICAgLy8gVE9ETyB2NTogcmVtb3ZlXG4gICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0OiBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXI6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW06IGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgZm9udFdlaWdodEJvbGQ6IGZvbnRXZWlnaHRCb2xkXG4gIH0sIHZhcmlhbnRzKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG5cbiAgfSk7XG59IiwidmFyIHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbnZhciBzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkgPSAwLjE0O1xudmFyIHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5ID0gMC4xMjtcblxuZnVuY3Rpb24gY3JlYXRlU2hhZG93KCkge1xuICByZXR1cm4gW1wiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5VW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s0XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s1XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s2XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s3XSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5UGVudW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s4XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s5XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTBdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxMV0sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5LCBcIilcIildLmpvaW4oJywnKTtcbn0gLy8gVmFsdWVzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9iZTg3NDdmOTQ1NzQ2NjljYjVlN2FkZDFhN2M1NGZhNDFhODljZWM3L3BhY2thZ2VzL21kYy1lbGV2YXRpb24vX3ZhcmlhYmxlcy5zY3NzXG5cblxudmFyIHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwidmFyIHNoYXBlID0ge1xuICBib3JkZXJSYWRpdXM6IDRcbn07XG5leHBvcnQgZGVmYXVsdCBzaGFwZTsiLCJpbXBvcnQgeyBjcmVhdGVVbmFyeVNwYWNpbmcgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3lzdGVtJztcbnZhciB3YXJuT25jZTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNwYWNpbmcoKSB7XG4gIHZhciBzcGFjaW5nSW5wdXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDg7XG5cbiAgLy8gQWxyZWFkeSB0cmFuc2Zvcm1lZC5cbiAgaWYgKHNwYWNpbmdJbnB1dC5tdWkpIHtcbiAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICB9IC8vIE1hdGVyaWFsIERlc2lnbiBsYXlvdXRzIGFyZSB2aXN1YWxseSBiYWxhbmNlZC4gTW9zdCBtZWFzdXJlbWVudHMgYWxpZ24gdG8gYW4gOGRwIGdyaWQgYXBwbGllZCwgd2hpY2ggYWxpZ25zIGJvdGggc3BhY2luZyBhbmQgdGhlIG92ZXJhbGwgbGF5b3V0LlxuICAvLyBTbWFsbGVyIGNvbXBvbmVudHMsIHN1Y2ggYXMgaWNvbnMgYW5kIHR5cGUsIGNhbiBhbGlnbiB0byBhIDRkcCBncmlkLlxuICAvLyBodHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi9sYXlvdXQvdW5kZXJzdGFuZGluZy1sYXlvdXQuaHRtbCN1c2FnZVxuXG5cbiAgdmFyIHRyYW5zZm9ybSA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh7XG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0XG4gIH0pO1xuXG4gIHZhciBzcGFjaW5nID0gZnVuY3Rpb24gc3BhY2luZygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghKGFyZ3MubGVuZ3RoIDw9IDQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVG9vIG1hbnkgYXJndW1lbnRzIHByb3ZpZGVkLCBleHBlY3RlZCBiZXR3ZWVuIDAgYW5kIDQsIGdvdCBcIi5jb25jYXQoYXJncy5sZW5ndGgpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm0oMSk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtKGFyZ3NbMF0pO1xuICAgIH1cblxuICAgIHJldHVybiBhcmdzLm1hcChmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudDtcbiAgICAgIH1cblxuICAgICAgdmFyIG91dHB1dCA9IHRyYW5zZm9ybShhcmd1bWVudCk7XG4gICAgICByZXR1cm4gdHlwZW9mIG91dHB1dCA9PT0gJ251bWJlcicgPyBcIlwiLmNvbmNhdChvdXRwdXQsIFwicHhcIikgOiBvdXRwdXQ7XG4gICAgfSkuam9pbignICcpO1xuICB9OyAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0byByZW1vdmUgaW4gdjUuXG5cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3BhY2luZywgJ3VuaXQnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIXdhcm5PbmNlIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IHRoZW1lLnNwYWNpbmcudW5pdCB1c2FnZSBoYXMgYmVlbiBkZXByZWNhdGVkLicsICdJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdjUuJywgJ1lvdSBjYW4gcmVwbGFjZSBgdGhlbWUuc3BhY2luZy51bml0ICogeWAgd2l0aCBgdGhlbWUuc3BhY2luZyh5KWAuJywgJycsICdZb3UgY2FuIHVzZSB0aGUgYGh0dHBzOi8vZ2l0aHViLmNvbS9tdWktb3JnL21hdGVyaWFsLXVpL3RyZWUvbWFzdGVyL3BhY2thZ2VzL21hdGVyaWFsLXVpLWNvZGVtb2QvUkVBRE1FLm1kI3RoZW1lLXNwYWNpbmctYXBpYCBtaWdyYXRpb24gaGVscGVyIHRvIG1ha2UgdGhlIHByb2Nlc3Mgc21vb3RoZXIuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgd2Fybk9uY2UgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICAgIH1cbiAgfSk7XG4gIHNwYWNpbmcubXVpID0gdHJ1ZTtcbiAgcmV0dXJuIHNwYWNpbmc7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbi8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmdvb2dsZS5jb20vbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1uYXR1cmFsLWVhc2luZy1jdXJ2ZXNcbi8vIHRvIGxlYXJuIHRoZSBjb250ZXh0IGluIHdoaWNoIGVhY2ggZWFzaW5nIHNob3VsZCBiZSB1c2VkLlxuZXhwb3J0IHZhciBlYXNpbmcgPSB7XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGVhc2luZyBjdXJ2ZS5cbiAgZWFzZUluT3V0OiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgZW50ZXIgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5IGZyb20gb2ZmLXNjcmVlbiBhbmRcbiAgLy8gc2xvd2x5IGRlY2VsZXJhdGUgdG8gYSByZXN0aW5nIHBvaW50LlxuICBlYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgbGVhdmUgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCBkZWNlbGVyYXRlIHdoZW4gb2ZmLXNjcmVlbi5cbiAgZWFzZUluOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknLFxuICAvLyBUaGUgc2hhcnAgY3VydmUgaXMgdXNlZCBieSBvYmplY3RzIHRoYXQgbWF5IHJldHVybiB0byB0aGUgc2NyZWVuIGF0IGFueSB0aW1lLlxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknXG59OyAvLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuLy8gdG8gbGVhcm4gd2hlbiB1c2Ugd2hhdCB0aW1pbmdcblxuZXhwb3J0IHZhciBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcblxuZnVuY3Rpb24gZm9ybWF0TXMobWlsbGlzZWNvbmRzKSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChNYXRoLnJvdW5kKG1pbGxpc2Vjb25kcyksIFwibXNcIik7XG59XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5fSBwcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0ucHJvcFxuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtLmR1cmF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0uZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW0uZGVsYXlcbiAqL1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZWFzaW5nOiBlYXNpbmcsXG4gIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbJ2FsbCddO1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHZhciBfb3B0aW9ucyRkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sXG4gICAgICAgIGR1cmF0aW9uT3B0aW9uID0gX29wdGlvbnMkZHVyYXRpb24gPT09IHZvaWQgMCA/IGR1cmF0aW9uLnN0YW5kYXJkIDogX29wdGlvbnMkZHVyYXRpb24sXG4gICAgICAgIF9vcHRpb25zJGVhc2luZyA9IG9wdGlvbnMuZWFzaW5nLFxuICAgICAgICBlYXNpbmdPcHRpb24gPSBfb3B0aW9ucyRlYXNpbmcgPT09IHZvaWQgMCA/IGVhc2luZy5lYXNlSW5PdXQgOiBfb3B0aW9ucyRlYXNpbmcsXG4gICAgICAgIF9vcHRpb25zJGRlbGF5ID0gb3B0aW9ucy5kZWxheSxcbiAgICAgICAgZGVsYXkgPSBfb3B0aW9ucyRkZWxheSA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJGRlbGF5LFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJkdXJhdGlvblwiLCBcImVhc2luZ1wiLCBcImRlbGF5XCJdKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICAgIH07XG5cbiAgICAgIHZhciBpc051bWJlciA9IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgICAgfTtcblxuICAgICAgaWYgKCFpc1N0cmluZyhwcm9wcykgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBBcmd1bWVudCBcInByb3BzXCIgbXVzdCBiZSBhIHN0cmluZyBvciBBcnJheS4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc051bWJlcihkdXJhdGlvbk9wdGlvbikgJiYgIWlzU3RyaW5nKGR1cmF0aW9uT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFxcXCJkdXJhdGlvblxcXCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZyBidXQgZm91bmQgXCIuY29uY2F0KGR1cmF0aW9uT3B0aW9uLCBcIi5cIikpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzU3RyaW5nKGVhc2luZ09wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFwiZWFzaW5nXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc051bWJlcihkZWxheSkgJiYgIWlzU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogQXJndW1lbnQgXCJkZWxheVwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogVW5yZWNvZ25pemVkIGFyZ3VtZW50KHMpIFtcIi5jb25jYXQoT2JqZWN0LmtleXMob3RoZXIpLmpvaW4oJywnKSwgXCJdLlwiKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGZ1bmN0aW9uIChhbmltYXRlZFByb3ApIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChhbmltYXRlZFByb3AsIFwiIFwiKS5jb25jYXQodHlwZW9mIGR1cmF0aW9uT3B0aW9uID09PSAnc3RyaW5nJyA/IGR1cmF0aW9uT3B0aW9uIDogZm9ybWF0TXMoZHVyYXRpb25PcHRpb24pLCBcIiBcIikuY29uY2F0KGVhc2luZ09wdGlvbiwgXCIgXCIpLmNvbmNhdCh0eXBlb2YgZGVsYXkgPT09ICdzdHJpbmcnID8gZGVsYXkgOiBmb3JtYXRNcyhkZWxheSkpO1xuICAgIH0pLmpvaW4oJywnKTtcbiAgfSxcbiAgZ2V0QXV0b0hlaWdodER1cmF0aW9uOiBmdW5jdGlvbiBnZXRBdXRvSGVpZ2h0RHVyYXRpb24oaGVpZ2h0KSB7XG4gICAgaWYgKCFoZWlnaHQpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBjb25zdGFudCA9IGhlaWdodCAvIDM2OyAvLyBodHRwczovL3d3dy53b2xmcmFtYWxwaGEuY29tL2lucHV0Lz9pPSg0KyUyQisxNSsqKyh4KyUyRiszNispKyoqKzAuMjUrJTJCKyh4KyUyRiszNikrJTJGKzUpKyorMTBcblxuICAgIHJldHVybiBNYXRoLnJvdW5kKCg0ICsgMTUgKiBNYXRoLnBvdyhjb25zdGFudCwgMC4yNSkgKyBjb25zdGFudCAvIDUpICogMTApO1xuICB9XG59OyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVCcmVha3BvaW50cyBmcm9tICcuL2NyZWF0ZUJyZWFrcG9pbnRzJztcbmltcG9ydCBjcmVhdGVNaXhpbnMgZnJvbSAnLi9jcmVhdGVNaXhpbnMnO1xuaW1wb3J0IGNyZWF0ZVBhbGV0dGUgZnJvbSAnLi9jcmVhdGVQYWxldHRlJztcbmltcG9ydCBjcmVhdGVUeXBvZ3JhcGh5IGZyb20gJy4vY3JlYXRlVHlwb2dyYXBoeSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IHNoYXBlIGZyb20gJy4vc2hhcGUnO1xuaW1wb3J0IGNyZWF0ZVNwYWNpbmcgZnJvbSAnLi9jcmVhdGVTcGFjaW5nJztcbmltcG9ydCB0cmFuc2l0aW9ucyBmcm9tICcuL3RyYW5zaXRpb25zJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi96SW5kZXgnO1xuXG5mdW5jdGlvbiBjcmVhdGVNdWlUaGVtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHZhciBfb3B0aW9ucyRicmVha3BvaW50cyA9IG9wdGlvbnMuYnJlYWtwb2ludHMsXG4gICAgICBicmVha3BvaW50c0lucHV0ID0gX29wdGlvbnMkYnJlYWtwb2ludHMgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkYnJlYWtwb2ludHMsXG4gICAgICBfb3B0aW9ucyRtaXhpbnMgPSBvcHRpb25zLm1peGlucyxcbiAgICAgIG1peGluc0lucHV0ID0gX29wdGlvbnMkbWl4aW5zID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJG1peGlucyxcbiAgICAgIF9vcHRpb25zJHBhbGV0dGUgPSBvcHRpb25zLnBhbGV0dGUsXG4gICAgICBwYWxldHRlSW5wdXQgPSBfb3B0aW9ucyRwYWxldHRlID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHBhbGV0dGUsXG4gICAgICBzcGFjaW5nSW5wdXQgPSBvcHRpb25zLnNwYWNpbmcsXG4gICAgICBfb3B0aW9ucyR0eXBvZ3JhcGh5ID0gb3B0aW9ucy50eXBvZ3JhcGh5LFxuICAgICAgdHlwb2dyYXBoeUlucHV0ID0gX29wdGlvbnMkdHlwb2dyYXBoeSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyR0eXBvZ3JhcGh5LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiYnJlYWtwb2ludHNcIiwgXCJtaXhpbnNcIiwgXCJwYWxldHRlXCIsIFwic3BhY2luZ1wiLCBcInR5cG9ncmFwaHlcIl0pO1xuXG4gIHZhciBwYWxldHRlID0gY3JlYXRlUGFsZXR0ZShwYWxldHRlSW5wdXQpO1xuICB2YXIgYnJlYWtwb2ludHMgPSBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50c0lucHV0KTtcbiAgdmFyIHNwYWNpbmcgPSBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCk7XG4gIHZhciBtdWlUaGVtZSA9IGRlZXBtZXJnZSh7XG4gICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgbWl4aW5zOiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIHNwYWNpbmcsIG1peGluc0lucHV0KSxcbiAgICBvdmVycmlkZXM6IHt9LFxuICAgIC8vIEluamVjdCBjdXN0b20gc3R5bGVzXG4gICAgcGFsZXR0ZTogcGFsZXR0ZSxcbiAgICBwcm9wczoge30sXG4gICAgLy8gUHJvdmlkZSBkZWZhdWx0IHByb3BzXG4gICAgc2hhZG93czogc2hhZG93cyxcbiAgICB0eXBvZ3JhcGh5OiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgc3BhY2luZzogc3BhY2luZyxcbiAgICBzaGFwZTogc2hhcGUsXG4gICAgdHJhbnNpdGlvbnM6IHRyYW5zaXRpb25zLFxuICAgIHpJbmRleDogekluZGV4XG4gIH0sIG90aGVyKTtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGFyZ3VtZW50KSB7XG4gICAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KTtcbiAgfSwgbXVpVGhlbWUpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIHBzZXVkb0NsYXNzZXMgPSBbJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnZXhwYW5kZWQnLCAnc2VsZWN0ZWQnXTtcblxuICAgIHZhciB0cmF2ZXJzZSA9IGZ1bmN0aW9uIHRyYXZlcnNlKG5vZGUsIHBhcmVudEtleSkge1xuICAgICAgdmFyIGRlcHRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxO1xuICAgICAgdmFyIGtleTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcblxuICAgICAgZm9yIChrZXkgaW4gbm9kZSkge1xuICAgICAgICB2YXIgY2hpbGQgPSBub2RlW2tleV07XG5cbiAgICAgICAgaWYgKGRlcHRoID09PSAxKSB7XG4gICAgICAgICAgaWYgKGtleS5pbmRleE9mKCdNdWknKSA9PT0gMCAmJiBjaGlsZCkge1xuICAgICAgICAgICAgdHJhdmVyc2UoY2hpbGQsIGtleSwgZGVwdGggKyAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocHNldWRvQ2xhc3Nlcy5pbmRleE9mKGtleSkgIT09IC0xICYmIE9iamVjdC5rZXlzKGNoaWxkKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBgXCIuY29uY2F0KHBhcmVudEtleSwgXCJgIGNvbXBvbmVudCBpbmNyZWFzZXMgXCIpICsgXCJ0aGUgQ1NTIHNwZWNpZmljaXR5IG9mIHRoZSBgXCIuY29uY2F0KGtleSwgXCJgIGludGVybmFsIHN0YXRlLlwiKSwgJ1lvdSBjYW4gbm90IG92ZXJyaWRlIGl0IGxpa2UgdGhpczogJywgSlNPTi5zdHJpbmdpZnkobm9kZSwgbnVsbCwgMiksICcnLCAnSW5zdGVhZCwgeW91IG5lZWQgdG8gdXNlIHRoZSAkcnVsZU5hbWUgc3ludGF4OicsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgcm9vdDogX2RlZmluZVByb3BlcnR5KHt9LCBcIiYkXCIuY29uY2F0KGtleSksIGNoaWxkKVxuICAgICAgICAgICAgfSwgbnVsbCwgMiksICcnLCAnaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vci9wc2V1ZG8tY2xhc3Nlcy1ndWlkZSddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9IC8vIFJlbW92ZSB0aGUgc3R5bGUgdG8gcHJldmVudCBnbG9iYWwgY29uZmxpY3RzLlxuXG5cbiAgICAgICAgICBub2RlW2tleV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0cmF2ZXJzZShtdWlUaGVtZS5vdmVycmlkZXMpO1xuICB9XG5cbiAgcmV0dXJuIG11aVRoZW1lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNdWlUaGVtZTsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcih0aW1lb3V0RXJyb3JNZXNzYWdlLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eScsICdwYXJhbXMnXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAndGltZW91dE1lc3NhZ2UnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnZGVjb21wcmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAnbWF4Qm9keUxlbmd0aCcsICdtYXhSZWRpcmVjdHMnLCAndHJhbnNwb3J0JywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCcsICdyZXNwb25zZUVuY29kaW5nJ1xuICBdO1xuICB2YXIgZGlyZWN0TWVyZ2VLZXlzID0gWyd2YWxpZGF0ZVN0YXR1cyddO1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRpcmVjdE1lcmdlS2V5cywgZnVuY3Rpb24gbWVyZ2UocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKVxuICAgIC5jb25jYXQoZGlyZWN0TWVyZ2VLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMSlcbiAgICAuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1VuaXRsZXNzKHZhbHVlKSB7XG4gIHJldHVybiBTdHJpbmcocGFyc2VGbG9hdCh2YWx1ZSkpLmxlbmd0aCA9PT0gU3RyaW5nKHZhbHVlKS5sZW5ndGg7XG59IC8vIFBvcnRlZCBmcm9tIENvbXBhc3Ncbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Db21wYXNzL2NvbXBhc3MvYmxvYi9tYXN0ZXIvY29yZS9zdHlsZXNoZWV0cy9jb21wYXNzL3R5cG9ncmFwaHkvX3VuaXRzLnNjc3Ncbi8vIEVtdWxhdGUgdGhlIHNhc3MgZnVuY3Rpb24gXCJ1bml0XCJcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVuaXQoaW5wdXQpIHtcbiAgcmV0dXJuIFN0cmluZyhpbnB1dCkubWF0Y2goL1tcXGQuXFwtK10qXFxzKiguKikvKVsxXSB8fCAnJztcbn0gLy8gRW11bGF0ZSB0aGUgc2FzcyBmdW5jdGlvbiBcInVuaXRsZXNzXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHRvVW5pdGxlc3MobGVuZ3RoKSB7XG4gIHJldHVybiBwYXJzZUZsb2F0KGxlbmd0aCk7XG59IC8vIENvbnZlcnQgYW55IENTUyA8bGVuZ3RoPiBvciA8cGVyY2VudGFnZT4gdmFsdWUgdG8gYW55IGFub3RoZXIuXG4vLyBGcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9LeWxlQU1hdGhld3MvY29udmVydC1jc3MtbGVuZ3RoXG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0TGVuZ3RoKGJhc2VGb250U2l6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGxlbmd0aCwgdG9Vbml0KSB7XG4gICAgdmFyIGZyb21Vbml0ID0gZ2V0VW5pdChsZW5ndGgpOyAvLyBPcHRpbWl6ZSBmb3IgY2FzZXMgd2hlcmUgYGZyb21gIGFuZCBgdG9gIHVuaXRzIGFyZSBhY2NpZGVudGFsbHkgdGhlIHNhbWUuXG5cbiAgICBpZiAoZnJvbVVuaXQgPT09IHRvVW5pdCkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9IC8vIENvbnZlcnQgaW5wdXQgbGVuZ3RoIHRvIHBpeGVscy5cblxuXG4gICAgdmFyIHB4TGVuZ3RoID0gdG9Vbml0bGVzcyhsZW5ndGgpO1xuXG4gICAgaWYgKGZyb21Vbml0ICE9PSAncHgnKSB7XG4gICAgICBpZiAoZnJvbVVuaXQgPT09ICdlbScpIHtcbiAgICAgICAgcHhMZW5ndGggPSB0b1VuaXRsZXNzKGxlbmd0aCkgKiB0b1VuaXRsZXNzKGJhc2VGb250U2l6ZSk7XG4gICAgICB9IGVsc2UgaWYgKGZyb21Vbml0ID09PSAncmVtJykge1xuICAgICAgICBweExlbmd0aCA9IHRvVW5pdGxlc3MobGVuZ3RoKSAqIHRvVW5pdGxlc3MoYmFzZUZvbnRTaXplKTtcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgIH1cbiAgICB9IC8vIENvbnZlcnQgbGVuZ3RoIGluIHBpeGVscyB0byB0aGUgb3V0cHV0IHVuaXRcblxuXG4gICAgdmFyIG91dHB1dExlbmd0aCA9IHB4TGVuZ3RoO1xuXG4gICAgaWYgKHRvVW5pdCAhPT0gJ3B4Jykge1xuICAgICAgaWYgKHRvVW5pdCA9PT0gJ2VtJykge1xuICAgICAgICBvdXRwdXRMZW5ndGggPSBweExlbmd0aCAvIHRvVW5pdGxlc3MoYmFzZUZvbnRTaXplKTtcbiAgICAgIH0gZWxzZSBpZiAodG9Vbml0ID09PSAncmVtJykge1xuICAgICAgICBvdXRwdXRMZW5ndGggPSBweExlbmd0aCAvIHRvVW5pdGxlc3MoYmFzZUZvbnRTaXplKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlRmxvYXQob3V0cHV0TGVuZ3RoLnRvRml4ZWQoNSkpICsgdG9Vbml0O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFsaWduUHJvcGVydHkoX3JlZikge1xuICB2YXIgc2l6ZSA9IF9yZWYuc2l6ZSxcbiAgICAgIGdyaWQgPSBfcmVmLmdyaWQ7XG4gIHZhciBzaXplQmVsb3cgPSBzaXplIC0gc2l6ZSAlIGdyaWQ7XG4gIHZhciBzaXplQWJvdmUgPSBzaXplQmVsb3cgKyBncmlkO1xuICByZXR1cm4gc2l6ZSAtIHNpemVCZWxvdyA8IHNpemVBYm92ZSAtIHNpemUgPyBzaXplQmVsb3cgOiBzaXplQWJvdmU7XG59IC8vIGZvbnRHcmlkIGZpbmRzIGEgbWluaW1hbCBncmlkIChpbiByZW0pIGZvciB0aGUgZm9udFNpemUgdmFsdWVzIHNvIHRoYXQgdGhlXG4vLyBsaW5lSGVpZ2h0IGZhbGxzIHVuZGVyIGEgeCBwaXhlbHMgZ3JpZCwgNHB4IGluIHRoZSBjYXNlIG9mIE1hdGVyaWFsIERlc2lnbixcbi8vIHdpdGhvdXQgY2hhbmdpbmcgdGhlIHJlbGF0aXZlIGxpbmUgaGVpZ2h0XG5cbmV4cG9ydCBmdW5jdGlvbiBmb250R3JpZChfcmVmMikge1xuICB2YXIgbGluZUhlaWdodCA9IF9yZWYyLmxpbmVIZWlnaHQsXG4gICAgICBwaXhlbHMgPSBfcmVmMi5waXhlbHMsXG4gICAgICBodG1sRm9udFNpemUgPSBfcmVmMi5odG1sRm9udFNpemU7XG4gIHJldHVybiBwaXhlbHMgLyAobGluZUhlaWdodCAqIGh0bWxGb250U2l6ZSk7XG59XG4vKipcbiAqIGdlbmVyYXRlIGEgcmVzcG9uc2l2ZSB2ZXJzaW9uIG9mIGEgZ2l2ZW4gQ1NTIHByb3BlcnR5XG4gKiBAZXhhbXBsZVxuICogcmVzcG9uc2l2ZVByb3BlcnR5KHtcbiAqICAgY3NzUHJvcGVydHk6ICdmb250U2l6ZScsXG4gKiAgIG1pbjogMTUsXG4gKiAgIG1heDogMjAsXG4gKiAgIHVuaXQ6ICdweCcsXG4gKiAgIGJyZWFrcG9pbnRzOiBbMzAwLCA2MDBdLFxuICogfSlcbiAqXG4gKiAvLyB0aGlzIHJldHVybnNcbiAqXG4gKiB7XG4gKiAgIGZvbnRTaXplOiAnMTVweCcsXG4gKiAgICdAbWVkaWEgKG1pbi13aWR0aDozMDBweCknOiB7XG4gKiAgICAgZm9udFNpemU6ICcxNy41cHgnLFxuICogICB9LFxuICogICAnQG1lZGlhIChtaW4td2lkdGg6NjAwcHgpJzoge1xuICogICAgIGZvbnRTaXplOiAnMjBweCcsXG4gKiAgIH0sXG4gKiB9XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5jc3NQcm9wZXJ0eSAtIFRoZSBDU1MgcHJvcGVydHkgdG8gYmUgbWFkZSByZXNwb25zaXZlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW1zLm1pbiAtIFRoZSBzbWFsbGVzdCB2YWx1ZSBvZiB0aGUgQ1NTIHByb3BlcnR5XG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW1zLm1heCAtIFRoZSBsYXJnZXN0IHZhbHVlIG9mIHRoZSBDU1MgcHJvcGVydHlcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLnVuaXRdIC0gVGhlIHVuaXQgdG8gYmUgdXNlZCBmb3IgdGhlIENTUyBwcm9wZXJ0eVxuICogQHBhcmFtIHtBcnJheS5udW1iZXJ9IFtwYXJhbXMuYnJlYWtwb2ludHNdICAtIEFuIGFycmF5IG9mIGJyZWFrcG9pbnRzXG4gKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy5hbGlnblN0ZXBdIC0gUm91bmQgc2NhbGVkIHZhbHVlIHRvIGZhbGwgdW5kZXIgdGhpcyBncmlkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZXNwb25zaXZlIHN0eWxlcyBmb3Ige3BhcmFtcy5jc3NQcm9wZXJ0eX1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzcG9uc2l2ZVByb3BlcnR5KF9yZWYzKSB7XG4gIHZhciBjc3NQcm9wZXJ0eSA9IF9yZWYzLmNzc1Byb3BlcnR5LFxuICAgICAgbWluID0gX3JlZjMubWluLFxuICAgICAgbWF4ID0gX3JlZjMubWF4LFxuICAgICAgX3JlZjMkdW5pdCA9IF9yZWYzLnVuaXQsXG4gICAgICB1bml0ID0gX3JlZjMkdW5pdCA9PT0gdm9pZCAwID8gJ3JlbScgOiBfcmVmMyR1bml0LFxuICAgICAgX3JlZjMkYnJlYWtwb2ludHMgPSBfcmVmMy5icmVha3BvaW50cyxcbiAgICAgIGJyZWFrcG9pbnRzID0gX3JlZjMkYnJlYWtwb2ludHMgPT09IHZvaWQgMCA/IFs2MDAsIDk2MCwgMTI4MF0gOiBfcmVmMyRicmVha3BvaW50cyxcbiAgICAgIF9yZWYzJHRyYW5zZm9ybSA9IF9yZWYzLnRyYW5zZm9ybSxcbiAgICAgIHRyYW5zZm9ybSA9IF9yZWYzJHRyYW5zZm9ybSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYzJHRyYW5zZm9ybTtcblxuICB2YXIgb3V0cHV0ID0gX2RlZmluZVByb3BlcnR5KHt9LCBjc3NQcm9wZXJ0eSwgXCJcIi5jb25jYXQobWluKS5jb25jYXQodW5pdCkpO1xuXG4gIHZhciBmYWN0b3IgPSAobWF4IC0gbWluKSAvIGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRzLmxlbmd0aCAtIDFdO1xuICBicmVha3BvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChicmVha3BvaW50KSB7XG4gICAgdmFyIHZhbHVlID0gbWluICsgZmFjdG9yICogYnJlYWtwb2ludDtcblxuICAgIGlmICh0cmFuc2Zvcm0gIT09IG51bGwpIHtcbiAgICAgIHZhbHVlID0gdHJhbnNmb3JtKHZhbHVlKTtcbiAgICB9XG5cbiAgICBvdXRwdXRbXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQoYnJlYWtwb2ludCwgXCJweClcIildID0gX2RlZmluZVByb3BlcnR5KHt9LCBjc3NQcm9wZXJ0eSwgXCJcIi5jb25jYXQoTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwKSAvIDEwMDAwKS5jb25jYXQodW5pdCkpO1xuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGlzVW5pdGxlc3MsIGNvbnZlcnRMZW5ndGgsIHJlc3BvbnNpdmVQcm9wZXJ0eSwgYWxpZ25Qcm9wZXJ0eSwgZm9udEdyaWQgfSBmcm9tICcuL2Nzc1V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc3BvbnNpdmVGb250U2l6ZXModGhlbWVJbnB1dCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBfb3B0aW9ucyRicmVha3BvaW50cyA9IG9wdGlvbnMuYnJlYWtwb2ludHMsXG4gICAgICBicmVha3BvaW50cyA9IF9vcHRpb25zJGJyZWFrcG9pbnRzID09PSB2b2lkIDAgPyBbJ3NtJywgJ21kJywgJ2xnJ10gOiBfb3B0aW9ucyRicmVha3BvaW50cyxcbiAgICAgIF9vcHRpb25zJGRpc2FibGVBbGlnbiA9IG9wdGlvbnMuZGlzYWJsZUFsaWduLFxuICAgICAgZGlzYWJsZUFsaWduID0gX29wdGlvbnMkZGlzYWJsZUFsaWduID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGRpc2FibGVBbGlnbixcbiAgICAgIF9vcHRpb25zJGZhY3RvciA9IG9wdGlvbnMuZmFjdG9yLFxuICAgICAgZmFjdG9yID0gX29wdGlvbnMkZmFjdG9yID09PSB2b2lkIDAgPyAyIDogX29wdGlvbnMkZmFjdG9yLFxuICAgICAgX29wdGlvbnMkdmFyaWFudHMgPSBvcHRpb25zLnZhcmlhbnRzLFxuICAgICAgdmFyaWFudHMgPSBfb3B0aW9ucyR2YXJpYW50cyA9PT0gdm9pZCAwID8gWydoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJywgJ2JvZHkxJywgJ2JvZHkyJywgJ2NhcHRpb24nLCAnYnV0dG9uJywgJ292ZXJsaW5lJ10gOiBfb3B0aW9ucyR2YXJpYW50cztcblxuICB2YXIgdGhlbWUgPSBfZXh0ZW5kcyh7fSwgdGhlbWVJbnB1dCk7XG5cbiAgdGhlbWUudHlwb2dyYXBoeSA9IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5KTtcbiAgdmFyIHR5cG9ncmFwaHkgPSB0aGVtZS50eXBvZ3JhcGh5OyAvLyBDb252ZXJ0IGJldHdlZW4gY3NzIGxlbmd0aHMgZS5nLiBlbS0+cHggb3IgcHgtPnJlbVxuICAvLyBTZXQgdGhlIGJhc2VGb250U2l6ZSBmb3IgeW91ciBwcm9qZWN0LiBEZWZhdWx0cyB0byAxNnB4IChhbHNvIHRoZSBicm93c2VyIGRlZmF1bHQpLlxuXG4gIHZhciBjb252ZXJ0ID0gY29udmVydExlbmd0aCh0eXBvZ3JhcGh5Lmh0bWxGb250U2l6ZSk7XG4gIHZhciBicmVha3BvaW50VmFsdWVzID0gYnJlYWtwb2ludHMubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlc1t4XTtcbiAgfSk7XG4gIHZhcmlhbnRzLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhbnQpIHtcbiAgICB2YXIgc3R5bGUgPSB0eXBvZ3JhcGh5W3ZhcmlhbnRdO1xuICAgIHZhciByZW1Gb250U2l6ZSA9IHBhcnNlRmxvYXQoY29udmVydChzdHlsZS5mb250U2l6ZSwgJ3JlbScpKTtcblxuICAgIGlmIChyZW1Gb250U2l6ZSA8PSAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG1heEZvbnRTaXplID0gcmVtRm9udFNpemU7XG4gICAgdmFyIG1pbkZvbnRTaXplID0gMSArIChtYXhGb250U2l6ZSAtIDEpIC8gZmFjdG9yO1xuICAgIHZhciBsaW5lSGVpZ2h0ID0gc3R5bGUubGluZUhlaWdodDtcblxuICAgIGlmICghaXNVbml0bGVzcyhsaW5lSGVpZ2h0KSAmJiAhZGlzYWJsZUFsaWduKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoWydNYXRlcmlhbC1VSTogVW5zdXBwb3J0ZWQgbm9uLXVuaXRsZXNzIGxpbmUgaGVpZ2h0IHdpdGggZ3JpZCBhbGlnbm1lbnQuJywgJ1VzZSB1bml0bGVzcyBsaW5lIGhlaWdodHMgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1VuaXRsZXNzKGxpbmVIZWlnaHQpKSB7XG4gICAgICAvLyBtYWtlIGl0IHVuaXRsZXNzXG4gICAgICBsaW5lSGVpZ2h0ID0gcGFyc2VGbG9hdChjb252ZXJ0KGxpbmVIZWlnaHQsICdyZW0nKSkgLyBwYXJzZUZsb2F0KHJlbUZvbnRTaXplKTtcbiAgICB9XG5cbiAgICB2YXIgdHJhbnNmb3JtID0gbnVsbDtcblxuICAgIGlmICghZGlzYWJsZUFsaWduKSB7XG4gICAgICB0cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFsaWduUHJvcGVydHkoe1xuICAgICAgICAgIHNpemU6IHZhbHVlLFxuICAgICAgICAgIGdyaWQ6IGZvbnRHcmlkKHtcbiAgICAgICAgICAgIHBpeGVsczogNCxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHQsXG4gICAgICAgICAgICBodG1sRm9udFNpemU6IHR5cG9ncmFwaHkuaHRtbEZvbnRTaXplXG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHR5cG9ncmFwaHlbdmFyaWFudF0gPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgc3R5bGUpLCByZXNwb25zaXZlUHJvcGVydHkoe1xuICAgICAgY3NzUHJvcGVydHk6ICdmb250U2l6ZScsXG4gICAgICBtaW46IG1pbkZvbnRTaXplLFxuICAgICAgbWF4OiBtYXhGb250U2l6ZSxcbiAgICAgIHVuaXQ6ICdyZW0nLFxuICAgICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRWYWx1ZXMsXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxuICAgIH0pKTtcbiAgfSk7XG4gIHJldHVybiB0aGVtZTtcbn0iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxBPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6XG42MDExNixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEU9e307ZnVuY3Rpb24gRihhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEMoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRygpe31HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2woSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsaz1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihrPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaD1BcnJheShmKSxtPTA7bTxmO20rKyloW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49aH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjprLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZyxRPVtdO2Z1bmN0aW9uIFIoYSxiLGMsZSl7aWYoUS5sZW5ndGgpe3ZhciBkPVEucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFMoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5RLmxlbmd0aCYmUS5wdXNoKGEpfVxuZnVuY3Rpb24gVChhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtkPWFba107dmFyIGY9YitVKGQsayk7Zys9VChkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1UoZCxrKyspLGcrPVQoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihDKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixjKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBXKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGFhKGEsYixjKXt2YXIgZT1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1goYSxlLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTyhhKSYmKGE9TihhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFgoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIik7Yj1SKGIsZyxlLGQpO1YoYSxhYSxiKTtTKGIpfXZhciBZPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFooKXt2YXIgYT1ZLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQygzMjEpKTtyZXR1cm4gYX1cbnZhciBiYT17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpZLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOntzdXNwZW5zZTpudWxsfSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07ZXhwb3J0cy5DaGlsZHJlbj17bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1goYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVIobnVsbCxudWxsLGIsYyk7VihhLFcsYik7UyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFYoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtYKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoQygxNDMpKTtyZXR1cm4gYX19O1xuZXhwb3J0cy5Db21wb25lbnQ9RjtleHBvcnRzLkZyYWdtZW50PXI7ZXhwb3J0cy5Qcm9maWxlcj11O2V4cG9ydHMuUHVyZUNvbXBvbmVudD1IO2V4cG9ydHMuU3RyaWN0TW9kZT10O2V4cG9ydHMuU3VzcGVuc2U9eTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWJhO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEMoMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixrPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixrPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihoIGluIGIpSy5jYWxsKGIsaCkmJiFMLmhhc093blByb3BlcnR5KGgpJiYoZVtoXT12b2lkIDA9PT1iW2hdJiZ2b2lkIDAhPT1mP2ZbaF06YltoXSl9dmFyIGg9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1oKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8aCl7Zj1BcnJheShoKTtmb3IodmFyIG09MDttPGg7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6a319O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eix0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMVwiO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7XG5mdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsayl7ZGE9ITE7ZWE9bnVsbDtiYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgbD1lYTtkYT0hMTtlYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtmYXx8KGZhPSEwLGhhPWwpfX12YXIgbGE9bnVsbCxtYT1udWxsLG5hPW51bGw7XG5mdW5jdGlvbiBvYShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9bmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH12YXIgcGE9bnVsbCxxYT17fTtcbmZ1bmN0aW9uIHJhKCl7aWYocGEpZm9yKHZhciBhIGluIHFhKXt2YXIgYj1xYVthXSxjPXBhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighc2FbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7c2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZih0YS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTt0YVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ1YShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIHVhKGEsYixjKXtpZih2YVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7dmFbYV09Yjt3YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBzYT1bXSx0YT17fSx2YT17fSx3YT17fTtmdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighcWEuaGFzT3duUHJvcGVydHkoYyl8fHFhW2NdIT09ZCl7aWYocWFbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO3FhW2NdPWQ7Yj0hMH19YiYmcmEoKX12YXIgeWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLHphPW51bGwsQWE9bnVsbCxCYT1udWxsO1xuZnVuY3Rpb24gQ2EoYSl7aWYoYT1tYShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9bGEoYiksemEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRGEoYSl7QWE/QmE/QmEucHVzaChhKTpCYT1bYV06QWE9YX1mdW5jdGlvbiBFYSgpe2lmKEFhKXt2YXIgYT1BYSxiPUJhO0JhPUFhPW51bGw7Q2EoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUNhKGJbYV0pfX1mdW5jdGlvbiBGYShhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEdhKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSGEoKXt9dmFyIElhPUZhLEphPSExLEthPSExO2Z1bmN0aW9uIExhKCl7aWYobnVsbCE9PUFhfHxudWxsIT09QmEpSGEoKSxFYSgpfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKEthKXJldHVybiBhKGIsYyk7S2E9ITA7dHJ5e3JldHVybiBJYShhLGIsYyl9ZmluYWxseXtLYT0hMSxMYSgpfX12YXIgTmE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLE9hPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksUGE9e30sUWE9e307XG5mdW5jdGlvbiBSYShhKXtpZihPYS5jYWxsKFFhLGEpKXJldHVybiEwO2lmKE9hLmNhbGwoUGEsYSkpcmV0dXJuITE7aWYoTmEudGVzdChhKSlyZXR1cm4gUWFbYV09ITA7UGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gU2EoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBUYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxTYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBDPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0NbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBVYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFZhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFxuVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuQy54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO3ZhciBXYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoV2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbmZ1bmN0aW9uIFhhKGEsYixjLGQpe3ZhciBlPUMuaGFzT3duUHJvcGVydHkoYik/Q1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KFRhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9SYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIFlhPS9eKC4qKVtcXFxcXFwvXS8sRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFphPUU/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsJGE9RT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGFiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGJiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGNiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGRiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGViPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGdiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGhiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGliPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxqYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGtiPUU/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsbGI9RT9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsbWI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIG5iKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1tYiYmYVttYl18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiBvYihhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIHBiKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJiOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGI6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaWI6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWI6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGdiOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBqYjpyZXR1cm4gcGIoYS50eXBlKTtjYXNlIGxiOnJldHVybiBwYihhLnJlbmRlcik7Y2FzZSBrYjppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIHBiKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIHFiKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1wYihhLnR5cGUpO2M9bnVsbDtkJiYoYz1wYihkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFlhLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiByYihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gc2IoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIHRiKGEpe3ZhciBiPXNiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiB4YihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9dGIoYSkpfWZ1bmN0aW9uIHliKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1zYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIHpiKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEFiKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXJiKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQmIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZYYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gQ2IoYSxiKXtCYihhLGIpO3ZhciBjPXJiKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0RiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkRiKGEsYi50eXBlLHJiKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRWIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIERiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBGYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIityYihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnJiKGMpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9cmIoYi52YWx1ZSksZD1yYihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIExiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE1iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE5iKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gT2IoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP05iKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFBiLFFiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BiPVBifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVBiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFJiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gU2IoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGI9e2FuaW1hdGlvbmVuZDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWI9e30sVmI9e307XG55YSYmKFZiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2IoYSl7aWYoVWJbYV0pcmV0dXJuIFViW2FdO2lmKCFUYlthXSlyZXR1cm4gYTt2YXIgYj1UYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYilyZXR1cm4gVWJbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYj1XYihcImFuaW1hdGlvbmVuZFwiKSxZYj1XYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYj1XYihcImFuaW1hdGlvbnN0YXJ0XCIpLCRiPVdiKFwidHJhbnNpdGlvbmVuZFwiKSxhYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmM9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24gY2MoYSl7dmFyIGI9YmMuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBNYXAsYmMuc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24gZGMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZWMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBmYyhhKXtpZihkYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBnYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1kYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBmYyhlKSxhO2lmKGY9PT1kKXJldHVybiBmYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhjKGEpe2E9Z2MoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBqYyhhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIga2M9bnVsbDtcbmZ1bmN0aW9uIGxjKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKylvYShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZvYShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gbWMoYSl7bnVsbCE9PWEmJihrYz1pYyhrYyxhKSk7YT1rYztrYz1udWxsO2lmKGEpe2pjKGEsbGMpO2lmKGtjKXRocm93IEVycm9yKHUoOTUpKTtpZihmYSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9fVxuZnVuY3Rpb24gbmMoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIG9jKGEpe2lmKCF5YSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgcGM9W107ZnVuY3Rpb24gcWMoYSl7YS50b3BMZXZlbFR5cGU9bnVsbDthLm5hdGl2ZUV2ZW50PW51bGw7YS50YXJnZXRJbnN0PW51bGw7YS5hbmNlc3RvcnMubGVuZ3RoPTA7MTA+cGMubGVuZ3RoJiZwYy5wdXNoKGEpfVxuZnVuY3Rpb24gcmMoYSxiLGMsZCl7aWYocGMubGVuZ3RoKXt2YXIgZT1wYy5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1kO2UubmF0aXZlRXZlbnQ9YjtlLnRhcmdldEluc3Q9YztyZXR1cm4gZX1yZXR1cm57dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX19XG5mdW5jdGlvbiBzYyhhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9dGMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9bmMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTt2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9YS5ldmVudFN5c3RlbUZsYWdzOzA9PT1jJiYoZ3w9NjQpO2Zvcih2YXIgaD1udWxsLGs9MDtrPHNhLmxlbmd0aDtrKyspe3ZhciBsPXNhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9XG5pYyhoLGwpKX1tYyhoKX19ZnVuY3Rpb24gdWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjp2YyhiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6dmMoYixcImZvY3VzXCIsITApO3ZjKGIsXCJibHVyXCIsITApO2Muc2V0KFwiYmx1clwiLG51bGwpO2Muc2V0KFwiZm9jdXNcIixudWxsKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6b2MoYSkmJnZjKGIsYSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFjLmluZGV4T2YoYSkmJkYoYSxiKX1jLnNldChhLG51bGwpfX1cbnZhciB3Yyx4Yyx5Yyx6Yz0hMSxBYz1bXSxCYz1udWxsLENjPW51bGwsRGM9bnVsbCxFYz1uZXcgTWFwLEZjPW5ldyBNYXAsR2M9W10sSGM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSxJYz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBKYyhhLGIpe3ZhciBjPWNjKGIpO0hjLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSk7SWMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KX1mdW5jdGlvbiBLYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZSxjb250YWluZXI6ZH19XG5mdW5jdGlvbiBMYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkJjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpDYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpEYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6RWMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6RmMuZGVsZXRlKGIucG9pbnRlcklkKX19ZnVuY3Rpb24gTWMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1LYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1OYyhiKSxudWxsIT09YiYmeGMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO3JldHVybiBhfVxuZnVuY3Rpb24gT2MoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIEJjPU1jKEJjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBDYz1NYyhDYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gRGM9TWMoRGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtFYy5zZXQoZixNYyhFYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsRmMuc2V0KGYsTWMoRmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9dGMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1kYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1lYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7eWMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIFFjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPU5jKGIpO251bGwhPT1jJiZ4YyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gU2MoYSxiLGMpe1FjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBUYygpe2Zvcih6Yz0hMTswPEFjLmxlbmd0aDspe3ZhciBhPUFjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1OYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJndjKGEpO2JyZWFrfXZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOkFjLnNoaWZ0KCl9bnVsbCE9PUJjJiZRYyhCYykmJihCYz1udWxsKTtudWxsIT09Q2MmJlFjKENjKSYmKENjPW51bGwpO251bGwhPT1EYyYmUWMoRGMpJiYoRGM9bnVsbCk7RWMuZm9yRWFjaChTYyk7RmMuZm9yRWFjaChTYyl9ZnVuY3Rpb24gVWMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLHpjfHwoemM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVGMpKSl9XG5mdW5jdGlvbiBWYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBVYyhiLGEpfWlmKDA8QWMubGVuZ3RoKXtVYyhBY1swXSxhKTtmb3IodmFyIGM9MTtjPEFjLmxlbmd0aDtjKyspe3ZhciBkPUFjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09QmMmJlVjKEJjLGEpO251bGwhPT1DYyYmVWMoQ2MsYSk7bnVsbCE9PURjJiZVYyhEYyxhKTtFYy5mb3JFYWNoKGIpO0ZjLmZvckVhY2goYik7Zm9yKGM9MDtjPEdjLmxlbmd0aDtjKyspZD1HY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8R2MubGVuZ3RoJiYoYz1HY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylQYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJkdjLnNoaWZ0KCl9XG52YXIgV2M9e30sWWM9bmV3IE1hcCxaYz1uZXcgTWFwLCRjPVtcImFib3J0XCIsXCJhYm9ydFwiLFhiLFwiYW5pbWF0aW9uRW5kXCIsWWIsXCJhbmltYXRpb25JdGVyYXRpb25cIixaYixcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcblwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLCRiLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBhZChhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXSxmPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO2Y9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmYsY2FwdHVyZWQ6ZitcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltkXSxldmVudFByaW9yaXR5OmJ9O1pjLnNldChkLGIpO1ljLnNldChkLGYpO1djW2VdPWZ9fVxuYWQoXCJibHVyIGJsdXIgY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXMgZm9jdXMgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSwwKTtcbmFkKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO2FkKCRjLDIpO2Zvcih2YXIgYmQ9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLGNkPTA7Y2Q8YmQubGVuZ3RoO2NkKyspWmMuc2V0KGJkW2NkXSwwKTtcbnZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIEYoYSxiKXt2YyhiLGEsITEpfWZ1bmN0aW9uIHZjKGEsYixjKXt2YXIgZD1aYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWQ/MjpkKXtjYXNlIDA6ZD1nZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2Nhc2UgMTpkPWhkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7ZGVmYXVsdDpkPWlkLmJpbmQobnVsbCxiLDEsYSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBnZChhLGIsYyxkKXtKYXx8SGEoKTt2YXIgZT1pZCxmPUphO0phPSEwO3RyeXtHYShlLGEsYixjLGQpfWZpbmFsbHl7KEphPWYpfHxMYSgpfX1mdW5jdGlvbiBoZChhLGIsYyxkKXtlZChkZCxpZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaWQoYSxiLGMsZCl7aWYoZmQpaWYoMDxBYy5sZW5ndGgmJi0xPEhjLmluZGV4T2YoYSkpYT1LYyhudWxsLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZXt2YXIgZT1SYyhhLGIsYyxkKTtpZihudWxsPT09ZSlMYyhhLGQpO2Vsc2UgaWYoLTE8SGMuaW5kZXhPZihhKSlhPUtjKGUsYSxiLGMsZCksQWMucHVzaChhKTtlbHNlIGlmKCFPYyhlLGEsYixjLGQpKXtMYyhhLGQpO2E9cmMoYSxkLG51bGwsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9fX19XG5mdW5jdGlvbiBSYyhhLGIsYyxkKXtjPW5jKGQpO2M9dGMoYyk7aWYobnVsbCE9PWMpe3ZhciBlPWRjKGMpO2lmKG51bGw9PT1lKWM9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7Yz1lYyhlKTtpZihudWxsIT09YylyZXR1cm4gYztjPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtjPW51bGx9ZWxzZSBlIT09YyYmKGM9bnVsbCl9fWE9cmMoYSxkLGMsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9cmV0dXJuIG51bGx9XG52YXIgamQ9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sa2Q9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGpkKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2tkLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7amRbYl09amRbYV19KX0pO2Z1bmN0aW9uIGxkKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxqZC5oYXNPd25Qcm9wZXJ0eShhKSYmamRbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gbWQoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bGQoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgbmQ9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIG9kKGEsYil7aWYoYil7aWYobmRbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDEzNyxhLFwiXCIpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHUoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHUoNjIsXCJcIikpO319XG5mdW5jdGlvbiBwZChhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHFkPU1iLmh0bWw7ZnVuY3Rpb24gcmQoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9Y2MoYSk7Yj13YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl1YyhiW2RdLGEsYyl9ZnVuY3Rpb24gc2QoKXt9XG5mdW5jdGlvbiB0ZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gdWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIHZkKGEsYil7dmFyIGM9dWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9dWQoYyl9fVxuZnVuY3Rpb24gd2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT93ZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9ZnVuY3Rpb24geGQoKXtmb3IodmFyIGE9d2luZG93LGI9dGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9dGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9XG5mdW5jdGlvbiB5ZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfXZhciB6ZD1cIiRcIixBZD1cIi8kXCIsQmQ9XCIkP1wiLENkPVwiJCFcIixEZD1udWxsLEVkPW51bGw7ZnVuY3Rpb24gRmQoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gR2QoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBIZD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxJZD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gSmQoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9XG5mdW5jdGlvbiBLZChhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT16ZHx8Yz09PUNkfHxjPT09QmQpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlIGM9PT1BZCYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIExkPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE1kPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGQsTmQ9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMZCxPZD1cIl9fcmVhY3RDb250YWluZXJlJFwiK0xkO1xuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YVtNZF07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbT2RdfHxjW01kXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUtkKGEpO251bGwhPT1hOyl7aWYoYz1hW01kXSlyZXR1cm4gYzthPUtkKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBOYyhhKXthPWFbTWRdfHxhW09kXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gUGQoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHUoMzMpKTt9ZnVuY3Rpb24gUWQoYSl7cmV0dXJuIGFbTmRdfHxudWxsfVxuZnVuY3Rpb24gUmQoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFNkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9bGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLFxuYix0eXBlb2YgYykpO3JldHVybiBjfWZ1bmN0aW9uIFRkKGEsYixjKXtpZihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVWQoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1SZChiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspVGQoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylUZChjW2JdLFwiYnViYmxlZFwiLGEpfX1cbmZ1bmN0aW9uIFZkKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gV2QoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWZChhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWGQoYSl7amMoYSxVZCl9dmFyIFlkPW51bGwsWmQ9bnVsbCwkZD1udWxsO1xuZnVuY3Rpb24gYWUoKXtpZigkZClyZXR1cm4gJGQ7dmFyIGEsYj1aZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiAkZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGJlKCl7cmV0dXJuITB9ZnVuY3Rpb24gY2UoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEcoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2JlOmNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Y2U7cmV0dXJuIHRoaXN9XG5uKEcucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YmUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YmUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9YmV9LGlzUGVyc2lzdGVudDpjZSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1jZTt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0cuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtkZShjKTtyZXR1cm4gY307ZGUoRyk7ZnVuY3Rpb24gZWUoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBmZShhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBkZShhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1lZTthLnJlbGVhc2U9ZmV9dmFyIGdlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxoZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaWU9WzksMTMsMjcsMzJdLGplPXlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxrZT1udWxsO3lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihrZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGxlPXlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYha2UsbWU9eWEmJighamV8fGtlJiY4PGtlJiYxMT49a2UpLG5lPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLG9lPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHBlPSExO1xuZnVuY3Rpb24gcWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1pZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHJlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHNlPSExO2Z1bmN0aW9uIHRlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiByZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7cGU9ITA7cmV0dXJuIG5lO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PW5lJiZwZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHNlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFqZSYmcWUoYSxiKT8oYT1hZSgpLCRkPVpkPVlkPW51bGwsc2U9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIG1lJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB2ZT17ZXZlbnRUeXBlczpvZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKGplKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPW9lLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPW9lLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1vZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2Ugc2U/cWUoYSxjKSYmKGY9b2UuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1vZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhtZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihzZXx8ZiE9PW9lLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PW9lLmNvbXBvc2l0aW9uRW5kJiZzZSYmKGU9YWUoKSk6KFlkPWQsWmQ9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsc2U9ITApKSxmPWdlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9cmUoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFhkKGYpLGU9Zik6ZT1udWxsOyhhPWxlP3RlKGEsYyk6dWUoYSxjKSk/KGI9aGUuZ2V0UG9vbGVkKG9lLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxYZChiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSx3ZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiB4ZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXdlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciB5ZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiB6ZShhLGIsYyl7YT1HLmdldFBvb2xlZCh5ZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0RhKGMpO1hkKGEpO3JldHVybiBhfXZhciBBZT1udWxsLEJlPW51bGw7ZnVuY3Rpb24gQ2UoYSl7bWMoYSl9ZnVuY3Rpb24gRGUoYSl7dmFyIGI9UGQoYSk7aWYoeWIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgRmU9ITE7eWEmJihGZT1vYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIEdlKCl7QWUmJihBZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSksQmU9QWU9bnVsbCl9ZnVuY3Rpb24gSGUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkRlKEJlKSlpZihhPXplKEJlLGEsbmMoYSkpLEphKW1jKGEpO2Vsc2V7SmE9ITA7dHJ5e0ZhKENlLGEpfWZpbmFsbHl7SmE9ITEsTGEoKX19fWZ1bmN0aW9uIEllKGEsYixjKXtcImZvY3VzXCI9PT1hPyhHZSgpLEFlPWIsQmU9YyxBZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSkpOlwiYmx1clwiPT09YSYmR2UoKX1mdW5jdGlvbiBKZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBEZShCZSl9ZnVuY3Rpb24gS2UoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBEZShiKX1mdW5jdGlvbiBMZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBEZShiKX1cbnZhciBNZT17ZXZlbnRUeXBlczp5ZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkZlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9QZChiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUVlO2Vsc2UgaWYoeGUoZSkpaWYoRmUpZz1MZTtlbHNle2c9SmU7dmFyIGg9SWV9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPUtlKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiB6ZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkRiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LE5lPUcuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxcbk9lPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZShhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9lW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gUWUoKXtyZXR1cm4gUGV9XG52YXIgUmU9MCxTZT0wLFRlPSExLFVlPSExLFZlPU5lLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1SZTtSZT1hLnNjcmVlblg7cmV0dXJuIFRlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooVGU9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1TZTtTZT1hLnNjcmVlblk7cmV0dXJuIFVlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooVWU9ITAsMCl9fSksV2U9VmUuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLFhlPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxZZT17ZXZlbnRUeXBlczpYZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtmPWQud2luZG93PT09ZD9kOihmPWQub3duZXJEb2N1bWVudCk/Zi5kZWZhdWx0Vmlld3x8Zi5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP3RjKGIpOm51bGwsbnVsbCE9PWIpe3ZhciBoPWRjKGIpO2lmKGIhPT1ofHw1IT09Yi50YWcmJjYhPT1iLnRhZyliPW51bGx9fWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1cbmEpe3ZhciBrPVZlO3ZhciBsPVhlLm1vdXNlTGVhdmU7dmFyIG09WGUubW91c2VFbnRlcjt2YXIgcD1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaz1XZSxsPVhlLnBvaW50ZXJMZWF2ZSxtPVhlLnBvaW50ZXJFbnRlcixwPVwicG9pbnRlclwiO2E9bnVsbD09Zz9mOlBkKGcpO2Y9bnVsbD09Yj9mOlBkKGIpO2w9ay5nZXRQb29sZWQobCxnLGMsZCk7bC50eXBlPXArXCJsZWF2ZVwiO2wudGFyZ2V0PWE7bC5yZWxhdGVkVGFyZ2V0PWY7Yz1rLmdldFBvb2xlZChtLGIsYyxkKTtjLnR5cGU9cCtcImVudGVyXCI7Yy50YXJnZXQ9ZjtjLnJlbGF0ZWRUYXJnZXQ9YTtkPWc7cD1iO2lmKGQmJnApYTp7az1kO209cDtnPTA7Zm9yKGE9azthO2E9UmQoYSkpZysrO2E9MDtmb3IoYj1tO2I7Yj1SZChiKSlhKys7Zm9yKDswPGctYTspaz1SZChrKSxnLS07Zm9yKDswPGEtZzspbT1SZChtKSxhLS07Zm9yKDtnLS07KXtpZihrPT09bXx8az09PW0uYWx0ZXJuYXRlKWJyZWFrIGE7XG5rPVJkKGspO209UmQobSl9az1udWxsfWVsc2Ugaz1udWxsO209aztmb3Ioaz1bXTtkJiZkIT09bTspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2sucHVzaChkKTtkPVJkKGQpfWZvcihkPVtdO3AmJnAhPT1tOyl7Zz1wLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ZC5wdXNoKHApO3A9UmQocCl9Zm9yKHA9MDtwPGsubGVuZ3RoO3ArKylWZChrW3BdLFwiYnViYmxlZFwiLGwpO2ZvcihwPWQubGVuZ3RoOzA8cC0tOylWZChkW3BdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm4gMD09PShlJjY0KT9bbF06W2wsY119fTtmdW5jdGlvbiBaZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyICRlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOlplLGFmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBiZihhLGIpe2lmKCRlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighYWYuY2FsbChiLGNbZF0pfHwhJGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciBjZj15YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGRmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxlZj1udWxsLGZmPW51bGwsZ2Y9bnVsbCxoZj0hMTtcbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoaGZ8fG51bGw9PWVmfHxlZiE9PXRkKGMpKXJldHVybiBudWxsO2M9ZWY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmeWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gZ2YmJmJmKGdmLGMpP251bGw6KGdmPWMsYT1HLmdldFBvb2xlZChkZi5zZWxlY3QsZmYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1lZixYZChhKSxhKX1cbnZhciBrZj17ZXZlbnRUeXBlczpkZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXtlPWZ8fChkLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCk7aWYoIShmPSFlKSl7YTp7ZT1jYyhlKTtmPXdhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9QZChiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKHhlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKWVmPWUsZmY9YixnZj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6Z2Y9ZmY9ZWY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6aGY9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBoZj0hMSxqZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihjZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGpmKGMsZCl9cmV0dXJuIG51bGx9fSxsZj1HLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksbWY9Ry5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxuZj1OZS5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIG9mKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHBmPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxxZj17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0scmY9TmUuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXBmW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9mKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9xZlthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2YoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2YoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxzZj1WZS5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdGY9TmUuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWV9KSx1Zj1HLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx2Zj1WZS5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHdmPXtldmVudFR5cGVzOldjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9WWMuZ2V0KGEpO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2YoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXJmO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1uZjticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVxuVmU7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1zZjticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXRmO2JyZWFrO2Nhc2UgWGI6Y2FzZSBZYjpjYXNlIFpiOmE9bGY7YnJlYWs7Y2FzZSAkYjphPXVmO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPU5lO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9dmY7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1tZjticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVxuV2U7YnJlYWs7ZGVmYXVsdDphPUd9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtYZChiKTtyZXR1cm4gYn19O2lmKHBhKXRocm93IEVycm9yKHUoMTAxKSk7cGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7cmEoKTt2YXIgeGY9TmM7bGE9UWQ7bWE9eGY7bmE9UGQ7eGEoe1NpbXBsZUV2ZW50UGx1Z2luOndmLEVudGVyTGVhdmVFdmVudFBsdWdpbjpZZSxDaGFuZ2VFdmVudFBsdWdpbjpNZSxTZWxlY3RFdmVudFBsdWdpbjprZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnZlfSk7dmFyIHlmPVtdLHpmPS0xO2Z1bmN0aW9uIEgoYSl7MD56Znx8KGEuY3VycmVudD15Zlt6Zl0seWZbemZdPW51bGwsemYtLSl9XG5mdW5jdGlvbiBJKGEsYil7emYrKzt5Zlt6Zl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBBZj17fSxKPXtjdXJyZW50OkFmfSxLPXtjdXJyZW50OiExfSxCZj1BZjtmdW5jdGlvbiBDZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEFmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIERmKCl7SChLKTtIKEopfWZ1bmN0aW9uIEVmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1BZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiKTtJKEssYyl9ZnVuY3Rpb24gRmYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih1KDEwOCxwYihiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gR2YoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEFmO0JmPUouY3VycmVudDtJKEosYSk7SShLLEsuY3VycmVudCk7cmV0dXJuITB9XG5mdW5jdGlvbiBIZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhhPUZmKGEsYixCZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoSyksSChKKSxJKEosYSkpOkgoSyk7SShLLGMpfVxudmFyIElmPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEpmPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxLZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLExmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LE1mPXIudW5zdGFibGVfbm93LE5mPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsT2Y9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxQZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFFmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksUmY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxTZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxUZj17fSxVZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFZmPXZvaWQgMCE9PUxmP0xmOmZ1bmN0aW9uKCl7fSxXZj1udWxsLFhmPW51bGwsWWY9ITEsWmY9TWYoKSwkZj0xRTQ+WmY/TWY6ZnVuY3Rpb24oKXtyZXR1cm4gTWYoKS1aZn07XG5mdW5jdGlvbiBhZygpe3N3aXRjaChOZigpKXtjYXNlIE9mOnJldHVybiA5OTtjYXNlIFBmOnJldHVybiA5ODtjYXNlIFFmOnJldHVybiA5NztjYXNlIFJmOnJldHVybiA5NjtjYXNlIFNmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gT2Y7Y2FzZSA5ODpyZXR1cm4gUGY7Y2FzZSA5NzpyZXR1cm4gUWY7Y2FzZSA5NjpyZXR1cm4gUmY7Y2FzZSA5NTpyZXR1cm4gU2Y7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gY2coYSxiKXthPWJnKGEpO3JldHVybiBJZihhLGIpfWZ1bmN0aW9uIGRnKGEsYixjKXthPWJnKGEpO3JldHVybiBKZihhLGIsYyl9ZnVuY3Rpb24gZWcoYSl7bnVsbD09PVdmPyhXZj1bYV0sWGY9SmYoT2YsZmcpKTpXZi5wdXNoKGEpO3JldHVybiBUZn1mdW5jdGlvbiBnZygpe2lmKG51bGwhPT1YZil7dmFyIGE9WGY7WGY9bnVsbDtLZihhKX1mZygpfVxuZnVuY3Rpb24gZmcoKXtpZighWWYmJm51bGwhPT1XZil7WWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9V2Y7Y2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1dmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVdmJiYoV2Y9V2Yuc2xpY2UoYSsxKSksSmYoT2YsZ2cpLGM7fWZpbmFsbHl7WWY9ITF9fX1mdW5jdGlvbiBoZyhhLGIsYyl7Yy89MTA7cmV0dXJuIDEwNzM3NDE4MjEtKCgoMTA3Mzc0MTgyMS1hK2IvMTApL2N8MCkrMSkqY31mdW5jdGlvbiBpZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgamc9e2N1cnJlbnQ6bnVsbH0sa2c9bnVsbCxsZz1udWxsLG1nPW51bGw7ZnVuY3Rpb24gbmcoKXttZz1sZz1rZz1udWxsfVxuZnVuY3Rpb24gb2coYSl7dmFyIGI9amcuY3VycmVudDtIKGpnKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHBnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHFnKGEsYil7a2c9YTttZz1sZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJihyZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBzZyhhLGIpe2lmKG1nIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YiltZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09bGcpe2lmKG51bGw9PT1rZyl0aHJvdyBFcnJvcih1KDMwOCkpO2xnPWI7a2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBsZz1sZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgdGc9ITE7ZnVuY3Rpb24gdWcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxiYXNlUXVldWU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGJhc2VRdWV1ZTphLmJhc2VRdWV1ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB3ZyhhLGIpe2E9e2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9O3JldHVybiBhLm5leHQ9YX1mdW5jdGlvbiB4ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIHlnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJnZnKGMsYSk7YT1hLnVwZGF0ZVF1ZXVlO2M9YS5iYXNlUXVldWU7bnVsbD09PWM/KGEuYmFzZVF1ZXVlPWIubmV4dD1iLGIubmV4dD1iKTooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yil9XG5mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3RnPSExO3ZhciBmPWUuYmFzZVF1ZXVlLGc9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09Zyl7aWYobnVsbCE9PWYpe3ZhciBoPWYubmV4dDtmLm5leHQ9Zy5uZXh0O2cubmV4dD1ofWY9ZztlLnNoYXJlZC5wZW5kaW5nPW51bGw7aD1hLmFsdGVybmF0ZTtudWxsIT09aCYmKGg9aC51cGRhdGVRdWV1ZSxudWxsIT09aCYmKGguYmFzZVF1ZXVlPWcpKX1pZihudWxsIT09Zil7aD1mLm5leHQ7dmFyIGs9ZS5iYXNlU3RhdGUsbD0wLG09bnVsbCxwPW51bGwseD1udWxsO2lmKG51bGwhPT1oKXt2YXIgej1oO2Rve2c9ei5leHBpcmF0aW9uVGltZTtpZihnPGQpe3ZhciBjYT17ZXhwaXJhdGlvblRpbWU6ei5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PXg/KHA9eD1cbmNhLG09ayk6eD14Lm5leHQ9Y2E7Zz5sJiYobD1nKX1lbHNle251bGwhPT14JiYoeD14Lm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9KTtBZyhnLHouc3VzcGVuc2VDb25maWcpO2E6e3ZhciBEPWEsdD16O2c9YjtjYT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOkQ9dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBEKXtrPUQuY2FsbChjYSxrLGcpO2JyZWFrIGF9az1EO2JyZWFrIGE7Y2FzZSAzOkQuZWZmZWN0VGFnPUQuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDpEPXQucGF5bG9hZDtnPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBEP0QuY2FsbChjYSxrLGcpOkQ7aWYobnVsbD09PWd8fHZvaWQgMD09PWcpYnJlYWsgYTtrPW4oe30sayxnKTticmVhayBhO2Nhc2UgMjp0Zz0hMH19bnVsbCE9PXouY2FsbGJhY2smJlxuKGEuZWZmZWN0VGFnfD0zMixnPWUuZWZmZWN0cyxudWxsPT09Zz9lLmVmZmVjdHM9W3pdOmcucHVzaCh6KSl9ej16Lm5leHQ7aWYobnVsbD09PXp8fHo9PT1oKWlmKGc9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09ZylicmVhaztlbHNlIHo9Zi5uZXh0PWcubmV4dCxnLm5leHQ9aCxlLmJhc2VRdWV1ZT1mPWcsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpfW51bGw9PT14P209azp4Lm5leHQ9cDtlLmJhc2VTdGF0ZT1tO2UuYmFzZVF1ZXVlPXg7QmcobCk7YS5leHBpcmF0aW9uVGltZT1sO2EubWVtb2l6ZWRTdGF0ZT1rfX1cbmZ1bmN0aW9uIENnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9ZTtlPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQpdGhyb3cgRXJyb3IodSgxOTEsZCkpO2QuY2FsbChlKX19fXZhciBEZz1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxFZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBGZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgSmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2RjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZygpLGQ9RGcuc3VzcGVuc2U7XG5jPUhnKGMsYSxkKTtkPXdnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7eGcoYSxkKTtJZyhhLGMpfX07ZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hYmYoYyxkKXx8IWJmKGUsZik6ITB9XG5mdW5jdGlvbiBMZyhhLGIsYyl7dmFyIGQ9ITEsZT1BZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1zZyhmKTooZT1MKGIpP0JmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0NmKGEsZSk6QWYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1KZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUVnO3VnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9c2coZik6KGY9TChiKT9CZjpKLmN1cnJlbnQsZS5jb250ZXh0PUNmKGEsZikpO3pnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihGZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSx6ZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIE9nPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBQZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFFnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiBSZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1TZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1QZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1WZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9V2coYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1UZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYz1VZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1QZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgJGE6cmV0dXJuIGI9VmcoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE9nKGIpfHxcbm5iKGIpKXJldHVybiBiPVdnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1FnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWFiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSAkYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihPZyhjKXx8bmIoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1FnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1hYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSAkYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihPZyhkKXx8bmIoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1FnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gY2EoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLG09Zyx5PWc9MCxBPW51bGw7bnVsbCE9PW0mJnk8aC5sZW5ndGg7eSsrKXttLmluZGV4Pnk/KEE9bSxtPW51bGwpOkE9bS5zaWJsaW5nO3ZhciBxPXgoZSxtLGhbeV0sayk7aWYobnVsbD09PXEpe251bGw9PT1tJiYobT1BKTticmVha31hJiZcbm0mJm51bGw9PT1xLmFsdGVybmF0ZSYmYihlLG0pO2c9ZihxLGcseSk7bnVsbD09PXQ/bD1xOnQuc2libGluZz1xO3Q9cTttPUF9aWYoeT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt5PGgubGVuZ3RoO3krKyltPXAoZSxoW3ldLGspLG51bGwhPT1tJiYoZz1mKG0sZyx5KSxudWxsPT09dD9sPW06dC5zaWJsaW5nPW0sdD1tKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7eTxoLmxlbmd0aDt5KyspQT16KG0sZSx5LGhbeV0sayksbnVsbCE9PUEmJihhJiZudWxsIT09QS5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1BLmtleT95OkEua2V5KSxnPWYoQSxnLHkpLG51bGw9PT10P2w9QTp0LnNpYmxpbmc9QSx0PUEpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gRChlLGcsaCxsKXt2YXIgaz1uYihoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2Ygayl0aHJvdyBFcnJvcih1KDE1MCkpO2g9ay5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1rPW51bGwsdD1nLHk9Zz0wLEE9bnVsbCxxPWgubmV4dCgpO251bGwhPT10JiYhcS5kb25lO3krKyxxPWgubmV4dCgpKXt0LmluZGV4Pnk/KEE9dCx0PW51bGwpOkE9dC5zaWJsaW5nO3ZhciBEPXgoZSx0LHEudmFsdWUsbCk7aWYobnVsbD09PUQpe251bGw9PT10JiYodD1BKTticmVha31hJiZ0JiZudWxsPT09RC5hbHRlcm5hdGUmJmIoZSx0KTtnPWYoRCxnLHkpO251bGw9PT1tP2s9RDptLnNpYmxpbmc9RDttPUQ7dD1BfWlmKHEuZG9uZSlyZXR1cm4gYyhlLHQpLGs7aWYobnVsbD09PXQpe2Zvcig7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXAoZSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTtyZXR1cm4ga31mb3IodD1kKGUsdCk7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXoodCxlLHkscS52YWx1ZSxsKSxudWxsIT09cSYmKGEmJm51bGwhPT1cbnEuYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09cS5rZXk/eTpxLmtleSksZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBrfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1hYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBaYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PWFiKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLFxuay5zaWJsaW5nKTtkPWUoayxmLnByb3BzKTtkLnJlZj1QZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWFiPyhkPVdnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1VZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1QZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgJGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9XG5kLnNpYmxpbmd9ZD1WZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1UZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihPZyhmKSlyZXR1cm4gY2EoYSxkLGYsaCk7aWYobmIoZikpcmV0dXJuIEQoYSxkLGYsaCk7bCYmUWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFhnPVJnKCEwKSxZZz1SZyghMSksWmc9e30sJGc9e2N1cnJlbnQ6Wmd9LGFoPXtjdXJyZW50OlpnfSxiaD17Y3VycmVudDpaZ307XG5mdW5jdGlvbiBjaChhKXtpZihhPT09WmcpdGhyb3cgRXJyb3IodSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBkaChhLGIpe0koYmgsYik7SShhaCxhKTtJKCRnLFpnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOk9iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1PYihiLGEpfUgoJGcpO0koJGcsYil9ZnVuY3Rpb24gZWgoKXtIKCRnKTtIKGFoKTtIKGJoKX1mdW5jdGlvbiBmaChhKXtjaChiaC5jdXJyZW50KTt2YXIgYj1jaCgkZy5jdXJyZW50KTt2YXIgYz1PYihiLGEudHlwZSk7YiE9PWMmJihJKGFoLGEpLEkoJGcsYykpfWZ1bmN0aW9uIGdoKGEpe2FoLmN1cnJlbnQ9PT1hJiYoSCgkZyksSChhaCkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gaGgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09QmR8fGMuZGF0YT09PUNkKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIGloKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIGpoPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsa2g9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsbGg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxtaD0hMTtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gbmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighJGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9oKGEsYixjLGQsZSxmKXtsaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5leHBpcmF0aW9uVGltZT0wO2poLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/cGg6cWg7YT1jKGQsZSk7aWYoYi5leHBpcmF0aW9uVGltZT09PWxoKXtmPTA7ZG97Yi5leHBpcmF0aW9uVGltZT0wO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IodSgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtqaC5jdXJyZW50PXJoO2E9YyhkLGUpfXdoaWxlKGIuZXhwaXJhdGlvblRpbWU9PT1saCl9amguY3VycmVudD1zaDtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O2xoPTA7UD1PPU49bnVsbDttaD0hMTtpZihiKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiB1aCgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gdmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiB3aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5leHBpcmF0aW9uVGltZTtpZihsPGxoKXt2YXIgbT17ZXhwaXJhdGlvblRpbWU6ay5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW0sZj1kKTpoPWgubmV4dD1tO2w+Ti5leHBpcmF0aW9uVGltZSYmXG4oTi5leHBpcmF0aW9uVGltZT1sLEJnKGwpKX1lbHNlIG51bGwhPT1oJiYoaD1oLm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLEFnKGwsay5zdXNwZW5zZUNvbmZpZyksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7JGUoZCxiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTskZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24geWgoYSl7dmFyIGI9dGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6dmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gQmgoKXtyZXR1cm4gdWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIENoKGEsYixjLGQpe3ZhciBlPXRoKCk7Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gRGgoYSxiLGMsZCl7dmFyIGU9dWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZuaChkLGcuZGVwcykpe0FoKGIsYyxmLGQpO3JldHVybn19Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLGYsZCl9ZnVuY3Rpb24gRWgoYSxiKXtyZXR1cm4gQ2goNTE2LDQsYSxiKX1mdW5jdGlvbiBGaChhLGIpe3JldHVybiBEaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEdoKGEsYil7cmV0dXJuIERoKDQsMixhLGIpfVxuZnVuY3Rpb24gSGgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBJaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIERoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBKaCgpe31mdW5jdGlvbiBLaChhLGIpe3RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9ZnVuY3Rpb24gTGgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBNaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBOaChhLGIsYyl7dmFyIGQ9YWcoKTtjZyg5OD5kPzk4OmQsZnVuY3Rpb24oKXthKCEwKX0pO2NnKDk3PGQ/OTc6ZCxmdW5jdGlvbigpe3ZhciBkPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXthKCExKSxjKCl9ZmluYWxseXtraC5zdXNwZW5zZT1kfX0pfVxuZnVuY3Rpb24gemgoYSxiLGMpe3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXtleHBpcmF0aW9uVGltZTpkLHN1c3BlbnNlQ29uZmlnOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGY9Yi5wZW5kaW5nO251bGw9PT1mP2UubmV4dD1lOihlLm5leHQ9Zi5uZXh0LGYubmV4dD1lKTtiLnBlbmRpbmc9ZTtmPWEuYWx0ZXJuYXRlO2lmKGE9PT1OfHxudWxsIT09ZiYmZj09PU4pbWg9ITAsZS5leHBpcmF0aW9uVGltZT1saCxOLmV4cGlyYXRpb25UaW1lPWxoO2Vsc2V7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09Znx8MD09PWYuZXhwaXJhdGlvblRpbWUpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuZWFnZXJSZWR1Y2VyPWY7ZS5lYWdlclN0YXRlPWg7aWYoJGUoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fUlnKGEsXG5kKX19XG52YXIgc2g9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LHBoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpLaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpFaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gQ2goNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQ2goNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz10aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLFxuYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPXRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnloLHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz15aChhKSxkPWNbMF0sZT1jWzFdO0VoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1cbmN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eWgoITEpLGM9YlswXTtiPWJbMV07cmV0dXJuW0toKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHFoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6d2gsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHdoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXdoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVxud2godmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHJoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6eGgsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHhoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXhoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXhoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsXG5iLGEpLFtiLGFdKSxjXX19LE9oPW51bGwsUGg9bnVsbCxRaD0hMTtmdW5jdGlvbiBSaChhLGIpe3ZhciBjPVNoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBUaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVWgoYSl7aWYoUWgpe3ZhciBiPVBoO2lmKGIpe3ZhciBjPWI7aWYoIVRoKGEsYikpe2I9SmQoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFUaChhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO1FoPSExO09oPWE7cmV0dXJufVJoKE9oLGMpfU9oPWE7UGg9SmQoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsUWg9ITEsT2g9YX19ZnVuY3Rpb24gVmgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO09oPWF9XG5mdW5jdGlvbiBXaChhKXtpZihhIT09T2gpcmV0dXJuITE7aWYoIVFoKXJldHVybiBWaChhKSxRaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUdkKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1QaDtiOylSaChhLGIpLGI9SmQoYi5uZXh0U2libGluZyk7VmgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1BZCl7aWYoMD09PWIpe1BoPUpkKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PXpkJiZjIT09Q2QmJmMhPT1CZHx8YisrfWE9YS5uZXh0U2libGluZ31QaD1udWxsfX1lbHNlIFBoPU9oP0pkKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoKXtQaD1PaD1udWxsO1FoPSExfXZhciBZaD1XYS5SZWFjdEN1cnJlbnRPd25lcixyZz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWcoYixudWxsLGMsZCk6WGcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gWmgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3FnKGIsZSk7ZD1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFiaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxjaShhLGIsZyxkLGUsZik7YT1VZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmJmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuICRoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVNnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2koYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmYmYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocmc9ITEsZTxmKT8oYi5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLCRoKGEsYixmKSk6ZGkoYSxiLGMsZCxmKX1mdW5jdGlvbiBlaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGRpKGEsYixjLGQsZSl7dmFyIGY9TChjKT9CZjpKLmN1cnJlbnQ7Zj1DZihiLGYpO3FnKGIsZSk7Yz1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7cWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLExnKGIsYyxkKSxOZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKTt0Zz0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT14O3pnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHx4IT09a3x8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9dGd8fEtnKGIsYyxoLGQseCxrLGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLHZnKGEsYiksaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6aWcoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKSx0Zz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSxnLnN0YXRlPWssemcoYixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUsaCE9PWR8fGshPT14fHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT10Z3x8S2coYixjLGgsZCxrLHgsbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWwsZD1tKTpcbihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gZ2koYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlLGYpe2VpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZIZihiLGMsITEpLCRoKGEsYixmKTtkPWIuc3RhdGVOb2RlO1loLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVhnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WGcoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmSGYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0VmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkVmKGEsYi5jb250ZXh0LCExKTtkaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgaWk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiBqaShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmVWgoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WWcoYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9U2coZCxlKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1YZyhiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1cbmN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVhnKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24ga2koYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3BnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsRXhwaXJhdGlvbj0wLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1IoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYma2koYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpa2koYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShNLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1oaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO2xpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWhoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1saShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6bGkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZCZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVNnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIG5pLG9pLHBpLHFpO1xubmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O29pPWZ1bmN0aW9uKCl7fTtcbnBpPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtjaCgkZy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9emIoZyxmKTtkPXpiKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HYihnLGYpO2Q9R2IoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1JYihnLGYpO2Q9SWIoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1zZCl9b2QoYyxkKTt2YXIgaCxrO2M9bnVsbDtmb3IoaCBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGgpJiZmLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mW2hdKWlmKFwic3R5bGVcIj09PVxuaClmb3IoayBpbiBnPWZbaF0sZylnLmhhc093blByb3BlcnR5KGspJiYoY3x8KGM9e30pLGNba109XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWgmJlwiY2hpbGRyZW5cIiE9PWgmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goaCxudWxsKSk7Zm9yKGggaW4gZCl7dmFyIGw9ZFtoXTtnPW51bGwhPWY/ZltoXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShoKSYmbCE9PWcmJihudWxsIT1sfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1oKWlmKGcpe2ZvcihrIGluIGcpIWcuaGFzT3duUHJvcGVydHkoayl8fGwmJmwuaGFzT3duUHJvcGVydHkoayl8fChjfHwoYz17fSksY1trXT1cIlwiKTtmb3IoayBpbiBsKWwuaGFzT3duUHJvcGVydHkoaykmJmdba10hPT1sW2tdJiYoY3x8KGM9e30pLFxuY1trXT1sW2tdKX1lbHNlIGN8fChhfHwoYT1bXSksYS5wdXNoKGgsYykpLGM9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8obD1sP2wuX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmchPT1sJiYoYT1hfHxbXSkucHVzaChoLGwpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiZyZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7aWYoYi51cGRhdGVRdWV1ZT1lKWIuZWZmZWN0VGFnfD00fX07XG5xaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZWZmZWN0VGFnfD00KX07ZnVuY3Rpb24gcmkoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gc2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDM6cmV0dXJuIGVoKCksSChLKSxIKEopLGM9Yi5zdGF0ZU5vZGUsYy5wZW5kaW5nQ29udGV4dCYmKGMuY29udGV4dD1jLnBlbmRpbmdDb250ZXh0LGMucGVuZGluZ0NvbnRleHQ9bnVsbCksbnVsbCE9PWEmJm51bGwhPT1hLmNoaWxkfHwhV2goYil8fChiLmVmZmVjdFRhZ3w9NCksb2koYiksbnVsbDtjYXNlIDU6Z2goYik7Yz1jaChiaC5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXBpKGEsYixlLGQsYyksYS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xucmV0dXJuIG51bGx9YT1jaCgkZy5jdXJyZW50KTtpZihXaChiKSl7ZD1iLnN0YXRlTm9kZTtlPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtNZF09YjtkW05kXT1mO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPGFjLmxlbmd0aDthKyspRihhY1thXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpBYihkLGYpO0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihkLGYpLEYoXCJpbnZhbGlkXCIsZCkscmQoYyxcIm9uQ2hhbmdlXCIpfW9kKGUsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJihhPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTp2YS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmcmQoYyxnKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoZCk7RWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihkKTtMYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmXG4oZC5vbmNsaWNrPXNkKX1jPWE7Yi51cGRhdGVRdWV1ZT1jO251bGwhPT1jJiYoYi5lZmZlY3RUYWd8PTQpfWVsc2V7Zz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDthPT09cWQmJihhPU5iKGUpKTthPT09cWQ/XCJzY3JpcHRcIj09PWU/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChlLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxlKTthW01kXT1iO2FbTmRdPWQ7bmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9cGQoZSxkKTtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLFxuYSk7aD1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYy5sZW5ndGg7aCsrKUYoYWNbaF0sYSk7aD1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixhKTtGKFwic3VibWl0XCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpBYihhLGQpO2g9emIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD1HYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07aD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGEsXG5kKTtoPUliKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPWR9b2QoZSxoKTt2YXIgaz1oO2ZvcihmIGluIGspaWYoay5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGw9a1tmXTtcInN0eWxlXCI9PT1mP21kKGEsbCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8obD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1sJiZRYihhLGwpKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD8oXCJ0ZXh0YXJlYVwiIT09ZXx8XCJcIiE9PWwpJiZSYihhLGwpOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmUmIoYSxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJih2YS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1sJiZyZChjLGYpOm51bGwhPWwmJlhhKGEsZixsLGcpKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoYSk7RWIoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGEpO0xiKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIityYihkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2M9ZC52YWx1ZTtudWxsIT1jP0hiKGEsISFkLm11bHRpcGxlLGMsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZIYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoYS5vbmNsaWNrPXNkKX1GZChlLGQpJiYoYi5lZmZlY3RUYWd8PTQpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlxaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbmM9Y2goYmguY3VycmVudCk7Y2goJGcuY3VycmVudCk7V2goYik/KGM9Yi5zdGF0ZU5vZGUsZD1iLm1lbW9pemVkUHJvcHMsY1tNZF09YixjLm5vZGVWYWx1ZSE9PWQmJihiLmVmZmVjdFRhZ3w9NCkpOihjPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksY1tNZF09YixiLnN0YXRlTm9kZT1jKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9YyxiO2M9bnVsbCE9PWQ7ZD0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJldoKGIpOihlPWEubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1lLGN8fG51bGw9PT1lfHwoZT1hLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihmPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWY/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9Zik6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PVxuZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpKTtpZihjJiYhZCYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlTPT09dGkmJihTPXVpKTtlbHNle2lmKFM9PT10aXx8Uz09PXVpKVM9dmk7MCE9PXdpJiZudWxsIT09VCYmKHhpKFQsVSkseWkoVCx3aSkpfWlmKGN8fGQpYi5lZmZlY3RUYWd8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG9pKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYiksbnVsbDtjYXNlIDE3OnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDE5OkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZT0wIT09KGIuZWZmZWN0VGFnJjY0KTtmPWQucmVuZGVyaW5nO2lmKG51bGw9PT1mKWlmKGUpcmkoZCwhMSk7ZWxzZXtpZihTIT09dGl8fG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJlxuNjQpKWZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXthPWhoKGYpO2lmKG51bGwhPT1hKXtiLmVmZmVjdFRhZ3w9NjQ7cmkoZCwhMSk7ZT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1lJiYoYi51cGRhdGVRdWV1ZT1lLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2ZvcihkPWIuY2hpbGQ7bnVsbCE9PWQ7KWU9ZCxmPWMsZS5lZmZlY3RUYWcmPTIsZS5uZXh0RWZmZWN0PW51bGwsZS5maXJzdEVmZmVjdD1udWxsLGUubGFzdEVmZmVjdD1udWxsLGE9ZS5hbHRlcm5hdGUsbnVsbD09PWE/KGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGUuZXhwaXJhdGlvblRpbWU9ZixlLmNoaWxkPW51bGwsZS5tZW1vaXplZFByb3BzPW51bGwsZS5tZW1vaXplZFN0YXRlPW51bGwsZS51cGRhdGVRdWV1ZT1udWxsLGUuZGVwZW5kZW5jaWVzPW51bGwpOihlLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lLFxuZS5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLGUuY2hpbGQ9YS5jaGlsZCxlLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzLGUubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGUsZS51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGY9YS5kZXBlbmRlbmNpZXMsZS5kZXBlbmRlbmNpZXM9bnVsbD09PWY/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Zi5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Zi5maXJzdENvbnRleHQscmVzcG9uZGVyczpmLnJlc3BvbmRlcnN9KSxkPWQuc2libGluZztJKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9Zj1mLnNpYmxpbmd9fWVsc2V7aWYoIWUpaWYoYT1oaChmKSxudWxsIT09YSl7aWYoYi5lZmZlY3RUYWd8PTY0LGU9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZWZmZWN0VGFnfD00KSxyaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWYuYWx0ZXJuYXRlKXJldHVybiBiPVxuYi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMiokZigpLWQucmVuZGVyaW5nU3RhcnRUaW1lPmQudGFpbEV4cGlyYXRpb24mJjE8YyYmKGIuZWZmZWN0VGFnfD02NCxlPSEwLHJpKGQsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWMtMSk7ZC5pc0JhY2t3YXJkcz8oZi5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1mKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWY6Yi5jaGlsZD1mLGQubGFzdD1mKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oMD09PWQudGFpbEV4cGlyYXRpb24mJihkLnRhaWxFeHBpcmF0aW9uPSRmKCkrNTAwKSxjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT0kZigpLGMuc2libGluZz1udWxsLGI9TS5jdXJyZW50LEkoTSxlP2ImMXwyOmImMSksYyk6bnVsbH10aHJvdyBFcnJvcih1KDE1NixcbmIudGFnKSk7fWZ1bmN0aW9uIHppKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRGYoKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih1KDI4NSkpO2EuZWZmZWN0VGFnPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBnaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoTSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKE0pLG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBBaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnFiKGIpfX1cbnZhciBCaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBDaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPXFiKGMpKTtudWxsIT09YyYmcGIoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmcGIoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gRGkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe0VpKGEsYyl9fWZ1bmN0aW9uIEZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0VpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEdpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmlnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEhpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuZGVzdHJveTtjLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWQmJmQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIElpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1cbmZ1bmN0aW9uIEppKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpJaSgzLGMpO3JldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmlnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWI9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmQ2coYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1DZyhjLGIsYSl9cmV0dXJuO1xuY2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJjQmJkZkKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmVmMoYykpKSk7cmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gS2koYSxiLGMpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBMaSYmTGkoYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtjZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7RWkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOkZpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJkRpKGIsYyk7YnJlYWs7Y2FzZSA1OkZpKGIpO2JyZWFrO2Nhc2UgNDpNaShhLGIsYyl9fVxuZnVuY3Rpb24gTmkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO251bGwhPT1iJiZOaShiKX1mdW5jdGlvbiBPaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFBpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE9pKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihSYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8T2koYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP1FpKGEsYyxiKTpSaShhLGMsYil9XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9c2QpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBSaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFJpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUmkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gTWkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihLaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihLaShhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gU2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOkhpKDMsYik7cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW05kXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZCYihjLGQpO3BkKGEsZSk7Yj1wZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/bWQoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1FiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9SYihjLGgpOlhhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpDYihjLGQpO2JyZWFrO1xuY2FzZSBcInRleHRhcmVhXCI6S2IoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9IYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SGIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkhiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsVmMoYi5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/XG5kPSExOihkPSEwLGM9Yi5jaGlsZCxUaT0kZigpKTtpZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9bGQoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9XG5mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfVVpKGIpO3JldHVybjtjYXNlIDE5OlVpKGIpO3JldHVybjtjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31mdW5jdGlvbiBVaShhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBCaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVZpLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxudmFyIFdpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFhpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7WWl8fChZaT0hMCxaaT1kKTtDaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uICRpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe0NpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1haj9haj1uZXcgU2V0KFt0aGlzXSk6YWouYWRkKHRoaXMpLENpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIGJqPU1hdGguY2VpbCxjaj1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRqPVdhLlJlYWN0Q3VycmVudE93bmVyLFY9MCxlaj04LGZqPTE2LGdqPTMyLHRpPTAsaGo9MSxpaj0yLHVpPTMsdmk9NCxqaj01LFc9VixUPW51bGwsWD1udWxsLFU9MCxTPXRpLGtqPW51bGwsbGo9MTA3Mzc0MTgyMyxtaj0xMDczNzQxODIzLG5qPW51bGwsd2k9MCxvaj0hMSxUaT0wLHBqPTUwMCxZPW51bGwsWWk9ITEsWmk9bnVsbCxhaj1udWxsLHFqPSExLHJqPW51bGwsc2o9OTAsdGo9bnVsbCx1aj0wLHZqPW51bGwsd2o9MDtmdW5jdGlvbiBHZygpe3JldHVybihXJihmanxnaikpIT09Vj8xMDczNzQxODIxLSgkZigpLzEwfDApOjAhPT13aj93ajp3aj0xMDczNzQxODIxLSgkZigpLzEwfDApfVxuZnVuY3Rpb24gSGcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1hZygpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVyZmaikhPT1WKXJldHVybiBVO2lmKG51bGwhPT1jKWE9aGcoYSxjLnRpbWVvdXRNc3wwfHw1RTMsMjUwKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9aGcoYSwxNTAsMTAwKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT1oZyhhLDVFMywyNTApO2JyZWFrO2Nhc2UgOTU6YT0yO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjYpKTt9bnVsbCE9PVQmJmE9PT1VJiYtLWE7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZyhhLGIpe2lmKDUwPHVqKXRocm93IHVqPTAsdmo9bnVsbCxFcnJvcih1KDE4NSkpO2E9eGooYSxiKTtpZihudWxsIT09YSl7dmFyIGM9YWcoKTsxMDczNzQxODIzPT09Yj8oVyZlaikhPT1WJiYoVyYoZmp8Z2opKT09PVY/eWooYSk6KFooYSksVz09PVYmJmdnKCkpOlooYSk7KFcmNCk9PT1WfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT10aj90aj1uZXcgTWFwKFtbYSxiXV0pOihjPXRqLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmdGouc2V0KGEsYikpKX19XG5mdW5jdGlvbiB4aihhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoVD09PWUmJihCZyhiKSxTPT09dmkmJnhpKGUsVSkpLHlpKGUsYikpO3JldHVybiBlfVxuZnVuY3Rpb24gemooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMCE9PWIpcmV0dXJuIGI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7aWYoIUFqKGEsYikpcmV0dXJuIGI7dmFyIGM9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO2E9Yz5hP2M6YTtyZXR1cm4gMj49YSYmYiE9PWE/MDphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWVnKHlqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj16aihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9R2coKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09VGYmJktmKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9lZyh5ai5iaW5kKG51bGwsYSkpOmRnKGQsQmouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLSRmKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBCaihhLGIpe3dqPTA7aWYoYilyZXR1cm4gYj1HZygpLENqKGEsYiksWihhKSxudWxsO3ZhciBjPXpqKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmM9PT1VfHxFaihhLGMpO2lmKG51bGwhPT1YKXt2YXIgZD1XO1d8PWZqO3ZhciBlPUZqKCk7ZG8gdHJ5e0dqKCk7YnJlYWt9Y2F0Y2goaCl7SGooYSxoKX13aGlsZSgxKTtuZygpO1c9ZDtjai5jdXJyZW50PWU7aWYoUz09PWhqKXRocm93IGI9a2osRWooYSxjKSx4aShhLGMpLFooYSksYjtpZihudWxsPT09WClzd2l0Y2goZT1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1jLGQ9UyxUPW51bGwsZCl7Y2FzZSB0aTpjYXNlIGhqOnRocm93IEVycm9yKHUoMzQ1KSk7Y2FzZSBpajpDaihhLDI8Yz8yOmMpO2JyZWFrO2Nhc2UgdWk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7XG5jPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZigxMDczNzQxODIzPT09bGomJihlPVRpK3BqLSRmKCksMTA8ZSkpe2lmKG9qKXt2YXIgZj1hLmxhc3RQaW5nZWRUaW1lO2lmKDA9PT1mfHxmPj1jKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha319Zj16aihhKTtpZigwIT09ZiYmZiE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxlKTticmVha31KaihhKTticmVhaztjYXNlIHZpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKG9qJiYoZT1hLmxhc3RQaW5nZWRUaW1lLDA9PT1lfHxlPj1jKSl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9ZT16aihhKTtpZigwIT09ZSYmZSE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPVxuZDticmVha30xMDczNzQxODIzIT09bWo/ZD0xMCooMTA3Mzc0MTgyMS1taiktJGYoKToxMDczNzQxODIzPT09bGo/ZD0wOihkPTEwKigxMDczNzQxODIxLWxqKS01RTMsZT0kZigpLGM9MTAqKDEwNzM3NDE4MjEtYyktZSxkPWUtZCwwPmQmJihkPTApLGQ9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqYmooZC8xOTYwKSktZCxjPGQmJihkPWMpKTtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugamo6aWYoMTA3Mzc0MTgyMyE9PWxqJiZudWxsIT09bmope2Y9bGo7dmFyIGc9bmo7ZD1nLmJ1c3lNaW5EdXJhdGlvbk1zfDA7MD49ZD9kPTA6KGU9Zy5idXN5RGVsYXlNc3wwLGY9JGYoKS0oMTAqKDEwNzM3NDE4MjEtZiktKGcudGltZW91dE1zfDB8fDVFMykpLGQ9Zjw9ZT8wOmUrZC1mKTtpZigxMDxkKXt4aShhLGMpO2EudGltZW91dEhhbmRsZT1cbkhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha319SmooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyOSkpO31aKGEpO2lmKGEuY2FsbGJhY2tOb2RlPT09YilyZXR1cm4gQmouYmluZChudWxsLGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHlqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2I9MCE9PWI/YjoxMDczNzQxODIzO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmI9PT1VfHxFaihhLGIpO2lmKG51bGwhPT1YKXt2YXIgYz1XO1d8PWZqO3ZhciBkPUZqKCk7ZG8gdHJ5e0tqKCk7YnJlYWt9Y2F0Y2goZSl7SGooYSxlKX13aGlsZSgxKTtuZygpO1c9Yztjai5jdXJyZW50PWQ7aWYoUz09PWhqKXRocm93IGM9a2osRWooYSxiKSx4aShhLGIpLFooYSksYztpZihudWxsIT09WCl0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VD1udWxsO0pqKGEpO1ooYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTGooKXtpZihudWxsIT09dGope3ZhciBhPXRqO3RqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7Q2ooYyxhKTtaKGMpfSk7Z2coKX19XG5mdW5jdGlvbiBNaihhLGIpe3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fWZ1bmN0aW9uIE5qKGEsYil7dmFyIGM9VztXJj0tMjtXfD1lajt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fVxuZnVuY3Rpb24gRWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsSWQoYykpO2lmKG51bGwhPT1YKWZvcihjPVgucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmRGYoKTticmVhaztjYXNlIDM6ZWgoKTtIKEspO0goSik7YnJlYWs7Y2FzZSA1OmdoKGQpO2JyZWFrO2Nhc2UgNDplaCgpO2JyZWFrO2Nhc2UgMTM6SChNKTticmVhaztjYXNlIDE5OkgoTSk7YnJlYWs7Y2FzZSAxMDpvZyhkKX1jPWMucmV0dXJufVQ9YTtYPVNnKGEuY3VycmVudCxudWxsKTtVPWI7Uz10aTtraj1udWxsO21qPWxqPTEwNzM3NDE4MjM7bmo9bnVsbDt3aT0wO29qPSExfVxuZnVuY3Rpb24gSGooYSxiKXtkb3t0cnl7bmcoKTtqaC5jdXJyZW50PXNoO2lmKG1oKWZvcih2YXIgYz1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWM7KXt2YXIgZD1jLnF1ZXVlO251bGwhPT1kJiYoZC5wZW5kaW5nPW51bGwpO2M9Yy5uZXh0fWxoPTA7UD1PPU49bnVsbDttaD0hMTtpZihudWxsPT09WHx8bnVsbD09PVgucmV0dXJuKXJldHVybiBTPWhqLGtqPWIsWD1udWxsO2E6e3ZhciBlPWEsZj1YLnJldHVybixnPVgsaD1iO2I9VTtnLmVmZmVjdFRhZ3w9MjA0ODtnLmZpcnN0RWZmZWN0PWcubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1oJiZcIm9iamVjdFwiPT09dHlwZW9mIGgmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLnRoZW4pe3ZhciBrPWg7aWYoMD09PShnLm1vZGUmMikpe3ZhciBsPWcuYWx0ZXJuYXRlO2w/KGcudXBkYXRlUXVldWU9bC51cGRhdGVRdWV1ZSxnLm1lbW9pemVkU3RhdGU9bC5tZW1vaXplZFN0YXRlLGcuZXhwaXJhdGlvblRpbWU9bC5leHBpcmF0aW9uVGltZSk6KGcudXBkYXRlUXVldWU9XG5udWxsLGcubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgbT0wIT09KE0uY3VycmVudCYxKSxwPWY7ZG97dmFyIHg7aWYoeD0xMz09PXAudGFnKXt2YXIgej1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXopeD1udWxsIT09ei5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIGNhPXAubWVtb2l6ZWRQcm9wczt4PXZvaWQgMD09PWNhLmZhbGxiYWNrPyExOiEwIT09Y2EudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6bT8hMTohMH19aWYoeCl7dmFyIEQ9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09RCl7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtwLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBELmFkZChrKTtpZigwPT09KHAubW9kZSYyKSl7cC5lZmZlY3RUYWd8PTY0O2cuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09Zy50YWcpaWYobnVsbD09PWcuYWx0ZXJuYXRlKWcudGFnPTE3O2Vsc2V7dmFyIHk9d2coMTA3Mzc0MTgyMyxudWxsKTt5LnRhZz0yO3hnKGcseSl9Zy5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO1xuYnJlYWsgYX1oPXZvaWQgMDtnPWI7dmFyIEE9ZS5waW5nQ2FjaGU7bnVsbD09PUE/KEE9ZS5waW5nQ2FjaGU9bmV3IFdpLGg9bmV3IFNldCxBLnNldChrLGgpKTooaD1BLmdldChrKSx2b2lkIDA9PT1oJiYoaD1uZXcgU2V0LEEuc2V0KGssaCkpKTtpZighaC5oYXMoZykpe2guYWRkKGcpO3ZhciBxPU9qLmJpbmQobnVsbCxlLGssZyk7ay50aGVuKHEscSl9cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7aD1FcnJvcigocGIoZy50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK3FiKGcpKX1TIT09XG5qaiYmKFM9aWopO2g9QWkoaCxnKTtwPWY7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6az1oO3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgQj1YaShwLGssYik7eWcocCxCKTticmVhayBhO2Nhc2UgMTprPWg7dmFyIHc9cC50eXBlLHViPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dWImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yi5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyh1YikpKSl7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciB2Yj0kaShwLGssYik7eWcocCx2Yik7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WD1QaihYKX1jYXRjaChYYyl7Yj1YYztjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIEZqKCl7dmFyIGE9Y2ouY3VycmVudDtjai5jdXJyZW50PXNoO3JldHVybiBudWxsPT09YT9zaDphfWZ1bmN0aW9uIEFnKGEsYil7YTxsaiYmMjxhJiYobGo9YSk7bnVsbCE9PWImJmE8bWomJjI8YSYmKG1qPWEsbmo9Yil9ZnVuY3Rpb24gQmcoYSl7YT53aSYmKHdpPWEpfWZ1bmN0aW9uIEtqKCl7Zm9yKDtudWxsIT09WDspWD1RaihYKX1mdW5jdGlvbiBHaigpe2Zvcig7bnVsbCE9PVgmJiFVZigpOylYPVFqKFgpfWZ1bmN0aW9uIFFqKGEpe3ZhciBiPVJqKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1QaihhKSk7ZGouY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gUGooYSl7WD1hO2Rve3ZhciBiPVguYWx0ZXJuYXRlO2E9WC5yZXR1cm47aWYoMD09PShYLmVmZmVjdFRhZyYyMDQ4KSl7Yj1zaShiLFgsVSk7aWYoMT09PVV8fDEhPT1YLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Zvcih2YXIgYz0wLGQ9WC5jaGlsZDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWUsZj1kLmNoaWxkRXhwaXJhdGlvblRpbWU7ZT5jJiYoYz1lKTtmPmMmJihjPWYpO2Q9ZC5zaWJsaW5nfVguY2hpbGRFeHBpcmF0aW9uVGltZT1jfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVguZmlyc3RFZmZlY3QpLG51bGwhPT1YLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WC5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVgubGFzdEVmZmVjdCksMTxYLmVmZmVjdFRhZyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YOmEuZmlyc3RFZmZlY3Q9WCxhLmxhc3RFZmZlY3Q9WCkpfWVsc2V7Yj16aShYKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9WC5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1g9YX13aGlsZShudWxsIT09WCk7Uz09PXRpJiYoUz1qaik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSWooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBKaihhKXt2YXIgYj1hZygpO2NnKDk5LFNqLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG8gRGooKTt3aGlsZShudWxsIT09cmopO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih1KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7YS5jYWxsYmFja1ByaW9yaXR5PTkwO2EubmV4dEtub3duUGVuZGluZ0xldmVsPTA7dmFyIGU9SWooYyk7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZDw9YS5sYXN0U3VzcGVuZGVkVGltZT9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6ZDw9YS5maXJzdFN1c3BlbmRlZFRpbWUmJihhLmZpcnN0U3VzcGVuZGVkVGltZT1cbmQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7ZDw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKTthPT09VCYmKFg9VD1udWxsLFU9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZSl7dmFyIGY9VztXfD1najtkai5jdXJyZW50PW51bGw7RGQ9ZmQ7dmFyIGc9eGQoKTtpZih5ZChnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyl2YXIgaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7aD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7aD1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsXG5tPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxtLm5vZGVUeXBlfWNhdGNoKHdiKXtoPW51bGw7YnJlYWsgYX12YXIgcD0wLHg9LTEsej0tMSxjYT0wLEQ9MCx0PWcseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEE7Oyl7dCE9PWh8fDAhPT1sJiYzIT09dC5ub2RlVHlwZXx8KHg9cCtsKTt0IT09bXx8MCE9PWsmJjMhPT10Lm5vZGVUeXBlfHwoej1wK2spOzM9PT10Lm5vZGVUeXBlJiYocCs9dC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEE9dC5maXJzdENoaWxkKSlicmVhazt5PXQ7dD1BfWZvcig7Oyl7aWYodD09PWcpYnJlYWsgYjt5PT09aCYmKytjYT09PWwmJih4PXApO3k9PT1tJiYrK0Q9PT1rJiYoej1wKTtpZihudWxsIT09KEE9dC5uZXh0U2libGluZykpYnJlYWs7dD15O3k9dC5wYXJlbnROb2RlfXQ9QX1oPS0xPT09eHx8LTE9PT16P251bGw6e3N0YXJ0OngsZW5kOnp9fWVsc2UgaD1udWxsfWg9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1cbm51bGw7RWQ9e2FjdGl2ZUVsZW1lbnREZXRhY2hlZDpudWxsLGZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7WT1lO2RvIHRyeXtUaigpfWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihnPWEsaD1iO251bGwhPT1ZOyl7dmFyIHE9WS5lZmZlY3RUYWc7cSYxNiYmUmIoWS5zdGF0ZU5vZGUsXCJcIik7aWYocSYxMjgpe3ZhciBCPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1CKXt2YXIgdz1CLnJlZjtudWxsIT09dyYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3P3cobnVsbCk6dy5jdXJyZW50PW51bGwpfX1zd2l0Y2gocSYxMDM4KXtjYXNlIDI6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSAxMDI0OlkuZWZmZWN0VGFnJj0tMTAyNTticmVhaztjYXNlIDEwMjg6WS5lZmZlY3RUYWcmPVxuLTEwMjU7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0OlNpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpsPVksTWkoZyxsLGgpLE5pKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dz1FZDtCPXhkKCk7cT13LmZvY3VzZWRFbGVtO2g9dy5zZWxlY3Rpb25SYW5nZTtpZihCIT09cSYmcSYmcS5vd25lckRvY3VtZW50JiZ3ZChxLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHEpKXtudWxsIT09aCYmeWQocSkmJihCPWguc3RhcnQsdz1oLmVuZCx2b2lkIDA9PT13JiYodz1CKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBxPyhxLnNlbGVjdGlvblN0YXJ0PUIscS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odyxxLnZhbHVlLmxlbmd0aCkpOih3PShCPXEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZCLmRlZmF1bHRWaWV3fHx3aW5kb3csdy5nZXRTZWxlY3Rpb24mJlxuKHc9dy5nZXRTZWxlY3Rpb24oKSxsPXEudGV4dENvbnRlbnQubGVuZ3RoLGc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXcuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD12ZChxLGcpLG09dmQocSxoKSxsJiZtJiYoMSE9PXcucmFuZ2VDb3VudHx8dy5hbmNob3JOb2RlIT09bC5ub2RlfHx3LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx3LmZvY3VzTm9kZSE9PW0ubm9kZXx8dy5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKEI9Qi5jcmVhdGVSYW5nZSgpLEIuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx3LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8ody5hZGRSYW5nZShCKSx3LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKTooQi5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx3LmFkZFJhbmdlKEIpKSkpKSk7Qj1bXTtmb3Iodz1xO3c9dy5wYXJlbnROb2RlOykxPT09dy5ub2RlVHlwZSYmQi5wdXNoKHtlbGVtZW50OncsbGVmdDp3LnNjcm9sbExlZnQsXG50b3A6dy5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgcS5mb2N1cyYmcS5mb2N1cygpO2ZvcihxPTA7cTxCLmxlbmd0aDtxKyspdz1CW3FdLHcuZWxlbWVudC5zY3JvbGxMZWZ0PXcubGVmdCx3LmVsZW1lbnQuc2Nyb2xsVG9wPXcudG9wfWZkPSEhRGQ7RWQ9RGQ9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihxPWE7bnVsbCE9PVk7KXt2YXIgdWI9WS5lZmZlY3RUYWc7dWImMzYmJkppKHEsWS5hbHRlcm5hdGUsWSk7aWYodWImMTI4KXtCPXZvaWQgMDt2YXIgdmI9WS5yZWY7aWYobnVsbCE9PXZiKXt2YXIgWGM9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6Qj1YYzticmVhaztkZWZhdWx0OkI9WGN9XCJmdW5jdGlvblwiPT09dHlwZW9mIHZiP3ZiKEIpOnZiLmN1cnJlbnQ9Qn19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPVxubnVsbDtWZigpO1c9Zn1lbHNlIGEuY3VycmVudD1jO2lmKHFqKXFqPSExLHJqPWEsc2o9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmKGFqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT12aj91aisrOih1aj0wLHZqPWEpOnVqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIFVqJiZVaihjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKFlpKXRocm93IFlpPSExLGE9WmksWmk9bnVsbCxhO2lmKChXJmVqKSE9PVYpcmV0dXJuIG51bGw7Z2coKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBUaigpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzswIT09KGEmMjU2KSYmR2koWS5hbHRlcm5hdGUsWSk7MD09PShhJjUxMil8fHFqfHwocWo9ITAsZGcoOTcsZnVuY3Rpb24oKXtEaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIERqKCl7aWYoOTAhPT1zail7dmFyIGE9OTc8c2o/OTc6c2o7c2o9OTA7cmV0dXJuIGNnKGEsVmopfX1mdW5jdGlvbiBWaigpe2lmKG51bGw9PT1yailyZXR1cm4hMTt2YXIgYT1yajtyaj1udWxsO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMzMSkpO3ZhciBiPVc7V3w9Z2o7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOkhpKDUsYyksSWkoNSxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMzApKTtFaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31XPWI7Z2coKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFdqKGEsYixjKXtiPUFpKGMsYik7Yj1YaShhLGIsMTA3Mzc0MTgyMyk7eGcoYSxiKTthPXhqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9ZnVuY3Rpb24gRWkoYSxiKXtpZigzPT09YS50YWcpV2ooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtXaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyhkKSkpe2E9QWkoYixhKTthPSRpKGMsYSwxMDczNzQxODIzKTt4ZyhjLGEpO2M9eGooYywxMDczNzQxODIzKTtudWxsIT09YyYmWihjKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBPaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1Q9PT1hJiZVPT09Yz9TPT09dml8fFM9PT11aSYmMTA3Mzc0MTgyMz09PWxqJiYkZigpLVRpPHBqP0VqKGEsVSk6b2o9ITA6QWooYSxjKSYmKGI9YS5sYXN0UGluZ2VkVGltZSwwIT09YiYmYjxjfHwoYS5sYXN0UGluZ2VkVGltZT1jLFooYSkpKX1mdW5jdGlvbiBWaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPUdnKCksYj1IZyhiLGEsbnVsbCkpO2E9eGooYSxiKTtudWxsIT09YSYmWihhKX12YXIgUmo7XG5Saj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KXJnPSEwO2Vsc2V7aWYoZDxjKXtyZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpoaShiKTtYaCgpO2JyZWFrO2Nhc2UgNTpmaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmR2YoYik7YnJlYWs7Y2FzZSA0OmRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtlPWIudHlwZS5fY29udGV4dDtJKGpnLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtcbmlmKDAhPT1kJiZkPj1jKXJldHVybiBqaShhLGIsYyk7SShNLE0uY3VycmVudCYxKTtiPSRoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SShNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBtaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCk7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuICRoKGEsYixjKX1yZz0hMX19ZWxzZSByZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1DZihiLEouY3VycmVudCk7cWcoYixjKTtlPW9oKG51bGwsXG5iLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoTChkKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dWcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkZnKGIsZCxnLGEpO2UudXBkYXRlcj1KZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO05nKGIsZCxhLGMpO2I9Z2kobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjphOntlPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1cbm51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztvYihlKTtpZigxIT09ZS5fc3RhdHVzKXRocm93IGUuX3Jlc3VsdDtlPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPVhqKGUpO2E9aWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9ZGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPWZpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmgobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haShudWxsLGIsZSxpZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZmkoYSxiLGQsZSxjKTtcbmNhc2UgMzpoaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3ZnKGEsYik7emcoYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlYaCgpLGI9JGgoYSxiLGMpO2Vsc2V7aWYoZT1iLnN0YXRlTm9kZS5oeWRyYXRlKVBoPUpkKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksT2g9YixlPVFoPSEwO2lmKGUpZm9yKGM9WWcoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZWZmZWN0VGFnPWMuZWZmZWN0VGFnJi0zfDEwMjQsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLFhoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZmgoYiksbnVsbD09PWEmJlVoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5udWxsLGc9ZS5jaGlsZHJlbixHZChkLGUpP2c9bnVsbDpudWxsIT09ZiYmR2QoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksZWkoYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJlVoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gamkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WGcoYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksWmgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsXG5iLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKGpnLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9JGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj0kaChhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09XG5rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD13ZyhjLG51bGwpLGwudGFnPTIseGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3BnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9XG5nfVIoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4scWcoYixjKSxlPXNnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1pZyhlLGIucGVuZGluZ1Byb3BzKSxmPWlnKGUudHlwZSxmKSxhaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gY2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxHZihiKSk6YT0hMSxxZyhiLGMpLExnKGIsZCxlKSxOZyhiLGQsZSxjKSxnaShudWxsLFxuYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fTt2YXIgVWo9bnVsbCxMaT1udWxsO2Z1bmN0aW9uIFlqKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1VqPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O0xpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gWmooYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBTaChhLGIsYyxkKXtyZXR1cm4gbmV3IFpqKGEsYixjLGQpfVxuZnVuY3Rpb24gYmkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBYaihhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdiKXJldHVybiAxMTtpZihhPT09amIpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1TaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFVnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm4gV2coYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYjpnPTg7ZXw9NzticmVhaztjYXNlIGJiOmc9ODtlfD0xO2JyZWFrO2Nhc2UgY2I6cmV0dXJuIGE9U2goMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1jYixhLnR5cGU9Y2IsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYjpyZXR1cm4gYT1TaCgxMyxjLGIsZSksYS50eXBlPWhiLGEuZWxlbWVudFR5cGU9aGIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBpYjpyZXR1cm4gYT1TaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1pYixhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGI6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBlYjpnPTk7YnJlYWsgYTtjYXNlIGdiOmc9MTE7YnJlYWsgYTtjYXNlIGpiOmc9MTQ7YnJlYWsgYTtjYXNlIGtiOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBsYjpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1TaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFdnKGEsYixjLGQpe2E9U2goNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIFRnKGEsYixjKXthPVNoKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFZnKGEsYixjKXtiPVNoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIEFqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24geWkoYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBDaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIGJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUdnKCksZz1EZy5zdXNwZW5zZTtmPUhnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGRjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9RmYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9QWY7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj13ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO3hnKGUsYik7SWcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBjayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiBlayhhLGIpe2RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZkayhhLGIpfVxuZnVuY3Rpb24gZmsoYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IGFrKGEsYixjKSxlPVNoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO3VnKGUpO2FbT2RdPWQuY3VycmVudDtjJiYwIT09YiYmSmMoYSw5PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudCk7dGhpcy5faW50ZXJuYWxSb290PWR9ZmsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtiayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtmay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztiayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbT2RdPW51bGx9KX07XG5mdW5jdGlvbiBnayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gaGsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBmayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIGlrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7aC5jYWxsKGEpfX1iayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWhrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2suY2FsbChhKX19TmooZnVuY3Rpb24oKXtiayhiLGcsYSxlKX0pfXJldHVybiBjayhnKX1mdW5jdGlvbiBqayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxud2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aGcoR2coKSwxNTAsMTAwKTtJZyhhLGIpO2VrKGEsYil9fTt4Yz1mdW5jdGlvbihhKXsxMz09PWEudGFnJiYoSWcoYSwzKSxlayhhLDMpKX07eWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9R2coKTtiPUhnKGIsYSxudWxsKTtJZyhhLGIpO2VrKGEsYil9fTtcbnphPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Q2IoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVFkKGQpO2lmKCFlKXRocm93IEVycm9yKHUoOTApKTt5YihkKTtDYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2IoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhiKGEsISFjLm11bHRpcGxlLGIsITEpfX07RmE9TWo7XG5HYT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVc7V3w9NDt0cnl7cmV0dXJuIGNnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1c9ZixXPT09ViYmZ2coKX19O0hhPWZ1bmN0aW9uKCl7KFcmKDF8Zmp8Z2opKT09PVYmJihMaigpLERqKCkpfTtJYT1mdW5jdGlvbihhLGIpe3ZhciBjPVc7V3w9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fTtmdW5jdGlvbiBrayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBqayhhLGIsbnVsbCxjKX12YXIgbGs9e0V2ZW50czpbTmMsUGQsUWQseGEsdGEsWGQsZnVuY3Rpb24oYSl7amMoYSxXZCl9LERhLEVhLGlkLG1jLERqLHtjdXJyZW50OiExfV19O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFlqKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjEzLjFcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9bGs7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9a2s7ZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IodSgxODgpKTt0aHJvdyBFcnJvcih1KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWhjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07XG5leHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGNnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1c9YyxnZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITAsYyl9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITEsYyl9O1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFnayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oTmooZnVuY3Rpb24oKXtpayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbT2RdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1NajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiBrayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWdrKGMpKXRocm93IEVycm9yKHUoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IEVycm9yKHUoMzgpKTtyZXR1cm4gaWsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjEzLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTkuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBBPXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpfWlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiB3JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQj14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQn19dmFyIEM9ITEsRD1udWxsLEU9LTEsRj01LEc9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpGPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgSD1uZXcgTWVzc2FnZUNoYW5uZWwsST1ILnBvcnQyO0gucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtHPWErRjt0cnl7RCghMCxhKT9JLnBvc3RNZXNzYWdlKG51bGwpOihDPSExLEQ9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBDPSExfTtmPWZ1bmN0aW9uKGEpe0Q9YTtDfHwoQz0hMCxJLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0U9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihFKTtFPS0xfX1mdW5jdGlvbiBKKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEsoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEwoYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE0oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SyhuLGMpKXZvaWQgMCE9PXImJjA+SyhyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SyhyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTj1bXSxPPVtdLFA9MSxRPW51bGwsUj0zLFM9ITEsVD0hMSxVPSExO1xuZnVuY3Rpb24gVihhKXtmb3IodmFyIGI9TChPKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU0oTyk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlNKE8pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSihOLGIpO2Vsc2UgYnJlYWs7Yj1MKE8pfX1mdW5jdGlvbiBXKGEpe1U9ITE7VihhKTtpZighVClpZihudWxsIT09TChOKSlUPSEwLGYoWCk7ZWxzZXt2YXIgYj1MKE8pO251bGwhPT1iJiZnKFcsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWChhLGIpe1Q9ITE7VSYmKFU9ITEsaCgpKTtTPSEwO3ZhciBjPVI7dHJ5e1YoYik7Zm9yKFE9TChOKTtudWxsIT09USYmKCEoUS5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1RLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtRLmNhbGxiYWNrPW51bGw7Uj1RLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChRLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/US5jYWxsYmFjaz1lOlE9PT1MKE4pJiZNKE4pO1YoYil9ZWxzZSBNKE4pO1E9TChOKX1pZihudWxsIT09USl2YXIgbT0hMDtlbHNle3ZhciBuPUwoTyk7bnVsbCE9PW4mJmcoVyxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7UT1udWxsLFI9YyxTPSExfX1cbmZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgWj1sO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtUfHxTfHwoVD0hMCxmKFgpKX07XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFJ9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTChOKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChSKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1SfXZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Uj1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9WjtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVI7Uj1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGU9Yy5kZWxheTtlPVwibnVtYmVyXCI9PT10eXBlb2YgZSYmMDxlP2QrZTpkO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlkoYSl9ZWxzZSBjPVkoYSksZT1kO2M9ZStjO2E9e2lkOlArKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6ZSxleHBpcmF0aW9uVGltZTpjLHNvcnRJbmRleDotMX07ZT5kPyhhLnNvcnRJbmRleD1lLEooTyxhKSxudWxsPT09TChOKSYmYT09PUwoTykmJihVP2goKTpVPSEwLGcoVyxlLWQpKSk6KGEuc29ydEluZGV4PWMsSihOLGEpLFR8fFN8fChUPSEwLGYoWCkpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtWKGEpO3ZhciBiPUwoTik7cmV0dXJuIGIhPT1RJiZudWxsIT09USYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxRLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1I9Y319fTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0F4aW9zRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuICh0eXBlb2YgcGF5bG9hZCA9PT0gJ29iamVjdCcpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUaGVtZUNvbnRleHQgZnJvbSAnLi9UaGVtZUNvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIHZhciB0aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIG1hcmdpbjogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keTJcImAuICovXG4gICAgYm9keTI6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keTFcImAuICovXG4gICAgYm9keTE6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY2FwdGlvblwiYC4gKi9cbiAgICBjYXB0aW9uOiB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb24sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYnV0dG9uXCJgLiAqL1xuICAgIGJ1dHRvbjogdGhlbWUudHlwb2dyYXBoeS5idXR0b24sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDFcImAuICovXG4gICAgaDE6IHRoZW1lLnR5cG9ncmFwaHkuaDEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDJcImAuICovXG4gICAgaDI6IHRoZW1lLnR5cG9ncmFwaHkuaDIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDNcImAuICovXG4gICAgaDM6IHRoZW1lLnR5cG9ncmFwaHkuaDMsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDRcImAuICovXG4gICAgaDQ6IHRoZW1lLnR5cG9ncmFwaHkuaDQsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDVcImAuICovXG4gICAgaDU6IHRoZW1lLnR5cG9ncmFwaHkuaDUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDZcImAuICovXG4gICAgaDY6IHRoZW1lLnR5cG9ncmFwaHkuaDYsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3VidGl0bGUxXCJgLiAqL1xuICAgIHN1YnRpdGxlMTogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3VidGl0bGUyXCJgLiAqL1xuICAgIHN1YnRpdGxlMjogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3ZlcmxpbmVcImAuICovXG4gICAgb3ZlcmxpbmU6IHRoZW1lLnR5cG9ncmFwaHkub3ZlcmxpbmUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3JPbmx5XCJgLiBPbmx5IGFjY2Vzc2libGUgdG8gc2NyZWVuIHJlYWRlcnMuICovXG4gICAgc3JPbmx5OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIHdpZHRoOiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwibGVmdFwiYC4gKi9cbiAgICBhbGlnbkxlZnQ6IHtcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwiY2VudGVyXCJgLiAqL1xuICAgIGFsaWduQ2VudGVyOiB7XG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwicmlnaHRcImAuICovXG4gICAgYWxpZ25SaWdodDoge1xuICAgICAgdGV4dEFsaWduOiAncmlnaHQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwianVzdGlmeVwiYC4gKi9cbiAgICBhbGlnbkp1c3RpZnk6IHtcbiAgICAgIHRleHRBbGlnbjogJ2p1c3RpZnknXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG5vd3JhcD17dHJ1ZX1gLiAqL1xuICAgIG5vV3JhcDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZ3V0dGVyQm90dG9tPXt0cnVlfWAuICovXG4gICAgZ3V0dGVyQm90dG9tOiB7XG4gICAgICBtYXJnaW5Cb3R0b206ICcwLjM1ZW0nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBhcmFncmFwaD17dHJ1ZX1gLiAqL1xuICAgIHBhcmFncmFwaDoge1xuICAgICAgbWFyZ2luQm90dG9tOiAxNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJ0ZXh0UHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclRleHRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yVGV4dFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc3BsYXk9XCJpbmxpbmVcImAuICovXG4gICAgZGlzcGxheUlubGluZToge1xuICAgICAgZGlzcGxheTogJ2lubGluZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzcGxheT1cImJsb2NrXCJgLiAqL1xuICAgIGRpc3BsYXlCbG9jazoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmYXVsdFZhcmlhbnRNYXBwaW5nID0ge1xuICBoMTogJ2gxJyxcbiAgaDI6ICdoMicsXG4gIGgzOiAnaDMnLFxuICBoNDogJ2g0JyxcbiAgaDU6ICdoNScsXG4gIGg2OiAnaDYnLFxuICBzdWJ0aXRsZTE6ICdoNicsXG4gIHN1YnRpdGxlMjogJ2g2JyxcbiAgYm9keTE6ICdwJyxcbiAgYm9keTI6ICdwJ1xufTtcbnZhciBUeXBvZ3JhcGh5ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUeXBvZ3JhcGh5KHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhbGlnbiA9IHByb3BzLmFsaWduLFxuICAgICAgYWxpZ24gPSBfcHJvcHMkYWxpZ24gPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRhbGlnbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2luaXRpYWwnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc3BsYXkgPSBwcm9wcy5kaXNwbGF5LFxuICAgICAgZGlzcGxheSA9IF9wcm9wcyRkaXNwbGF5ID09PSB2b2lkIDAgPyAnaW5pdGlhbCcgOiBfcHJvcHMkZGlzcGxheSxcbiAgICAgIF9wcm9wcyRndXR0ZXJCb3R0b20gPSBwcm9wcy5ndXR0ZXJCb3R0b20sXG4gICAgICBndXR0ZXJCb3R0b20gPSBfcHJvcHMkZ3V0dGVyQm90dG9tID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRndXR0ZXJCb3R0b20sXG4gICAgICBfcHJvcHMkbm9XcmFwID0gcHJvcHMubm9XcmFwLFxuICAgICAgbm9XcmFwID0gX3Byb3BzJG5vV3JhcCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbm9XcmFwLFxuICAgICAgX3Byb3BzJHBhcmFncmFwaCA9IHByb3BzLnBhcmFncmFwaCxcbiAgICAgIHBhcmFncmFwaCA9IF9wcm9wcyRwYXJhZ3JhcGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHBhcmFncmFwaCxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ2JvZHkxJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgX3Byb3BzJHZhcmlhbnRNYXBwaW5nID0gcHJvcHMudmFyaWFudE1hcHBpbmcsXG4gICAgICB2YXJpYW50TWFwcGluZyA9IF9wcm9wcyR2YXJpYW50TWFwcGluZyA9PT0gdm9pZCAwID8gZGVmYXVsdFZhcmlhbnRNYXBwaW5nIDogX3Byb3BzJHZhcmlhbnRNYXBwaW5nLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFsaWduXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzcGxheVwiLCBcImd1dHRlckJvdHRvbVwiLCBcIm5vV3JhcFwiLCBcInBhcmFncmFwaFwiLCBcInZhcmlhbnRcIiwgXCJ2YXJpYW50TWFwcGluZ1wiXSk7XG5cbiAgdmFyIENvbXBvbmVudCA9IGNvbXBvbmVudCB8fCAocGFyYWdyYXBoID8gJ3AnIDogdmFyaWFudE1hcHBpbmdbdmFyaWFudF0gfHwgZGVmYXVsdFZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdKSB8fCAnc3Bhbic7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHZhcmlhbnQgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW3ZhcmlhbnRdLCBjb2xvciAhPT0gJ2luaXRpYWwnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBub1dyYXAgJiYgY2xhc3Nlcy5ub1dyYXAsIGd1dHRlckJvdHRvbSAmJiBjbGFzc2VzLmd1dHRlckJvdHRvbSwgcGFyYWdyYXBoICYmIGNsYXNzZXMucGFyYWdyYXBoLCBhbGlnbiAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJhbGlnblwiLmNvbmNhdChjYXBpdGFsaXplKGFsaWduKSldLCBkaXNwbGF5ICE9PSAnaW5pdGlhbCcgJiYgY2xhc3Nlc1tcImRpc3BsYXlcIi5jb25jYXQoY2FwaXRhbGl6ZShkaXNwbGF5KSldKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUeXBvZ3JhcGh5LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNldCB0aGUgdGV4dC1hbGlnbiBvbiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgYWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnLCAnanVzdGlmeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2luaXRpYWwnLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICd0ZXh0UHJpbWFyeScsICd0ZXh0U2Vjb25kYXJ5JywgJ2Vycm9yJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIE92ZXJyaWRlcyB0aGUgYmVoYXZpb3Igb2YgdGhlIGB2YXJpYW50TWFwcGluZ2AgcHJvcC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB0aGUgZGlzcGxheSB0eXBlXG4gICAqL1xuICBkaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydpbml0aWFsJywgJ2Jsb2NrJywgJ2lubGluZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKi9cbiAgZ3V0dGVyQm90dG9tOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIG5vdCB3cmFwLCBidXQgaW5zdGVhZCB3aWxsIHRydW5jYXRlIHdpdGggYSB0ZXh0IG92ZXJmbG93IGVsbGlwc2lzLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGV4dCBvdmVyZmxvdyBjYW4gb25seSBoYXBwZW4gd2l0aCBibG9jayBvciBpbmxpbmUtYmxvY2sgbGV2ZWwgZWxlbWVudHNcbiAgICogKHRoZSBlbGVtZW50IG5lZWRzIHRvIGhhdmUgYSB3aWR0aCBpbiBvcmRlciB0byBvdmVyZmxvdykuXG4gICAqL1xuICBub1dyYXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgaGF2ZSBhIGJvdHRvbSBtYXJnaW4uXG4gICAqL1xuICBwYXJhZ3JhcGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSB0aGVtZSB0eXBvZ3JhcGh5IHN0eWxlcy5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInLCAnYm9keTEnLCAnYm9keTInLCAnY2FwdGlvbicsICdidXR0b24nLCAnb3ZlcmxpbmUnLCAnc3JPbmx5JywgJ2luaGVyaXQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgbWFwcyB0aGUgdmFyaWFudCBwcm9wIHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IEhUTUwgZWxlbWVudCB0eXBlcy5cbiAgICogRm9yIGluc3RhbmNlLCBzdWJ0aXRsZTEgdG8gYDxoNj5gLlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhhdCBtYXBwaW5nLCB5b3UgY2FuIHByb3ZpZGUgeW91ciBvd24uXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSBgY29tcG9uZW50YCBwcm9wLlxuICAgKi9cbiAgdmFyaWFudE1hcHBpbmc6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVHlwb2dyYXBoeSdcbn0pKFR5cG9ncmFwaHkpOyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0IHZhciBpc0Jyb3dzZXIgPSAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHdpbmRvdykpID09PSBcIm9iamVjdFwiICYmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihkb2N1bWVudCkpID09PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5ub2RlVHlwZSA9PT0gOTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCcm93c2VyO1xuIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG5mdW5jdGlvbiB3YXJuaW5nKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWlzUHJvZHVjdGlvbikge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGV4dCA9IFwiV2FybmluZzogXCIgKyBtZXNzYWdlO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS53YXJuKHRleHQpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0aHJvdyBFcnJvcih0ZXh0KTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdhcm5pbmc7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgaXNJbkJyb3dzZXIgZnJvbSAnaXMtaW4tYnJvd3Nlcic7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuXG52YXIgcGxhaW5PYmplY3RDb25zdHJ1cmN0b3IgPSB7fS5jb25zdHJ1Y3RvcjtcbmZ1bmN0aW9uIGNsb25lU3R5bGUoc3R5bGUpIHtcbiAgaWYgKHN0eWxlID09IG51bGwgfHwgdHlwZW9mIHN0eWxlICE9PSAnb2JqZWN0JykgcmV0dXJuIHN0eWxlO1xuICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHJldHVybiBzdHlsZS5tYXAoY2xvbmVTdHlsZSk7XG4gIGlmIChzdHlsZS5jb25zdHJ1Y3RvciAhPT0gcGxhaW5PYmplY3RDb25zdHJ1cmN0b3IpIHJldHVybiBzdHlsZTtcbiAgdmFyIG5ld1N0eWxlID0ge307XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZSkge1xuICAgIG5ld1N0eWxlW25hbWVdID0gY2xvbmVTdHlsZShzdHlsZVtuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gbmV3U3R5bGU7XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcnVsZSBpbnN0YW5jZS5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgaWYgKG5hbWUgPT09IHZvaWQgMCkge1xuICAgIG5hbWUgPSAndW5uYW1lZCc7XG4gIH1cblxuICB2YXIganNzID0gb3B0aW9ucy5qc3M7XG4gIHZhciBkZWNsQ29weSA9IGNsb25lU3R5bGUoZGVjbCk7XG4gIHZhciBydWxlID0ganNzLnBsdWdpbnMub25DcmVhdGVSdWxlKG5hbWUsIGRlY2xDb3B5LCBvcHRpb25zKTtcbiAgaWYgKHJ1bGUpIHJldHVybiBydWxlOyAvLyBJdCBpcyBhbiBhdC1ydWxlIGFuZCBpdCBoYXMgbm8gaW5zdGFuY2UuXG5cbiAgaWYgKG5hbWVbMF0gPT09ICdAJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gVW5rbm93biBydWxlIFwiICsgbmFtZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIGpvaW4gPSBmdW5jdGlvbiBqb2luKHZhbHVlLCBieSkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgIC8vIFJlbW92ZSAhaW1wb3J0YW50IGZyb20gdGhlIHZhbHVlLCBpdCB3aWxsIGJlIHJlYWRkZWQgbGF0ZXIuXG4gICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSBieTtcbiAgICByZXN1bHQgKz0gdmFsdWVbaV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhcnJheSB2YWx1ZXMgdG8gc3RyaW5nLlxuICpcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J11dYCA+IGBtYXJnaW46IDVweCAxMHB4O2BcbiAqIGBib3JkZXI6IFsnMXB4JywgJzJweCddYCA+IGBib3JkZXI6IDFweCwgMnB4O2BcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J10sICchaW1wb3J0YW50J11gID4gYG1hcmdpbjogNXB4IDEwcHggIWltcG9ydGFudDtgXG4gKiBgY29sb3I6IFsncmVkJywgIWltcG9ydGFudF1gID4gYGNvbG9yOiByZWQgIWltcG9ydGFudDtgXG4gKi9cbnZhciB0b0Nzc1ZhbHVlID0gZnVuY3Rpb24gdG9Dc3NWYWx1ZSh2YWx1ZSwgaWdub3JlSW1wb3J0YW50KSB7XG4gIGlmIChpZ25vcmVJbXBvcnRhbnQgPT09IHZvaWQgMCkge1xuICAgIGlnbm9yZUltcG9ydGFudCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICB2YXIgY3NzVmFsdWUgPSAnJzsgLy8gU3VwcG9ydCBzcGFjZSBzZXBhcmF0ZWQgdmFsdWVzIHZpYSBgW1snNXB4JywgJzEwcHgnXV1gLlxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlWzBdKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh2YWx1ZVtpXSA9PT0gJyFpbXBvcnRhbnQnKSBicmVhaztcbiAgICAgIGlmIChjc3NWYWx1ZSkgY3NzVmFsdWUgKz0gJywgJztcbiAgICAgIGNzc1ZhbHVlICs9IGpvaW4odmFsdWVbaV0sICcgJyk7XG4gICAgfVxuICB9IGVsc2UgY3NzVmFsdWUgPSBqb2luKHZhbHVlLCAnLCAnKTsgLy8gQWRkICFpbXBvcnRhbnQsIGJlY2F1c2UgaXQgd2FzIGlnbm9yZWQuXG5cblxuICBpZiAoIWlnbm9yZUltcG9ydGFudCAmJiB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJyFpbXBvcnRhbnQnKSB7XG4gICAgY3NzVmFsdWUgKz0gJyAhaW1wb3J0YW50JztcbiAgfVxuXG4gIHJldHVybiBjc3NWYWx1ZTtcbn07XG5cbi8qKlxuICogSW5kZW50IGEgc3RyaW5nLlxuICogaHR0cDovL2pzcGVyZi5jb20vYXJyYXktam9pbi12cy1mb3JcbiAqL1xuZnVuY3Rpb24gaW5kZW50U3RyKHN0ciwgaW5kZW50KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgaW5kZW50OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ICs9ICcgICc7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc3RyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIFJ1bGUgdG8gQ1NTIHN0cmluZy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQ3NzKHNlbGVjdG9yLCBzdHlsZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAoIXN0eWxlKSByZXR1cm4gcmVzdWx0O1xuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkaW5kZW50ID0gX29wdGlvbnMuaW5kZW50LFxuICAgICAgaW5kZW50ID0gX29wdGlvbnMkaW5kZW50ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkaW5kZW50O1xuICB2YXIgZmFsbGJhY2tzID0gc3R5bGUuZmFsbGJhY2tzO1xuICBpZiAoc2VsZWN0b3IpIGluZGVudCsrOyAvLyBBcHBseSBmYWxsYmFja3MgZmlyc3QuXG5cbiAgaWYgKGZhbGxiYWNrcykge1xuICAgIC8vIEFycmF5IHN5bnRheCB7ZmFsbGJhY2tzOiBbe3Byb3A6IHZhbHVlfV19XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmFsbGJhY2tzKSkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGZhbGxiYWNrcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIGZhbGxiYWNrID0gZmFsbGJhY2tzW2luZGV4XTtcblxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGZhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZmFsbGJhY2tbcHJvcF07XG5cbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIocHJvcCArIFwiOiBcIiArIHRvQ3NzVmFsdWUodmFsdWUpICsgXCI7XCIsIGluZGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdCBzeW50YXgge2ZhbGxiYWNrczoge3Byb3A6IHZhbHVlfX1cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIGZhbGxiYWNrcykge1xuICAgICAgICB2YXIgX3ZhbHVlID0gZmFsbGJhY2tzW19wcm9wXTtcblxuICAgICAgICBpZiAoX3ZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZSkgKyBcIjtcIiwgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9wcm9wMiBpbiBzdHlsZSkge1xuICAgIHZhciBfdmFsdWUyID0gc3R5bGVbX3Byb3AyXTtcblxuICAgIGlmIChfdmFsdWUyICE9IG51bGwgJiYgX3Byb3AyICE9PSAnZmFsbGJhY2tzJykge1xuICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AyICsgXCI6IFwiICsgdG9Dc3NWYWx1ZShfdmFsdWUyKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgIH1cbiAgfSAvLyBBbGxvdyBlbXB0eSBzdHlsZSBpbiB0aGlzIGNhc2UsIGJlY2F1c2UgcHJvcGVydGllcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5LlxuXG5cbiAgaWYgKCFyZXN1bHQgJiYgIW9wdGlvbnMuYWxsb3dFbXB0eSkgcmV0dXJuIHJlc3VsdDsgLy8gV2hlbiBydWxlIGlzIGJlaW5nIHN0cmluZ2lmaWVkIGJlZm9yZSBzZWxlY3RvciB3YXMgZGVmaW5lZC5cblxuICBpZiAoIXNlbGVjdG9yKSByZXR1cm4gcmVzdWx0O1xuICBpbmRlbnQtLTtcbiAgaWYgKHJlc3VsdCkgcmVzdWx0ID0gXCJcXG5cIiArIHJlc3VsdCArIFwiXFxuXCI7XG4gIHJldHVybiBpbmRlbnRTdHIoc2VsZWN0b3IgKyBcIiB7XCIgKyByZXN1bHQsIGluZGVudCkgKyBpbmRlbnRTdHIoJ30nLCBpbmRlbnQpO1xufVxuXG52YXIgZXNjYXBlUmVnZXggPSAvKFtbXFxdLiMqJD48K349fF46KCksXCInYFxcc10pL2c7XG52YXIgbmF0aXZlRXNjYXBlID0gdHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ1NTLmVzY2FwZTtcbnZhciBlc2NhcGUgPSAoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gbmF0aXZlRXNjYXBlID8gbmF0aXZlRXNjYXBlKHN0cikgOiBzdHIucmVwbGFjZShlc2NhcGVSZWdleCwgJ1xcXFwkMScpO1xufSk7XG5cbnZhciBCYXNlU3R5bGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFzZVN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3N0eWxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdmFyIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIGlmIChzaGVldCkgdGhpcy5yZW5kZXJlciA9IHNoZWV0LnJlbmRlcmVyO2Vsc2UgaWYgKFJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQmFzZVN0eWxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnByb3AgPSBmdW5jdGlvbiBwcm9wKG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgLy8gSXQncyBhIGdldHRlci5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuc3R5bGVbbmFtZV07IC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuXG5cbiAgICB2YXIgZm9yY2UgPSBvcHRpb25zID8gb3B0aW9ucy5mb3JjZSA6IGZhbHNlO1xuICAgIGlmICghZm9yY2UgJiYgdGhpcy5zdHlsZVtuYW1lXSA9PT0gdmFsdWUpIHJldHVybiB0aGlzO1xuICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMucHJvY2VzcyAhPT0gZmFsc2UpIHtcbiAgICAgIG5ld1ZhbHVlID0gdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uQ2hhbmdlVmFsdWUodmFsdWUsIG5hbWUsIHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBpc0VtcHR5ID0gbmV3VmFsdWUgPT0gbnVsbCB8fCBuZXdWYWx1ZSA9PT0gZmFsc2U7XG4gICAgdmFyIGlzRGVmaW5lZCA9IG5hbWUgaW4gdGhpcy5zdHlsZTsgLy8gVmFsdWUgaXMgZW1wdHkgYW5kIHdhc24ndCBkZWZpbmVkIGJlZm9yZS5cblxuICAgIGlmIChpc0VtcHR5ICYmICFpc0RlZmluZWQgJiYgIWZvcmNlKSByZXR1cm4gdGhpczsgLy8gV2UgYXJlIGdvaW5nIHRvIHJlbW92ZSB0aGlzIHZhbHVlLlxuXG4gICAgdmFyIHJlbW92ZSA9IGlzRW1wdHkgJiYgaXNEZWZpbmVkO1xuICAgIGlmIChyZW1vdmUpIGRlbGV0ZSB0aGlzLnN0eWxlW25hbWVdO2Vsc2UgdGhpcy5zdHlsZVtuYW1lXSA9IG5ld1ZhbHVlOyAvLyBSZW5kZXJhYmxlIGlzIGRlZmluZWQgaWYgU3R5bGVTaGVldCBvcHRpb24gYGxpbmtgIGlzIHRydWUuXG5cbiAgICBpZiAodGhpcy5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIGlmIChyZW1vdmUpIHRoaXMucmVuZGVyZXIucmVtb3ZlUHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lKTtlbHNlIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lLCBuZXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQuYXR0YWNoZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBSdWxlIGlzIG5vdCBsaW5rZWQuIE1pc3Npbmcgc2hlZXQgb3B0aW9uIFwibGluazogdHJ1ZVwiLicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBCYXNlU3R5bGVSdWxlO1xufSgpO1xudmFyIFN0eWxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3R5bGVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwodGhpcywga2V5LCBzdHlsZSwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5zZWxlY3RvclRleHQgPSB2b2lkIDA7XG4gICAgX3RoaXMuaWQgPSB2b2lkIDA7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB2YXIgc2VsZWN0b3IgPSBvcHRpb25zLnNlbGVjdG9yLFxuICAgICAgICBzY29wZWQgPSBvcHRpb25zLnNjb3BlZCxcbiAgICAgICAgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBnZW5lcmF0ZUlkID0gb3B0aW9ucy5nZW5lcmF0ZUlkO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICB9IGVsc2UgaWYgKHNjb3BlZCAhPT0gZmFsc2UpIHtcbiAgICAgIF90aGlzLmlkID0gZ2VuZXJhdGVJZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgc2hlZXQpO1xuICAgICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gXCIuXCIgKyBlc2NhcGUoX3RoaXMuaWQpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICogQXR0ZW50aW9uOiB1c2UgdGhpcyB3aXRoIGNhdXRpb24uIE1vc3QgYnJvd3NlcnMgZGlkbid0IGltcGxlbWVudFxuICAgKiBzZWxlY3RvclRleHQgc2V0dGVyLCBzbyB0aGlzIG1heSByZXN1bHQgaW4gcmVyZW5kZXJpbmcgb2YgZW50aXJlIFN0eWxlIFNoZWV0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8yID0gU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQXBwbHkgcnVsZSB0byBhbiBlbGVtZW50IGlubGluZS5cbiAgICovXG4gIF9wcm90bzIuYXBwbHlUbyA9IGZ1bmN0aW9uIGFwcGx5VG8ocmVuZGVyYWJsZSkge1xuICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cbiAgICBpZiAocmVuZGVyZXIpIHtcbiAgICAgIHZhciBqc29uID0gdGhpcy50b0pTT04oKTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBqc29uKSB7XG4gICAgICAgIHJlbmRlcmVyLnNldFByb3BlcnR5KHJlbmRlcmFibGUsIHByb3AsIGpzb25bcHJvcF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHJ1bGUuXG4gICAqIEZhbGxiYWNrcyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICogVXNlZnVsIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHZhciBqc29uID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc3R5bGVbcHJvcF07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykganNvbltwcm9wXSA9IHZhbHVlO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSBqc29uW3Byb3BdID0gdG9Dc3NWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLnNlbGVjdG9yVGV4dCwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFN0eWxlUnVsZSwgW3tcbiAgICBrZXk6IFwic2VsZWN0b3JcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSB0aGlzLnNlbGVjdG9yVGV4dCkgcmV0dXJuO1xuICAgICAgdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIsXG4gICAgICAgICAgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyYWJsZTtcbiAgICAgIGlmICghcmVuZGVyYWJsZSB8fCAhcmVuZGVyZXIpIHJldHVybjtcbiAgICAgIHZhciBoYXNDaGFuZ2VkID0gcmVuZGVyZXIuc2V0U2VsZWN0b3IocmVuZGVyYWJsZSwgc2VsZWN0b3IpOyAvLyBJZiBzZWxlY3RvciBzZXR0ZXIgaXMgbm90IGltcGxlbWVudGVkLCByZXJlbmRlciB0aGUgcnVsZS5cblxuICAgICAgaWYgKCFoYXNDaGFuZ2VkKSB7XG4gICAgICAgIHJlbmRlcmVyLnJlcGxhY2VSdWxlKHJlbmRlcmFibGUsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgICAqL1xuICAgICxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yVGV4dDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3R5bGVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5TdHlsZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyB8fCBvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHlsZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyA9IHtcbiAgaW5kZW50OiAxLFxuICBjaGlsZHJlbjogdHJ1ZVxufTtcbnZhciBhdFJlZ0V4cCA9IC9AKFtcXHctXSspLztcbi8qKlxuICogQ29uZGl0aW9uYWwgcnVsZSBmb3IgQG1lZGlhLCBAc3VwcG9ydHNcbiAqL1xuXG52YXIgQ29uZGl0aW9uYWxSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2NvbmRpdGlvbmFsJztcbiAgICB0aGlzLmF0ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMucXVlcnkgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB2YXIgYXRNYXRjaCA9IGtleS5tYXRjaChhdFJlZ0V4cCk7XG4gICAgdGhpcy5hdCA9IGF0TWF0Y2ggPyBhdE1hdGNoWzFdIDogJ3Vua25vd24nOyAvLyBLZXkgbWlnaHQgY29udGFpbiBhIHVuaXF1ZSBzdWZmaXggaW4gY2FzZSB0aGUgYG5hbWVgIHBhc3NlZCBieSB1c2VyIHdhcyBkdXBsaWNhdGUuXG5cbiAgICB0aGlzLnF1ZXJ5ID0gb3B0aW9ucy5uYW1lIHx8IFwiQFwiICsgdGhpcy5hdDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBDb25kaXRpb25hbFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucztcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbmRlbnQgPT0gbnVsbCkgb3B0aW9ucy5pbmRlbnQgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmluZGVudDtcbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PSBudWxsKSBvcHRpb25zLmNoaWxkcmVuID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucy5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMucXVlcnkgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgcmV0dXJuIGNoaWxkcmVuID8gdGhpcy5xdWVyeSArIFwiIHtcXG5cIiArIGNoaWxkcmVuICsgXCJcXG59XCIgOiAnJztcbiAgfTtcblxuICByZXR1cm4gQ29uZGl0aW9uYWxSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCA9IC9AbWVkaWF8QHN1cHBvcnRzXFxzKy87XG52YXIgcGx1Z2luQ29uZGl0aW9uYWxSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXlSZWdFeHAudGVzdChrZXkpID8gbmV3IENvbmRpdGlvbmFsUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxID0ge1xuICBpbmRlbnQ6IDEsXG4gIGNoaWxkcmVuOiB0cnVlXG59O1xudmFyIG5hbWVSZWdFeHAgPSAvQGtleWZyYW1lc1xccysoW1xcdy1dKykvO1xuLyoqXG4gKiBSdWxlIGZvciBAa2V5ZnJhbWVzXG4gKi9cblxudmFyIEtleWZyYW1lc1J1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2tleWZyYW1lcyc7XG4gICAgdGhpcy5hdCA9ICdAa2V5ZnJhbWVzJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLm5hbWUgPSB2b2lkIDA7XG4gICAgdGhpcy5pZCA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHZhciBuYW1lTWF0Y2ggPSBrZXkubWF0Y2gobmFtZVJlZ0V4cCk7XG5cbiAgICBpZiAobmFtZU1hdGNoICYmIG5hbWVNYXRjaFsxXSkge1xuICAgICAgdGhpcy5uYW1lID0gbmFtZU1hdGNoWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5hbWUgPSAnbm9uYW1lJztcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gQmFkIGtleWZyYW1lcyBuYW1lIFwiICsga2V5KSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB0aGlzLmtleSA9IHRoaXMudHlwZSArIFwiLVwiICsgdGhpcy5uYW1lO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNjb3BlZCA9IG9wdGlvbnMuc2NvcGVkLFxuICAgICAgICBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIGdlbmVyYXRlSWQgPSBvcHRpb25zLmdlbmVyYXRlSWQ7XG4gICAgdGhpcy5pZCA9IHNjb3BlZCA9PT0gZmFsc2UgPyB0aGlzLm5hbWUgOiBlc2NhcGUoZ2VuZXJhdGVJZCh0aGlzLCBzaGVldCkpO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gZnJhbWVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBmcmFtZXNbbmFtZV0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgIHBhcmVudDogdGhpc1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZXNSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbmRlbnQgPT0gbnVsbCkgb3B0aW9ucy5pbmRlbnQgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEuY2hpbGRyZW47XG5cbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0ICsgXCIgXCIgKyB0aGlzLmlkICsgXCIge31cIjtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIGlmIChjaGlsZHJlbikgY2hpbGRyZW4gPSBcIlxcblwiICsgY2hpbGRyZW4gKyBcIlxcblwiO1xuICAgIHJldHVybiB0aGlzLmF0ICsgXCIgXCIgKyB0aGlzLmlkICsgXCIge1wiICsgY2hpbGRyZW4gKyBcIn1cIjtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVzUnVsZTtcbn0oKTtcbnZhciBrZXlSZWdFeHAkMSA9IC9Aa2V5ZnJhbWVzXFxzKy87XG52YXIgcmVmUmVnRXhwID0gL1xcJChbXFx3LV0rKS9nO1xuXG52YXIgZmluZFJlZmVyZW5jZWRLZXlmcmFtZSA9IGZ1bmN0aW9uIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBrZXlmcmFtZXMpIHtcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbC5yZXBsYWNlKHJlZlJlZ0V4cCwgZnVuY3Rpb24gKG1hdGNoLCBuYW1lKSB7XG4gICAgICBpZiAobmFtZSBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgcmV0dXJuIGtleWZyYW1lc1tuYW1lXTtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBSZWZlcmVuY2VkIGtleWZyYW1lcyBydWxlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQuXCIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn07XG4vKipcbiAqIFJlcGxhY2UgdGhlIHJlZmVyZW5jZSBmb3IgYSBhbmltYXRpb24gbmFtZS5cbiAqL1xuXG5cbnZhciByZXBsYWNlUmVmID0gZnVuY3Rpb24gcmVwbGFjZVJlZihzdHlsZSwgcHJvcCwga2V5ZnJhbWVzKSB7XG4gIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICB2YXIgcmVmS2V5ZnJhbWUgPSBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbHVlLCBrZXlmcmFtZXMpO1xuXG4gIGlmIChyZWZLZXlmcmFtZSAhPT0gdmFsdWUpIHtcbiAgICBzdHlsZVtwcm9wXSA9IHJlZktleWZyYW1lO1xuICB9XG59O1xuXG52YXIgcGx1Z2luID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIGZyYW1lcywgb3B0aW9ucykge1xuICAgIHJldHVybiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXlSZWdFeHAkMS50ZXN0KGtleSkgPyBuZXcgS2V5ZnJhbWVzUnVsZShrZXksIGZyYW1lcywgb3B0aW9ucykgOiBudWxsO1xuICB9LFxuICAvLyBBbmltYXRpb24gbmFtZSByZWYgcmVwbGFjZXIuXG4gIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnIHx8ICFzaGVldCkgcmV0dXJuIHN0eWxlO1xuICAgIGlmICgnYW5pbWF0aW9uLW5hbWUnIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uLW5hbWUnLCBzaGVldC5rZXlmcmFtZXMpO1xuICAgIGlmICgnYW5pbWF0aW9uJyBpbiBzdHlsZSkgcmVwbGFjZVJlZihzdHlsZSwgJ2FuaW1hdGlvbicsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9LFxuICBvbkNoYW5nZVZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbCwgcHJvcCwgcnVsZSkge1xuICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgIGlmICghc2hlZXQpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgc3dpdGNoIChwcm9wKSB7XG4gICAgICBjYXNlICdhbmltYXRpb24nOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGNhc2UgJ2FuaW1hdGlvbi1uYW1lJzpcbiAgICAgICAgcmV0dXJuIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsLCBzaGVldC5rZXlmcmFtZXMpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfVxufTtcblxudmFyIEtleWZyYW1lUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoS2V5ZnJhbWVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gS2V5ZnJhbWVSdWxlKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwuYXBwbHkoX0Jhc2VTdHlsZVJ1bGUsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gS2V5ZnJhbWVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLmtleSwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgcmV0dXJuIEtleWZyYW1lUnVsZTtcbn0oQmFzZVN0eWxlUnVsZSk7XG52YXIgcGx1Z2luS2V5ZnJhbWVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICByZXR1cm4gbmV3IEtleWZyYW1lUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxudmFyIEZvbnRGYWNlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZvbnRGYWNlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2ZvbnQtZmFjZSc7XG4gICAgdGhpcy5hdCA9ICdAZm9udC1mYWNlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBGb250RmFjZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnN0eWxlKSkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5zdHlsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3RyICs9IHRvQ3NzKHRoaXMuYXQsIHRoaXMuc3R5bGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVbaW5kZXggKyAxXSkgc3RyICs9ICdcXG4nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIHJldHVybiB0b0Nzcyh0aGlzLmF0LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gRm9udEZhY2VSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCQyID0gL0Bmb250LWZhY2UvO1xudmFyIHBsdWdpbkZvbnRGYWNlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXlSZWdFeHAkMi50ZXN0KGtleSkgPyBuZXcgRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFZpZXdwb3J0UnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3ZpZXdwb3J0JztcbiAgICB0aGlzLmF0ID0gJ0B2aWV3cG9ydCc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVmlld3BvcnRSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gVmlld3BvcnRSdWxlO1xufSgpO1xudmFyIHBsdWdpblZpZXdwb3J0UnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgPT09ICdAdmlld3BvcnQnIHx8IGtleSA9PT0gJ0AtbXMtdmlld3BvcnQnID8gbmV3IFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBTaW1wbGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2ltcGxlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3NpbXBsZSc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy52YWx1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbiAgdmFyIF9wcm90byA9IFNpbXBsZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy52YWx1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3RyICs9IHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlW2luZGV4XSArIFwiO1wiO1xuICAgICAgICBpZiAodGhpcy52YWx1ZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlICsgXCI7XCI7XG4gIH07XG5cbiAgcmV0dXJuIFNpbXBsZVJ1bGU7XG59KCk7XG52YXIga2V5c01hcCA9IHtcbiAgJ0BjaGFyc2V0JzogdHJ1ZSxcbiAgJ0BpbXBvcnQnOiB0cnVlLFxuICAnQG5hbWVzcGFjZSc6IHRydWVcbn07XG52YXIgcGx1Z2luU2ltcGxlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgaW4ga2V5c01hcCA/IG5ldyBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIHBsdWdpbnMgPSBbcGx1Z2luU3R5bGVSdWxlLCBwbHVnaW5Db25kaXRpb25hbFJ1bGUsIHBsdWdpbiwgcGx1Z2luS2V5ZnJhbWVSdWxlLCBwbHVnaW5Gb250RmFjZVJ1bGUsIHBsdWdpblZpZXdwb3J0UnVsZSwgcGx1Z2luU2ltcGxlUnVsZV07XG5cbnZhciBkZWZhdWx0VXBkYXRlT3B0aW9ucyA9IHtcbiAgcHJvY2VzczogdHJ1ZVxufTtcbnZhciBmb3JjZVVwZGF0ZU9wdGlvbnMgPSB7XG4gIGZvcmNlOiB0cnVlLFxuICBwcm9jZXNzOiB0cnVlXG4gIC8qKlxuICAgKiBDb250YWlucyBydWxlcyBvYmplY3RzIGFuZCBhbGxvd3MgYWRkaW5nL3JlbW92aW5nIGV0Yy5cbiAgICogSXMgdXNlZCBmb3IgZS5nLiBieSBgU3R5bGVTaGVldGAgb3IgYENvbmRpdGlvbmFsUnVsZWAuXG4gICAqL1xuXG59O1xuXG52YXIgUnVsZUxpc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBSdWxlcyByZWdpc3RyeSBmb3IgYWNjZXNzIGJ5IC5nZXQoKSBtZXRob2QuXG4gIC8vIEl0IGNvbnRhaW5zIHRoZSBzYW1lIHJ1bGUgcmVnaXN0ZXJlZCBieSBuYW1lIGFuZCBieSBzZWxlY3Rvci5cbiAgLy8gT3JpZ2luYWwgc3R5bGVzIG9iamVjdC5cbiAgLy8gVXNlZCB0byBlbnN1cmUgY29ycmVjdCBydWxlcyBvcmRlci5cbiAgZnVuY3Rpb24gUnVsZUxpc3Qob3B0aW9ucykge1xuICAgIHRoaXMubWFwID0ge307XG4gICAgdGhpcy5yYXcgPSB7fTtcbiAgICB0aGlzLmluZGV4ID0gW107XG4gICAgdGhpcy5jb3VudGVyID0gMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5jbGFzc2VzID0gb3B0aW9ucy5jbGFzc2VzO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gb3B0aW9ucy5rZXlmcmFtZXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZS5cbiAgICpcbiAgICogV2lsbCBub3QgcmVuZGVyIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUnVsZUxpc3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQobmFtZSwgZGVjbCwgcnVsZU9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGFyZW50ID0gX3RoaXMkb3B0aW9ucy5wYXJlbnQsXG4gICAgICAgIHNoZWV0ID0gX3RoaXMkb3B0aW9ucy5zaGVldCxcbiAgICAgICAganNzID0gX3RoaXMkb3B0aW9ucy5qc3MsXG4gICAgICAgIFJlbmRlcmVyID0gX3RoaXMkb3B0aW9ucy5SZW5kZXJlcixcbiAgICAgICAgZ2VuZXJhdGVJZCA9IF90aGlzJG9wdGlvbnMuZ2VuZXJhdGVJZCxcbiAgICAgICAgc2NvcGVkID0gX3RoaXMkb3B0aW9ucy5zY29wZWQ7XG5cbiAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHtcbiAgICAgIGNsYXNzZXM6IHRoaXMuY2xhc3NlcyxcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAganNzOiBqc3MsXG4gICAgICBSZW5kZXJlcjogUmVuZGVyZXIsXG4gICAgICBnZW5lcmF0ZUlkOiBnZW5lcmF0ZUlkLFxuICAgICAgc2NvcGVkOiBzY29wZWQsXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAga2V5ZnJhbWVzOiB0aGlzLmtleWZyYW1lcyxcbiAgICAgIHNlbGVjdG9yOiB1bmRlZmluZWRcbiAgICB9LCBydWxlT3B0aW9ucyk7IC8vIFdoZW4gdXNlciB1c2VzIC5jcmVhdGVTdHlsZVNoZWV0KCksIGR1cGxpY2F0ZSBuYW1lcyBhcmUgbm90IHBvc3NpYmxlLCBidXRcbiAgICAvLyBgc2hlZXQuYWRkUnVsZSgpYCBvcGVucyB0aGUgZG9vciBmb3IgYW55IGR1cGxpY2F0ZSBydWxlIG5hbWUuIFdoZW4gdGhpcyBoYXBwZW5zXG4gICAgLy8gd2UgbmVlZCB0byBtYWtlIHRoZSBrZXkgdW5pcXVlIHdpdGhpbiB0aGlzIFJ1bGVMaXN0IGluc3RhbmNlIHNjb3BlLlxuXG5cbiAgICB2YXIga2V5ID0gbmFtZTtcblxuICAgIGlmIChuYW1lIGluIHRoaXMucmF3KSB7XG4gICAgICBrZXkgPSBuYW1lICsgXCItZFwiICsgdGhpcy5jb3VudGVyKys7XG4gICAgfSAvLyBXZSBuZWVkIHRvIHNhdmUgdGhlIG9yaWdpbmFsIGRlY2wgYmVmb3JlIGNyZWF0aW5nIHRoZSBydWxlXG4gICAgLy8gYmVjYXVzZSBjYWNoZSBwbHVnaW4gbmVlZHMgdG8gdXNlIGl0IGFzIGEga2V5IHRvIHJldHVybiBhIGNhY2hlZCBydWxlLlxuXG5cbiAgICB0aGlzLnJhd1trZXldID0gZGVjbDtcblxuICAgIGlmIChrZXkgaW4gdGhpcy5jbGFzc2VzKSB7XG4gICAgICAvLyBFLmcuIHJ1bGVzIGluc2lkZSBvZiBAbWVkaWEgY29udGFpbmVyXG4gICAgICBvcHRpb25zLnNlbGVjdG9yID0gXCIuXCIgKyBlc2NhcGUodGhpcy5jbGFzc2VzW2tleV0pO1xuICAgIH1cblxuICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShrZXksIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5yZWdpc3RlcihydWxlKTtcbiAgICB2YXIgaW5kZXggPSBvcHRpb25zLmluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzLmluZGV4Lmxlbmd0aCA6IG9wdGlvbnMuaW5kZXg7XG4gICAgdGhpcy5pbmRleC5zcGxpY2UoaW5kZXgsIDAsIHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcFtuYW1lXTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHJ1bGUpIHtcbiAgICB0aGlzLnVucmVnaXN0ZXIocnVsZSk7XG4gICAgZGVsZXRlIHRoaXMucmF3W3J1bGUua2V5XTtcbiAgICB0aGlzLmluZGV4LnNwbGljZSh0aGlzLmluZGV4LmluZGV4T2YocnVsZSksIDEpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXguaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogUnVuIGBvblByb2Nlc3NSdWxlKClgIHBsdWdpbnMgb24gZXZlcnkgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucHJvY2VzcyA9IGZ1bmN0aW9uIHByb2Nlc3MoKSB7XG4gICAgdmFyIHBsdWdpbnMgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnM7IC8vIFdlIG5lZWQgdG8gY2xvbmUgYXJyYXkgYmVjYXVzZSBpZiB3ZSBtb2RpZnkgdGhlIGluZGV4IHNvbWV3aGVyZSBlbHNlIGR1cmluZyBhIGxvb3BcbiAgICAvLyB3ZSBlbmQgdXAgd2l0aCB2ZXJ5IGhhcmQtdG8tdHJhY2stZG93biBzaWRlIGVmZmVjdHMuXG5cbiAgICB0aGlzLmluZGV4LnNsaWNlKDApLmZvckVhY2gocGx1Z2lucy5vblByb2Nlc3NSdWxlLCBwbHVnaW5zKTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBydWxlIGluIGAubWFwYCwgYC5jbGFzc2VzYCBhbmQgYC5rZXlmcmFtZXNgIG1hcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIocnVsZSkge1xuICAgIHRoaXMubWFwW3J1bGUua2V5XSA9IHJ1bGU7XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgdGhpcy5tYXBbcnVsZS5zZWxlY3Rvcl0gPSBydWxlO1xuICAgICAgaWYgKHJ1bGUuaWQpIHRoaXMuY2xhc3Nlc1tydWxlLmtleV0gPSBydWxlLmlkO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUgJiYgdGhpcy5rZXlmcmFtZXMpIHtcbiAgICAgIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV0gPSBydWxlLmlkO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVW5yZWdpc3RlciBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyKHJ1bGUpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbcnVsZS5rZXldO1xuXG4gICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBTdHlsZVJ1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXTtcbiAgICAgIGRlbGV0ZSB0aGlzLmNsYXNzZXNbcnVsZS5rZXldO1xuICAgIH0gZWxzZSBpZiAocnVsZSBpbnN0YW5jZW9mIEtleWZyYW1lc1J1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmtleWZyYW1lc1tydWxlLm5hbWVdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRoZSBmdW5jdGlvbiB2YWx1ZXMgd2l0aCBhIG5ldyBkYXRhLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIG5hbWU7XG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIG9wdGlvbnM7XG5cbiAgICBpZiAodHlwZW9mIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVtpbnZhbGlkLXR1cGxlLWluZGV4XVxuXG4gICAgICBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdOyAvLyAkRmxvd0ZpeE1lW2ludmFsaWQtdHVwbGUtaW5kZXhdXG5cbiAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07IC8vICRGbG93Rml4TWVbaW52YWxpZC10dXBsZS1pbmRleF1cblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgICAgIG5hbWUgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB0aGlzLnVwZGF0ZU9uZSh0aGlzLm1hcFtuYW1lXSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmluZGV4Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLnVwZGF0ZU9uZSh0aGlzLmluZGV4W2luZGV4XSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFeGVjdXRlIHBsdWdpbnMsIHVwZGF0ZSBydWxlIHByb3BzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVPbmUgPSBmdW5jdGlvbiB1cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VXBkYXRlT3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkb3B0aW9uczIgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHBsdWdpbnMgPSBfdGhpcyRvcHRpb25zMi5qc3MucGx1Z2lucyxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zMi5zaGVldDsgLy8gSXQgaXMgYSBydWxlcyBjb250YWluZXIgbGlrZSBmb3IgZS5nLiBDb25kaXRpb25hbFJ1bGUuXG5cbiAgICBpZiAocnVsZS5ydWxlcyBpbnN0YW5jZW9mIFJ1bGVMaXN0KSB7XG4gICAgICBydWxlLnJ1bGVzLnVwZGF0ZShkYXRhLCBvcHRpb25zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgc3R5bGUgPSBzdHlsZVJ1bGUuc3R5bGU7XG4gICAgcGx1Z2lucy5vblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucyk7IC8vIFdlIHJlbHkgb24gYSBuZXcgYHN0eWxlYCByZWYgaW4gY2FzZSBpdCB3YXMgbXV0YXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vay5cblxuICAgIGlmIChvcHRpb25zLnByb2Nlc3MgJiYgc3R5bGUgJiYgc3R5bGUgIT09IHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBydW4gdGhlIHBsdWdpbnMgaW4gY2FzZSBuZXcgYHN0eWxlYCByZWxpZXMgb24gc3ludGF4IHBsdWdpbnMuXG4gICAgICBwbHVnaW5zLm9uUHJvY2Vzc1N0eWxlKHN0eWxlUnVsZS5zdHlsZSwgc3R5bGVSdWxlLCBzaGVldCk7IC8vIFVwZGF0ZSBhbmQgYWRkIHByb3BzLlxuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgICB2YXIgbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW3Byb3BdO1xuICAgICAgICB2YXIgcHJldlZhbHVlID0gc3R5bGVbcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAobmV4dFZhbHVlICE9PSBwcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChwcm9wLCBuZXh0VmFsdWUsIGZvcmNlVXBkYXRlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUmVtb3ZlIHByb3BzLlxuXG5cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciBfbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW19wcm9wXTtcbiAgICAgICAgdmFyIF9wcmV2VmFsdWUgPSBzdHlsZVtfcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAoX25leHRWYWx1ZSA9PSBudWxsICYmIF9uZXh0VmFsdWUgIT09IF9wcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChfcHJvcCwgbnVsbCwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydCBydWxlcyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuaW5kZXhbaW5kZXhdO1xuICAgICAgdmFyIGNzcyA9IHJ1bGUudG9TdHJpbmcob3B0aW9ucyk7IC8vIE5vIG5lZWQgdG8gcmVuZGVyIGFuIGVtcHR5IHJ1bGUuXG5cbiAgICAgIGlmICghY3NzICYmICFsaW5rKSBjb250aW51ZTtcbiAgICAgIGlmIChzdHIpIHN0ciArPSAnXFxuJztcbiAgICAgIHN0ciArPSBjc3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICByZXR1cm4gUnVsZUxpc3Q7XG59KCk7XG5cbnZhciBTdHlsZVNoZWV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5kZXBsb3llZCA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJlciA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5xdWV1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgdGhpcy5kZXBsb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuY2xhc3NlcyA9IHt9O1xuICAgIHRoaXMua2V5ZnJhbWVzID0ge307XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNoZWV0OiB0aGlzLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAga2V5ZnJhbWVzOiB0aGlzLmtleWZyYW1lc1xuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMuUmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgb3B0aW9ucy5SZW5kZXJlcih0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KHRoaXMub3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGVzW25hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogQXR0YWNoIHJlbmRlcmFibGUgdG8gdGhlIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIGlmICh0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5hdHRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTsgLy8gT3JkZXIgaXMgaW1wb3J0YW50LCBiZWNhdXNlIHdlIGNhbid0IHVzZSBpbnNlcnRSdWxlIEFQSSBpZiBzdHlsZSBlbGVtZW50IGlzIG5vdCBhdHRhY2hlZC5cblxuICAgIGlmICghdGhpcy5kZXBsb3llZCkgdGhpcy5kZXBsb3koKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHJlbmRlcmFibGUgZnJvbSByZW5kZXIgdHJlZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIGlmICghdGhpcy5hdHRhY2hlZCkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGV0YWNoKCk7XG4gICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBydWxlIHRvIHRoZSBjdXJyZW50IHN0eWxlc2hlZXQuXG4gICAqIFdpbGwgaW5zZXJ0IGEgcnVsZSBhbHNvIGFmdGVyIHRoZSBzdHlsZXNoZWV0IGhhcyBiZWVuIHJlbmRlcmVkIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlOyAvLyBQbHVnaW5zIGNhbiBjcmVhdGUgcnVsZXMuXG4gICAgLy8gSW4gb3JkZXIgdG8gcHJlc2VydmUgdGhlIHJpZ2h0IG9yZGVyLCB3ZSBuZWVkIHRvIHF1ZXVlIGFsbCBgLmFkZFJ1bGVgIGNhbGxzLFxuICAgIC8vIHdoaWNoIGhhcHBlbiBhZnRlciB0aGUgZmlyc3QgYHJ1bGVzLmFkZCgpYCBjYWxsLlxuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgIXF1ZXVlKSB0aGlzLnF1ZXVlID0gW107XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgIGlmICghdGhpcy5kZXBsb3llZCkgcmV0dXJuIHJ1bGU7IC8vIERvbid0IGluc2VydCBydWxlIGRpcmVjdGx5IGlmIHRoZXJlIGlzIG5vIHN0cmluZ2lmaWVkIHZlcnNpb24geWV0LlxuICAgICAgLy8gSXQgd2lsbCBiZSBpbnNlcnRlZCBhbGwgdG9nZXRoZXIgd2hlbiAuYXR0YWNoIGlzIGNhbGxlZC5cblxuICAgICAgaWYgKHF1ZXVlKSBxdWV1ZS5wdXNoKHJ1bGUpO2Vsc2Uge1xuICAgICAgICB0aGlzLmluc2VydFJ1bGUocnVsZSk7XG5cbiAgICAgICAgaWYgKHRoaXMucXVldWUpIHtcbiAgICAgICAgICB0aGlzLnF1ZXVlLmZvckVhY2godGhpcy5pbnNlcnRSdWxlLCB0aGlzKTtcbiAgICAgICAgICB0aGlzLnF1ZXVlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9IC8vIFdlIGNhbid0IGFkZCBydWxlcyB0byBhIGRldGFjaGVkIHN0eWxlIG5vZGUuXG4gICAgLy8gV2Ugd2lsbCByZWRlcGxveSB0aGUgc2hlZXQgb25jZSB1c2VyIHdpbGwgYXR0YWNoIGl0LlxuXG5cbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBydWxlIGludG8gdGhlIFN0eWxlU2hlZXRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmluc2VydFJ1bGUocnVsZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIGFkZCBydWxlcy5cbiAgICogV2lsbCByZW5kZXIgYWxzbyBhZnRlciBTdHlsZSBTaGVldCB3YXMgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGVzID0gZnVuY3Rpb24gYWRkUnVsZXMoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdmFyIGFkZGVkID0gW107XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmFkZFJ1bGUobmFtZSwgc3R5bGVzW25hbWVdLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSBhZGRlZC5wdXNoKHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRlZDtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZSBieSBuYW1lLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlIGJ5IG5hbWUuXG4gICAqIFJldHVybnMgYHRydWVgOiBpZiBydWxlIGhhcyBiZWVuIGRlbGV0ZWQgZnJvbSB0aGUgRE9NLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShuYW1lKSB7XG4gICAgdmFyIHJ1bGUgPSB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcgPyBuYW1lIDogdGhpcy5ydWxlcy5nZXQobmFtZSk7XG5cbiAgICBpZiAoIXJ1bGUgfHwgLy8gU3R5bGUgc2hlZXQgd2FzIGNyZWF0ZWQgd2l0aG91dCBsaW5rOiB0cnVlIGFuZCBhdHRhY2hlZCwgaW4gdGhpcyBjYXNlIHdlXG4gICAgLy8gd29uJ3QgYmUgYWJsZSB0byByZW1vdmUgdGhlIENTUyBydWxlIGZyb20gdGhlIERPTS5cbiAgICB0aGlzLmF0dGFjaGVkICYmICFydWxlLnJlbmRlcmFibGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnJlbW92ZShydWxlKTtcblxuICAgIGlmICh0aGlzLmF0dGFjaGVkICYmIHJ1bGUucmVuZGVyYWJsZSAmJiB0aGlzLnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5kZWxldGVSdWxlKHJ1bGUucmVuZGVyYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBEZXBsb3kgcHVyZSBDU1Mgc3RyaW5nIHRvIGEgcmVuZGVyYWJsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmRlcGxveSgpO1xuICAgIHRoaXMuZGVwbG95ZWQgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMkcnVsZXM7XG5cbiAgICAoX3RoaXMkcnVsZXMgPSB0aGlzLnJ1bGVzKS51cGRhdGUuYXBwbHkoX3RoaXMkcnVsZXMsIGFyZ3VtZW50cyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyBhIHNpbmdsZSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVPbmUgPSBmdW5jdGlvbiB1cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIHRoaXMucnVsZXMudXBkYXRlT25lKHJ1bGUsIGRhdGEsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbnZhciBQbHVnaW5zUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbHVnaW5zUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5wbHVnaW5zID0ge1xuICAgICAgaW50ZXJuYWw6IFtdLFxuICAgICAgZXh0ZXJuYWw6IFtdXG4gICAgfTtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gdm9pZCAwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBsdWdpbnNSZWdpc3RyeS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIENhbGwgYG9uQ3JlYXRlUnVsZWAgaG9va3MgYW5kIHJldHVybiBhbiBvYmplY3QgaWYgcmV0dXJuZWQgYnkgYSBob29rLlxuICAgKi9cbiAgX3Byb3RvLm9uQ3JlYXRlUnVsZSA9IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ3JlYXRlUnVsZVtpXShuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzUnVsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1J1bGUgPSBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS5pc1Byb2Nlc3NlZCkgcmV0dXJuO1xuICAgIHZhciBzaGVldCA9IHJ1bGUub3B0aW9ucy5zaGVldDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGVbaV0ocnVsZSwgc2hlZXQpO1xuICAgIH1cblxuICAgIGlmIChydWxlLnN0eWxlKSB0aGlzLm9uUHJvY2Vzc1N0eWxlKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICBydWxlLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25Qcm9jZXNzU3R5bGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblByb2Nlc3NTdHlsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTdHlsZS5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBydWxlLnN0eWxlID0gdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTdHlsZVtpXShydWxlLnN0eWxlLCBydWxlLCBzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NTaGVldGAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1NoZWV0ID0gZnVuY3Rpb24gb25Qcm9jZXNzU2hlZXQoc2hlZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU2hlZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU2hlZXRbaV0oc2hlZXQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25VcGRhdGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblVwZGF0ZSA9IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uVXBkYXRlW2ldKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uQ2hhbmdlVmFsdWVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vbkNoYW5nZVZhbHVlID0gZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIHZhciBwcm9jZXNzZWRWYWx1ZSA9IHZhbHVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHByb2Nlc3NlZFZhbHVlID0gdGhpcy5yZWdpc3RyeS5vbkNoYW5nZVZhbHVlW2ldKHByb2Nlc3NlZFZhbHVlLCBwcm9wLCBydWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkVmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgcGx1Z2luLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UobmV3UGx1Z2luLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgcXVldWU6ICdleHRlcm5hbCdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHBsdWdpbnMgPSB0aGlzLnBsdWdpbnNbb3B0aW9ucy5xdWV1ZV07IC8vIEF2b2lkcyBhcHBseWluZyBzYW1lIHBsdWdpbiB0d2ljZSwgYXQgbGVhc3QgYmFzZWQgb24gcmVmLlxuXG4gICAgaWYgKHBsdWdpbnMuaW5kZXhPZihuZXdQbHVnaW4pICE9PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBsdWdpbnMucHVzaChuZXdQbHVnaW4pO1xuICAgIHRoaXMucmVnaXN0cnkgPSBbXS5jb25jYXQodGhpcy5wbHVnaW5zLmV4dGVybmFsLCB0aGlzLnBsdWdpbnMuaW50ZXJuYWwpLnJlZHVjZShmdW5jdGlvbiAocmVnaXN0cnksIHBsdWdpbikge1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBwbHVnaW4pIHtcbiAgICAgICAgaWYgKG5hbWUgaW4gcmVnaXN0cnkpIHtcbiAgICAgICAgICByZWdpc3RyeVtuYW1lXS5wdXNoKHBsdWdpbltuYW1lXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIGhvb2sgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlZ2lzdHJ5O1xuICAgIH0sIHtcbiAgICAgIG9uQ3JlYXRlUnVsZTogW10sXG4gICAgICBvblByb2Nlc3NSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1N0eWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1NoZWV0OiBbXSxcbiAgICAgIG9uQ2hhbmdlVmFsdWU6IFtdLFxuICAgICAgb25VcGRhdGU6IFtdXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFBsdWdpbnNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBTaGVldHMgcmVnaXN0cnkgdG8gYWNjZXNzIHRoZW0gYWxsIGF0IG9uZSBwbGFjZS5cbiAqL1xudmFyIFNoZWV0c1JlZ2lzdHJ5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c1JlZ2lzdHJ5LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoc2hlZXQpIHtcbiAgICB2YXIgcmVnaXN0cnkgPSB0aGlzLnJlZ2lzdHJ5O1xuICAgIHZhciBpbmRleCA9IHNoZWV0Lm9wdGlvbnMuaW5kZXg7XG4gICAgaWYgKHJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpICE9PSAtMSkgcmV0dXJuO1xuXG4gICAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA9PT0gMCB8fCBpbmRleCA+PSB0aGlzLmluZGV4KSB7XG4gICAgICByZWdpc3RyeS5wdXNoKHNoZWV0KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZpbmQgYSBwb3NpdGlvbi5cblxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlZ2lzdHJ5W2ldLm9wdGlvbnMuaW5kZXggPiBpbmRleCkge1xuICAgICAgICByZWdpc3RyeS5zcGxpY2UoaSwgMCwgc2hlZXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXNldCB0aGUgcmVnaXN0cnkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHNoZWV0KSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5yZWdpc3RyeS5pbmRleE9mKHNoZWV0KTtcbiAgICB0aGlzLnJlZ2lzdHJ5LnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgYWxsIGF0dGFjaGVkIHNoZWV0cyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoX3RlbXApIHtcbiAgICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgICBhdHRhY2hlZCA9IF9yZWYuYXR0YWNoZWQsXG4gICAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhdHRhY2hlZFwiXSk7XG5cbiAgICB2YXIgY3NzID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzaGVldCA9IHRoaXMucmVnaXN0cnlbaV07XG5cbiAgICAgIGlmIChhdHRhY2hlZCAhPSBudWxsICYmIHNoZWV0LmF0dGFjaGVkICE9PSBhdHRhY2hlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNzcykgY3NzICs9ICdcXG4nO1xuICAgICAgY3NzICs9IHNoZWV0LnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBjc3M7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c1JlZ2lzdHJ5LCBbe1xuICAgIGtleTogXCJpbmRleFwiLFxuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBoaWdoZXN0IGluZGV4IG51bWJlci5cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5Lmxlbmd0aCA9PT0gMCA/IDAgOiB0aGlzLnJlZ2lzdHJ5W3RoaXMucmVnaXN0cnkubGVuZ3RoIC0gMV0ub3B0aW9ucy5pbmRleDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzUmVnaXN0cnk7XG59KCk7XG5cbi8qKlxuICogVGhpcyBpcyBhIGdsb2JhbCBzaGVldHMgcmVnaXN0cnkuIE9ubHkgRG9tUmVuZGVyZXIgd2lsbCBhZGQgc2hlZXRzIHRvIGl0LlxuICogT24gdGhlIHNlcnZlciBvbmUgc2hvdWxkIHVzZSBhbiBvd24gU2hlZXRzUmVnaXN0cnkgaW5zdGFuY2UgYW5kIGFkZCB0aGVcbiAqIHNoZWV0cyB0byBpdCwgYmVjYXVzZSB5b3UgbmVlZCB0byBtYWtlIHN1cmUgdG8gY3JlYXRlIGEgbmV3IHJlZ2lzdHJ5IGZvclxuICogZWFjaCByZXF1ZXN0IGluIG9yZGVyIHRvIG5vdCBsZWFrIHNoZWV0cyBhY3Jvc3MgcmVxdWVzdHMuXG4gKi9cblxudmFyIHJlZ2lzdHJ5ID0gbmV3IFNoZWV0c1JlZ2lzdHJ5KCk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbFRoaXMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGggPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG52YXIgbnMgPSAnMmYxYWNjNmMzYTYwNmIwODJlNWVlZjVlNTQ0MTRmZmInO1xuaWYgKGdsb2JhbFRoaXNbbnNdID09IG51bGwpIGdsb2JhbFRoaXNbbnNdID0gMDsgLy8gQnVuZGxlIG1heSBjb250YWluIG11bHRpcGxlIEpTUyB2ZXJzaW9ucyBhdCB0aGUgc2FtZSB0aW1lLiBJbiBvcmRlciB0byBpZGVudGlmeVxuLy8gdGhlIGN1cnJlbnQgdmVyc2lvbiB3aXRoIGp1c3Qgb25lIHNob3J0IG51bWJlciBhbmQgdXNlIGl0IGZvciBjbGFzc2VzIGdlbmVyYXRpb25cbi8vIHdlIHVzZSBhIGNvdW50ZXIuIEFsc28gaXQgaXMgbW9yZSBhY2N1cmF0ZSwgYmVjYXVzZSB1c2VyIGNhbiBtYW51YWxseSByZWV2YWx1YXRlXG4vLyB0aGUgbW9kdWxlLlxuXG52YXIgbW9kdWxlSWQgPSBnbG9iYWxUaGlzW25zXSsrO1xuXG52YXIgbWF4UnVsZXMgPSAxZTEwO1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuICogV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldGVkLlxuICogV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbiAqL1xudmFyIGNyZWF0ZUdlbmVyYXRlSWQgPSBmdW5jdGlvbiBjcmVhdGVHZW5lcmF0ZUlkKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBydWxlQ291bnRlciA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAocnVsZSwgc2hlZXQpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHJ1bGVDb3VudGVyID4gbWF4UnVsZXMpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4gUnVsZSBjb3VudGVyIGlzIGF0IFwiICsgcnVsZUNvdW50ZXIgKyBcIi5cIikgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIGpzc0lkID0gJyc7XG4gICAgdmFyIHByZWZpeCA9ICcnO1xuXG4gICAgaWYgKHNoZWV0KSB7XG4gICAgICBpZiAoc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgICAgcHJlZml4ID0gc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXg7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmpzcy5pZCAhPSBudWxsKSB7XG4gICAgICAgIGpzc0lkID0gU3RyaW5nKHNoZWV0Lm9wdGlvbnMuanNzLmlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5taW5pZnkpIHtcbiAgICAgIC8vIFVzaW5nIFwiY1wiIGJlY2F1c2UgYSBudW1iZXIgY2FuJ3QgYmUgdGhlIGZpcnN0IGNoYXIgaW4gYSBjbGFzcyBuYW1lLlxuICAgICAgcmV0dXJuIFwiXCIgKyAocHJlZml4IHx8ICdjJykgKyBtb2R1bGVJZCArIGpzc0lkICsgcnVsZUNvdW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeCArIHJ1bGUua2V5ICsgXCItXCIgKyBtb2R1bGVJZCArIChqc3NJZCA/IFwiLVwiICsganNzSWQgOiAnJykgKyBcIi1cIiArIHJ1bGVDb3VudGVyO1xuICB9O1xufTtcblxuLyoqXG4gKiBDYWNoZSB0aGUgdmFsdWUgZnJvbSB0aGUgZmlyc3QgdGltZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAqL1xudmFyIG1lbW9pemUgPSBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciB2YWx1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXZhbHVlKSB2YWx1ZSA9IGZuKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBHZXQgYSBzdHlsZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xudmFyIGdldFByb3BlcnR5VmFsdWUgPSBmdW5jdGlvbiBnZXRQcm9wZXJ0eVZhbHVlKGNzc1J1bGUsIHByb3ApIHtcbiAgdHJ5IHtcbiAgICAvLyBTdXBwb3J0IENTU1RPTS5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgcmV0dXJuIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZ2V0KHByb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBjc3NSdWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiAnJztcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xudmFyIHNldFByb3BlcnR5ID0gZnVuY3Rpb24gc2V0UHJvcGVydHkoY3NzUnVsZSwgcHJvcCwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgY3NzVmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY3NzVmFsdWUgPSB0b0Nzc1ZhbHVlKHZhbHVlLCB0cnVlKTtcblxuICAgICAgaWYgKHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICAgICAgY3NzUnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wLCBjc3NWYWx1ZSwgJ2ltcG9ydGFudCcpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IC8vIFN1cHBvcnQgQ1NTVE9NLlxuXG5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5zZXQocHJvcCwgY3NzVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xudmFyIHJlbW92ZVByb3BlcnR5ID0gZnVuY3Rpb24gcmVtb3ZlUHJvcGVydHkoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIC8vIFN1cHBvcnQgQ1NTVE9NLlxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLmRlbGV0ZShwcm9wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzUnVsZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gRE9NRXhjZXB0aW9uIFxcXCJcIiArIGVyci5tZXNzYWdlICsgXCJcXFwiIHdhcyB0aHJvd24uIFRyaWVkIHRvIHJlbW92ZSBwcm9wZXJ0eSBcXFwiXCIgKyBwcm9wICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgdGhlIHNlbGVjdG9yLlxuICovXG52YXIgc2V0U2VsZWN0b3IgPSBmdW5jdGlvbiBzZXRTZWxlY3Rvcihjc3NSdWxlLCBzZWxlY3RvclRleHQpIHtcbiAgY3NzUnVsZS5zZWxlY3RvclRleHQgPSBzZWxlY3RvclRleHQ7IC8vIFJldHVybiBmYWxzZSBpZiBzZXR0ZXIgd2FzIG5vdCBzdWNjZXNzZnVsLlxuICAvLyBDdXJyZW50bHkgd29ya3MgaW4gY2hyb21lIG9ubHkuXG5cbiAgcmV0dXJuIGNzc1J1bGUuc2VsZWN0b3JUZXh0ID09PSBzZWxlY3RvclRleHQ7XG59O1xuLyoqXG4gKiBHZXRzIHRoZSBgaGVhZGAgZWxlbWVudCB1cG9uIHRoZSBmaXJzdCBjYWxsIGFuZCBjYWNoZXMgaXQuXG4gKiBXZSBhc3N1bWUgaXQgY2FuJ3QgYmUgbnVsbC5cbiAqL1xuXG5cbnZhciBnZXRIZWFkID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyk7XG59KTtcbi8qKlxuICogRmluZCBhdHRhY2hlZCBzaGVldCB3aXRoIGFuIGluZGV4IGhpZ2hlciB0aGFuIHRoZSBwYXNzZWQgb25lLlxuICovXG5cbmZ1bmN0aW9uIGZpbmRIaWdoZXJTaGVldChyZWdpc3RyeSwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG5cbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbmRleCA+IG9wdGlvbnMuaW5kZXggJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggdGhlIGhpZ2hlc3QgaW5kZXguXG4gKi9cblxuXG5mdW5jdGlvbiBmaW5kSGlnaGVzdFNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSByZWdpc3RyeS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBzaGVldCA9IHJlZ2lzdHJ5W2ldO1xuXG4gICAgaWYgKHNoZWV0LmF0dGFjaGVkICYmIHNoZWV0Lm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPT09IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogRmluZCBhIGNvbW1lbnQgd2l0aCBcImpzc1wiIGluc2lkZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRDb21tZW50Tm9kZSh0ZXh0KSB7XG4gIHZhciBoZWFkID0gZ2V0SGVhZCgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5vZGUgPSBoZWFkLmNoaWxkTm9kZXNbaV07XG5cbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBub2RlLm5vZGVWYWx1ZS50cmltKCkgPT09IHRleHQpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEZpbmQgYSBub2RlIGJlZm9yZSB3aGljaCB3ZSBjYW4gaW5zZXJ0IHRoZSBzaGVldC5cbiAqL1xuZnVuY3Rpb24gZmluZFByZXZOb2RlKG9wdGlvbnMpIHtcbiAgdmFyIHJlZ2lzdHJ5JDEgPSByZWdpc3RyeS5yZWdpc3RyeTtcblxuICBpZiAocmVnaXN0cnkkMS5sZW5ndGggPiAwKSB7XG4gICAgLy8gVHJ5IHRvIGluc2VydCBiZWZvcmUgdGhlIG5leHQgaGlnaGVyIHNoZWV0LlxuICAgIHZhciBzaGVldCA9IGZpbmRIaWdoZXJTaGVldChyZWdpc3RyeSQxLCBvcHRpb25zKTtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBzaGVldC5yZW5kZXJlci5lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnRcbiAgICAgIH07XG4gICAgfSAvLyBPdGhlcndpc2UgaW5zZXJ0IGFmdGVyIHRoZSBsYXN0IGF0dGFjaGVkLlxuXG5cbiAgICBzaGVldCA9IGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnkkMSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogc2hlZXQucmVuZGVyZXIuZWxlbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBzaGVldC5yZW5kZXJlci5lbGVtZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH1cbiAgfSAvLyBUcnkgdG8gZmluZCBhIGNvbW1lbnQgcGxhY2Vob2xkZXIgaWYgcmVnaXN0cnkgaXMgZW1wdHkuXG5cblxuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGNvbW1lbnQgPSBmaW5kQ29tbWVudE5vZGUoaW5zZXJ0aW9uUG9pbnQpO1xuXG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcmVudDogY29tbWVudC5wYXJlbnROb2RlLFxuICAgICAgICBub2RlOiBjb21tZW50Lm5leHRTaWJsaW5nXG4gICAgICB9O1xuICAgIH0gLy8gSWYgdXNlciBzcGVjaWZpZXMgYW4gaW5zZXJ0aW9uIHBvaW50IGFuZCBpdCBjYW4ndCBiZSBmb3VuZCBpbiB0aGUgZG9jdW1lbnQgLVxuICAgIC8vIGJhZCBzcGVjaWZpY2l0eSBpc3N1ZXMgbWF5IGFwcGVhci5cblxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBJbnNlcnRpb24gcG9pbnQgXFxcIlwiICsgaW5zZXJ0aW9uUG9pbnQgKyBcIlxcXCIgbm90IGZvdW5kLlwiKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogSW5zZXJ0IHN0eWxlIGVsZW1lbnQgaW50byB0aGUgRE9NLlxuICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGUoc3R5bGUsIG9wdGlvbnMpIHtcbiAgdmFyIGluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcbiAgdmFyIG5leHROb2RlID0gZmluZFByZXZOb2RlKG9wdGlvbnMpO1xuXG4gIGlmIChuZXh0Tm9kZSAhPT0gZmFsc2UgJiYgbmV4dE5vZGUucGFyZW50KSB7XG4gICAgbmV4dE5vZGUucGFyZW50Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dE5vZGUubm9kZSk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFdvcmtzIHdpdGggaWZyYW1lcyBhbmQgYW55IG5vZGUgdHlwZXMuXG5cblxuICBpZiAoaW5zZXJ0aW9uUG9pbnQgJiYgdHlwZW9mIGluc2VydGlvblBvaW50Lm5vZGVUeXBlID09PSAnbnVtYmVyJykge1xuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQxMzI4NzI4L2ZvcmNlLWNhc3RpbmctaW4tZmxvd1xuICAgIHZhciBpbnNlcnRpb25Qb2ludEVsZW1lbnQgPSBpbnNlcnRpb25Qb2ludDtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IGluc2VydGlvblBvaW50RWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgaW5zZXJ0aW9uUG9pbnRFbGVtZW50Lm5leHRTaWJsaW5nKTtlbHNlIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBJbnNlcnRpb24gcG9pbnQgaXMgbm90IGluIHRoZSBET00uJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZ2V0SGVhZCgpLmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbi8qKlxuICogUmVhZCBqc3Mgbm9uY2Ugc2V0dGluZyBmcm9tIHRoZSBwYWdlIGlmIHRoZSB1c2VyIGhhcyBzZXQgaXQuXG4gKi9cblxuXG52YXIgZ2V0Tm9uY2UgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW3Byb3BlcnR5PVwiY3NwLW5vbmNlXCJdJyk7XG4gIHJldHVybiBub2RlID8gbm9kZS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKSA6IG51bGw7XG59KTtcblxudmFyIF9pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShjb250YWluZXIsIHJ1bGUsIGluZGV4KSB7XG4gIHRyeSB7XG4gICAgaWYgKCdpbnNlcnRSdWxlJyBpbiBjb250YWluZXIpIHtcbiAgICAgIHZhciBjID0gY29udGFpbmVyO1xuICAgICAgYy5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KTtcbiAgICB9IC8vIEtleWZyYW1lcyBydWxlLlxuICAgIGVsc2UgaWYgKCdhcHBlbmRSdWxlJyBpbiBjb250YWluZXIpIHtcbiAgICAgICAgdmFyIF9jID0gY29udGFpbmVyO1xuXG4gICAgICAgIF9jLmFwcGVuZFJ1bGUocnVsZSk7XG4gICAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gXCIgKyBlcnIubWVzc2FnZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRhaW5lci5jc3NSdWxlc1tpbmRleF07XG59O1xuXG52YXIgZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXggPSBmdW5jdGlvbiBnZXRWYWxpZFJ1bGVJbnNlcnRpb25JbmRleChjb250YWluZXIsIGluZGV4KSB7XG4gIHZhciBtYXhJbmRleCA9IGNvbnRhaW5lci5jc3NSdWxlcy5sZW5ndGg7IC8vIEluIGNhc2UgcHJldmlvdXMgaW5zZXJ0aW9uIGZhaWxzLCBwYXNzZWQgaW5kZXggbWlnaHQgYmUgd3JvbmdcblxuICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCB8fCBpbmRleCA+IG1heEluZGV4KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgcmV0dXJuIG1heEluZGV4O1xuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufTtcblxudmFyIGNyZWF0ZVN0eWxlID0gZnVuY3Rpb24gY3JlYXRlU3R5bGUoKSB7XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7IC8vIFdpdGhvdXQgaXQsIElFIHdpbGwgaGF2ZSBhIGJyb2tlbiBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgaWYgd2VcbiAgLy8gaW5zZXJ0IHJ1bGVzIGFmdGVyIHdlIGluc2VydCB0aGUgc3R5bGUgdGFnLlxuICAvLyBJdCBzZWVtcyB0byBraWNrLW9mZiB0aGUgc291cmNlIG9yZGVyIHNwZWNpZmljaXR5IGFsZ29yaXRobS5cblxuICBlbC50ZXh0Q29udGVudCA9ICdcXG4nO1xuICByZXR1cm4gZWw7XG59O1xuXG52YXIgRG9tUmVuZGVyZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBIVE1MU3R5bGVFbGVtZW50IG5lZWRzIGZpeGluZyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjY5NlxuICAvLyBXaWxsIGJlIGVtcHR5IGlmIGxpbms6IHRydWUgb3B0aW9uIGlzIG5vdCBzZXQsIGJlY2F1c2VcbiAgLy8gaXQgaXMgb25seSBmb3IgdXNlIHRvZ2V0aGVyIHdpdGggaW5zZXJ0UnVsZSBBUEkuXG4gIGZ1bmN0aW9uIERvbVJlbmRlcmVyKHNoZWV0KSB7XG4gICAgdGhpcy5nZXRQcm9wZXJ0eVZhbHVlID0gZ2V0UHJvcGVydHlWYWx1ZTtcbiAgICB0aGlzLnNldFByb3BlcnR5ID0gc2V0UHJvcGVydHk7XG4gICAgdGhpcy5yZW1vdmVQcm9wZXJ0eSA9IHJlbW92ZVByb3BlcnR5O1xuICAgIHRoaXMuc2V0U2VsZWN0b3IgPSBzZXRTZWxlY3RvcjtcbiAgICB0aGlzLmVsZW1lbnQgPSB2b2lkIDA7XG4gICAgdGhpcy5zaGVldCA9IHZvaWQgMDtcbiAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICB0aGlzLmNzc1J1bGVzID0gW107XG4gICAgLy8gVGhlcmUgaXMgbm8gc2hlZXQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgdXNlZCBmcm9tIGEgc3RhbmRhbG9uZSBTdHlsZVJ1bGUuXG4gICAgaWYgKHNoZWV0KSByZWdpc3RyeS5hZGQoc2hlZXQpO1xuICAgIHRoaXMuc2hlZXQgPSBzaGVldDtcblxuICAgIHZhciBfcmVmID0gdGhpcy5zaGVldCA/IHRoaXMuc2hlZXQub3B0aW9ucyA6IHt9LFxuICAgICAgICBtZWRpYSA9IF9yZWYubWVkaWEsXG4gICAgICAgIG1ldGEgPSBfcmVmLm1ldGEsXG4gICAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQ7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50IHx8IGNyZWF0ZVN0eWxlKCk7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1qc3MnLCAnJyk7XG4gICAgaWYgKG1lZGlhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgICBpZiAobWV0YSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1tZXRhJywgbWV0YSk7XG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICBpZiAobm9uY2UpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgbm9uY2UpO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBEb21SZW5kZXJlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmF0dGFjaCA9IGZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICAvLyBJbiB0aGUgY2FzZSB0aGUgZWxlbWVudCBub2RlIGlzIGV4dGVybmFsIGFuZCBpdCBpcyBhbHJlYWR5IGluIHRoZSBET00uXG4gICAgaWYgKHRoaXMuZWxlbWVudC5wYXJlbnROb2RlIHx8ICF0aGlzLnNoZWV0KSByZXR1cm47XG4gICAgaW5zZXJ0U3R5bGUodGhpcy5lbGVtZW50LCB0aGlzLnNoZWV0Lm9wdGlvbnMpOyAvLyBXaGVuIHJ1bGVzIGFyZSBpbnNlcnRlZCB1c2luZyBgaW5zZXJ0UnVsZWAgQVBJLCBhZnRlciBgc2hlZXQuZGV0YWNoKCkuYXR0YWNoKClgXG4gICAgLy8gbW9zdCBicm93c2VycyBjcmVhdGUgYSBuZXcgQ1NTU3R5bGVTaGVldCwgZXhjZXB0IG9mIGFsbCBJRXMuXG5cbiAgICB2YXIgZGVwbG95ZWQgPSBCb29sZWFuKHRoaXMuc2hlZXQgJiYgdGhpcy5zaGVldC5kZXBsb3llZCk7XG5cbiAgICBpZiAodGhpcy5oYXNJbnNlcnRlZFJ1bGVzICYmIGRlcGxveWVkKSB7XG4gICAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVwbG95KCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgc3R5bGUgZWxlbWVudCBmcm9tIHJlbmRlciB0cmVlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgaWYgKCF0aGlzLnNoZWV0KSByZXR1cm47XG4gICAgdmFyIHBhcmVudE5vZGUgPSB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpOyAvLyBJbiB0aGUgbW9zdCBicm93c2VycywgcnVsZXMgaW5zZXJ0ZWQgdXNpbmcgaW5zZXJ0UnVsZSgpIEFQSSB3aWxsIGJlIGxvc3Qgd2hlbiBzdHlsZSBlbGVtZW50IGlzIHJlbW92ZWQuXG4gICAgLy8gVGhvdWdoIElFIHdpbGwga2VlcCB0aGVtIGFuZCB3ZSBuZWVkIGEgY29uc2lzdGVudCBiZWhhdmlvci5cblxuICAgIGlmICh0aGlzLnNoZWV0Lm9wdGlvbnMubGluaykge1xuICAgICAgdGhpcy5jc3NSdWxlcyA9IFtdO1xuICAgICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gJ1xcbic7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJbmplY3QgQ1NTIHN0cmluZyBpbnRvIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlcGxveSA9IGZ1bmN0aW9uIGRlcGxveSgpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLnNoZWV0O1xuICAgIGlmICghc2hlZXQpIHJldHVybjtcblxuICAgIGlmIChzaGVldC5vcHRpb25zLmxpbmspIHtcbiAgICAgIHRoaXMuaW5zZXJ0UnVsZXMoc2hlZXQucnVsZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudC50ZXh0Q29udGVudCA9IFwiXFxuXCIgKyBzaGVldC50b1N0cmluZygpICsgXCJcXG5cIjtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IFJ1bGVMaXN0IGludG8gYW4gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhydWxlcywgbmF0aXZlUGFyZW50KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5pbmRleC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlKHJ1bGVzLmluZGV4W2ldLCBpLCBuYXRpdmVQYXJlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IGEgcnVsZSBpbnRvIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKHJ1bGUsIGluZGV4LCBuYXRpdmVQYXJlbnQpIHtcbiAgICBpZiAobmF0aXZlUGFyZW50ID09PSB2b2lkIDApIHtcbiAgICAgIG5hdGl2ZVBhcmVudCA9IHRoaXMuZWxlbWVudC5zaGVldDtcbiAgICB9XG5cbiAgICBpZiAocnVsZS5ydWxlcykge1xuICAgICAgdmFyIHBhcmVudCA9IHJ1bGU7XG4gICAgICB2YXIgbGF0ZXN0TmF0aXZlUGFyZW50ID0gbmF0aXZlUGFyZW50O1xuXG4gICAgICBpZiAocnVsZS50eXBlID09PSAnY29uZGl0aW9uYWwnIHx8IHJ1bGUudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgICAgdmFyIF9pbnNlcnRpb25JbmRleCA9IGdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4KG5hdGl2ZVBhcmVudCwgaW5kZXgpOyAvLyBXZSBuZWVkIHRvIHJlbmRlciB0aGUgY29udGFpbmVyIHdpdGhvdXQgY2hpbGRyZW4gZmlyc3QuXG5cblxuICAgICAgICBsYXRlc3ROYXRpdmVQYXJlbnQgPSBfaW5zZXJ0UnVsZShuYXRpdmVQYXJlbnQsIHBhcmVudC50b1N0cmluZyh7XG4gICAgICAgICAgY2hpbGRyZW46IGZhbHNlXG4gICAgICAgIH0pLCBfaW5zZXJ0aW9uSW5kZXgpO1xuXG4gICAgICAgIGlmIChsYXRlc3ROYXRpdmVQYXJlbnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZWZDc3NSdWxlKHJ1bGUsIF9pbnNlcnRpb25JbmRleCwgbGF0ZXN0TmF0aXZlUGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhwYXJlbnQucnVsZXMsIGxhdGVzdE5hdGl2ZVBhcmVudCk7XG4gICAgICByZXR1cm4gbGF0ZXN0TmF0aXZlUGFyZW50O1xuICAgIH1cblxuICAgIHZhciBydWxlU3RyID0gcnVsZS50b1N0cmluZygpO1xuICAgIGlmICghcnVsZVN0cikgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBpbnNlcnRpb25JbmRleCA9IGdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4KG5hdGl2ZVBhcmVudCwgaW5kZXgpO1xuXG4gICAgdmFyIG5hdGl2ZVJ1bGUgPSBfaW5zZXJ0UnVsZShuYXRpdmVQYXJlbnQsIHJ1bGVTdHIsIGluc2VydGlvbkluZGV4KTtcblxuICAgIGlmIChuYXRpdmVSdWxlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IHRydWU7XG4gICAgdGhpcy5yZWZDc3NSdWxlKHJ1bGUsIGluc2VydGlvbkluZGV4LCBuYXRpdmVSdWxlKTtcbiAgICByZXR1cm4gbmF0aXZlUnVsZTtcbiAgfTtcblxuICBfcHJvdG8ucmVmQ3NzUnVsZSA9IGZ1bmN0aW9uIHJlZkNzc1J1bGUocnVsZSwgaW5kZXgsIGNzc1J1bGUpIHtcbiAgICBydWxlLnJlbmRlcmFibGUgPSBjc3NSdWxlOyAvLyBXZSBvbmx5IHdhbnQgdG8gcmVmZXJlbmNlIHRoZSB0b3AgbGV2ZWwgcnVsZXMsIGRlbGV0ZVJ1bGUgQVBJIGRvZXNuJ3Qgc3VwcG9ydCByZW1vdmluZyBuZXN0ZWQgcnVsZXNcbiAgICAvLyBsaWtlIHJ1bGVzIGluc2lkZSBtZWRpYSBxdWVyaWVzIG9yIGtleWZyYW1lc1xuXG4gICAgaWYgKHJ1bGUub3B0aW9ucy5wYXJlbnQgaW5zdGFuY2VvZiBTdHlsZVNoZWV0KSB7XG4gICAgICB0aGlzLmNzc1J1bGVzW2luZGV4XSA9IGNzc1J1bGU7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShjc3NSdWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgdGhpcy5jc3NSdWxlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBDU1MgUnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YoY3NzUnVsZSkge1xuICAgIHJldHVybiB0aGlzLmNzc1J1bGVzLmluZGV4T2YoY3NzUnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgbmV3IENTUyBydWxlIGFuZCByZXBsYWNlIHRoZSBleGlzdGluZyBvbmUuXG4gICAqXG4gICAqIE9ubHkgdXNlZCBmb3Igc29tZSBvbGQgYnJvd3NlcnMgYmVjYXVzZSB0aGV5IGNhbid0IHNldCBhIHNlbGVjdG9yLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXBsYWNlUnVsZSA9IGZ1bmN0aW9uIHJlcGxhY2VSdWxlKGNzc1J1bGUsIHJ1bGUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoY3NzUnVsZSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgIHRoaXMuZWxlbWVudC5zaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICB0aGlzLmNzc1J1bGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0UnVsZShydWxlLCBpbmRleCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbGwgcnVsZXMgZWxlbWVudHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGVzID0gZnVuY3Rpb24gZ2V0UnVsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zaGVldC5jc3NSdWxlcztcbiAgfTtcblxuICByZXR1cm4gRG9tUmVuZGVyZXI7XG59KCk7XG5cbnZhciBpbnN0YW5jZUNvdW50ZXIgPSAwO1xuXG52YXIgSnNzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSnNzKG9wdGlvbnMpIHtcbiAgICB0aGlzLmlkID0gaW5zdGFuY2VDb3VudGVyKys7XG4gICAgdGhpcy52ZXJzaW9uID0gXCIxMC41LjFcIjtcbiAgICB0aGlzLnBsdWdpbnMgPSBuZXcgUGx1Z2luc1JlZ2lzdHJ5KCk7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgaWQ6IHtcbiAgICAgICAgbWluaWZ5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZUdlbmVyYXRlSWQ6IGNyZWF0ZUdlbmVyYXRlSWQsXG4gICAgICBSZW5kZXJlcjogaXNJbkJyb3dzZXIgPyBEb21SZW5kZXJlciA6IG51bGwsXG4gICAgICBwbHVnaW5zOiBbXVxuICAgIH07XG4gICAgdGhpcy5nZW5lcmF0ZUlkID0gY3JlYXRlR2VuZXJhdGVJZCh7XG4gICAgICBtaW5pZnk6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucGx1Z2lucy51c2UocGx1Z2luc1tpXSwge1xuICAgICAgICBxdWV1ZTogJ2ludGVybmFsJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXR1cChvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogUHJlcGFyZXMgdmFyaW91cyBvcHRpb25zLCBhcHBsaWVzIHBsdWdpbnMuXG4gICAqIFNob3VsZCBub3QgYmUgdXNlZCB0d2ljZSBvbiB0aGUgc2FtZSBpbnN0YW5jZSwgYmVjYXVzZSB0aGVyZSBpcyBubyBwbHVnaW5zXG4gICAqIGRlZHVwbGljYXRpb24gbG9naWMuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEpzcy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldHVwID0gZnVuY3Rpb24gc2V0dXAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCA9IG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pZCkge1xuICAgICAgdGhpcy5vcHRpb25zLmlkID0gX2V4dGVuZHMoe30sIHRoaXMub3B0aW9ucy5pZCwgb3B0aW9ucy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCB8fCBvcHRpb25zLmlkKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlSWQgPSB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCh0aGlzLm9wdGlvbnMuaWQpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluc2VydGlvblBvaW50ICE9IG51bGwpIHRoaXMub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgICBpZiAoJ1JlbmRlcmVyJyBpbiBvcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcblxuXG4gICAgaWYgKG9wdGlvbnMucGx1Z2lucykgdGhpcy51c2UuYXBwbHkodGhpcywgb3B0aW9ucy5wbHVnaW5zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgU3R5bGUgU2hlZXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgICBpbmRleCA9IF9vcHRpb25zLmluZGV4O1xuXG4gICAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGluZGV4ID0gcmVnaXN0cnkuaW5kZXggPT09IDAgPyAwIDogcmVnaXN0cnkuaW5kZXggKyAxO1xuICAgIH1cblxuICAgIHZhciBzaGVldCA9IG5ldyBTdHlsZVNoZWV0KHN0eWxlcywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIGdlbmVyYXRlSWQ6IG9wdGlvbnMuZ2VuZXJhdGVJZCB8fCB0aGlzLmdlbmVyYXRlSWQsXG4gICAgICBpbnNlcnRpb25Qb2ludDogdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50LFxuICAgICAgUmVuZGVyZXI6IHRoaXMub3B0aW9ucy5SZW5kZXJlcixcbiAgICAgIGluZGV4OiBpbmRleFxuICAgIH0pKTtcbiAgICB0aGlzLnBsdWdpbnMub25Qcm9jZXNzU2hlZXQoc2hlZXQpO1xuICAgIHJldHVybiBzaGVldDtcbiAgfVxuICAvKipcbiAgICogRGV0YWNoIHRoZSBTdHlsZSBTaGVldCBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHJlZ2lzdHJ5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVTdHlsZVNoZWV0ID0gZnVuY3Rpb24gcmVtb3ZlU3R5bGVTaGVldChzaGVldCkge1xuICAgIHNoZWV0LmRldGFjaCgpO1xuICAgIHJlZ2lzdHJ5LnJlbW92ZShzaGVldCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHJ1bGUgd2l0aG91dCBhIFN0eWxlIFNoZWV0LlxuICAgKiBbRGVwcmVjYXRlZF0gd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZVJ1bGUgPSBmdW5jdGlvbiBjcmVhdGVSdWxlJDEobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoc3R5bGUgPT09IHZvaWQgMCkge1xuICAgICAgc3R5bGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgLy8gRW5hYmxlIHJ1bGUgd2l0aG91dCBuYW1lIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdXG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVSdWxlKHVuZGVmaW5lZCwgbmFtZSwgc3R5bGUpO1xuICAgIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV1cblxuXG4gICAgdmFyIHJ1bGVPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBqc3M6IHRoaXMsXG4gICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyXG4gICAgfSk7XG5cbiAgICBpZiAoIXJ1bGVPcHRpb25zLmdlbmVyYXRlSWQpIHJ1bGVPcHRpb25zLmdlbmVyYXRlSWQgPSB0aGlzLmdlbmVyYXRlSWQ7XG4gICAgaWYgKCFydWxlT3B0aW9ucy5jbGFzc2VzKSBydWxlT3B0aW9ucy5jbGFzc2VzID0ge307XG4gICAgaWYgKCFydWxlT3B0aW9ucy5rZXlmcmFtZXMpIHJ1bGVPcHRpb25zLmtleWZyYW1lcyA9IHt9O1xuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBydWxlT3B0aW9ucyk7XG5cbiAgICBpZiAocnVsZSkgdGhpcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIHBsdWdpbi4gUGFzc2VkIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aXRoIGEgcnVsZSBpbnN0YW5jZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXNlID0gZnVuY3Rpb24gdXNlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHBsdWdpbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIF90aGlzLnBsdWdpbnMudXNlKHBsdWdpbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcmV0dXJuIEpzcztcbn0oKTtcblxuLyoqXG4gKiBFeHRyYWN0cyBhIHN0eWxlcyBvYmplY3Qgd2l0aCBvbmx5IHByb3BzIHRoYXQgY29udGFpbiBmdW5jdGlvbiB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGdldER5bmFtaWNTdHlsZXMoc3R5bGVzKSB7XG4gIHZhciB0byA9IG51bGw7XG5cbiAgZm9yICh2YXIga2V5IGluIHN0eWxlcykge1xuICAgIHZhciB2YWx1ZSA9IHN0eWxlc1trZXldO1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG4gICAgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICB0b1trZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHZhciBleHRyYWN0ZWQgPSBnZXREeW5hbWljU3R5bGVzKHZhbHVlKTtcblxuICAgICAgaWYgKGV4dHJhY3RlZCkge1xuICAgICAgICBpZiAoIXRvKSB0byA9IHt9O1xuICAgICAgICB0b1trZXldID0gZXh0cmFjdGVkO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0bztcbn1cblxuLyoqXG4gKiBTaGVldHNNYW5hZ2VyIGlzIGxpa2UgYSBXZWFrTWFwIHdoaWNoIGlzIGRlc2lnbmVkIHRvIGNvdW50IFN0eWxlU2hlZXRcbiAqIGluc3RhbmNlcyBhbmQgYXR0YWNoL2RldGFjaCBhdXRvbWF0aWNhbGx5LlxuICovXG52YXIgU2hlZXRzTWFuYWdlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNoZWV0c01hbmFnZXIoKSB7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMuc2hlZXRzID0gbmV3IFdlYWtNYXAoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTaGVldHNNYW5hZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS5zaGVldDtcbiAgfTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKGtleSwgc2hlZXQpIHtcbiAgICBpZiAodGhpcy5zaGVldHMuaGFzKGtleSkpIHJldHVybjtcbiAgICB0aGlzLmxlbmd0aCsrO1xuICAgIHRoaXMuc2hlZXRzLnNldChrZXksIHtcbiAgICAgIHNoZWV0OiBzaGVldCxcbiAgICAgIHJlZnM6IDBcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubWFuYWdlID0gZnVuY3Rpb24gbWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkge1xuICAgICAgICBlbnRyeS5zaGVldC5hdHRhY2goKTtcbiAgICAgIH1cblxuICAgICAgZW50cnkucmVmcysrO1xuICAgICAgcmV0dXJuIGVudHJ5LnNoZWV0O1xuICAgIH1cblxuICAgIHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byBtYW5hZ2VcIik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfTtcblxuICBfcHJvdG8udW5tYW5hZ2UgPSBmdW5jdGlvbiB1bm1hbmFnZShrZXkpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLnNoZWV0cy5nZXQoa2V5KTtcblxuICAgIGlmIChlbnRyeSkge1xuICAgICAgaWYgKGVudHJ5LnJlZnMgPiAwKSB7XG4gICAgICAgIGVudHJ5LnJlZnMtLTtcbiAgICAgICAgaWYgKGVudHJ5LnJlZnMgPT09IDApIGVudHJ5LnNoZWV0LmRldGFjaCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIlNoZWV0c01hbmFnZXI6IGNhbid0IGZpbmQgc2hlZXQgdG8gdW5tYW5hZ2VcIik7XG4gICAgfVxuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhTaGVldHNNYW5hZ2VyLCBbe1xuICAgIGtleTogXCJzaXplXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5sZW5ndGg7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNoZWV0c01hbmFnZXI7XG59KCk7XG5cbi8qKlxuICogQSBiZXR0ZXIgYWJzdHJhY3Rpb24gb3ZlciBDU1MuXG4gKlxuICogQGNvcHlyaWdodCBPbGVnIElzb25lbiAoU2xvYm9kc2tvaSkgLyBJc29uZW4gMjAxNC1wcmVzZW50XG4gKiBAd2Vic2l0ZSBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3NcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cbi8qKlxuICogRXhwb3J0IGEgY29uc3RhbnQgaW5kaWNhdGluZyBpZiB0aGlzIGJyb3dzZXIgaGFzIENTU1RPTSBzdXBwb3J0LlxuICogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxOC8wMy9jc3NvbVxuICovXG52YXIgaGFzQ1NTVE9NU3VwcG9ydCA9IHR5cGVvZiBDU1MgPT09ICdvYmplY3QnICYmIENTUyAhPSBudWxsICYmICdudW1iZXInIGluIENTUztcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBKc3MuXG4gKi9cblxudmFyIGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgSnNzKG9wdGlvbnMpO1xufTtcbi8qKlxuICogQSBnbG9iYWwgSnNzIGluc3RhbmNlLlxuICovXG5cbnZhciBqc3MgPSBjcmVhdGUoKTtcblxuZXhwb3J0IGRlZmF1bHQganNzO1xuZXhwb3J0IHsgUnVsZUxpc3QsIFNoZWV0c01hbmFnZXIsIFNoZWV0c1JlZ2lzdHJ5LCBjcmVhdGUsIGNyZWF0ZUdlbmVyYXRlSWQsIGNyZWF0ZVJ1bGUsIGdldER5bmFtaWNTdHlsZXMsIGhhc0NTU1RPTVN1cHBvcnQsIHJlZ2lzdHJ5IGFzIHNoZWV0cywgdG9Dc3NWYWx1ZSB9O1xuIiwiLy8gVXNlZCBodHRwczovL2dpdGh1Yi5jb20vdGhpbmtsb29wL211bHRpLWtleS1jYWNoZSBhcyBpbnNwaXJhdGlvblxudmFyIG11bHRpS2V5U3RvcmUgPSB7XG4gIHNldDogZnVuY3Rpb24gc2V0KGNhY2hlLCBrZXkxLCBrZXkyLCB2YWx1ZSkge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcblxuICAgIGlmICghc3ViQ2FjaGUpIHtcbiAgICAgIHN1YkNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgY2FjaGUuc2V0KGtleTEsIHN1YkNhY2hlKTtcbiAgICB9XG5cbiAgICBzdWJDYWNoZS5zZXQoa2V5MiwgdmFsdWUpO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldChjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICByZXR1cm4gc3ViQ2FjaGUgPyBzdWJDYWNoZS5nZXQoa2V5MikgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIGRlbGV0ZTogZnVuY3Rpb24gX2RlbGV0ZShjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICBzdWJDYWNoZS5kZWxldGUoa2V5Mik7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBtdWx0aUtleVN0b3JlOyIsImltcG9ydCBuZXN0ZWQgZnJvbSAnLi4vVGhlbWVQcm92aWRlci9uZXN0ZWQnO1xuLyoqXG4gKiBUaGlzIGlzIHRoZSBsaXN0IG9mIHRoZSBzdHlsZSBydWxlIG5hbWUgd2UgdXNlIGFzIGRyb3AgaW4gcmVwbGFjZW1lbnQgZm9yIHRoZSBidWlsdC1pblxuICogcHNldWRvIGNsYXNzZXMgKDpjaGVja2VkLCA6ZGlzYWJsZWQsIDpmb2N1c2VkLCBldGMuKS5cbiAqXG4gKiBXaHkgZG8gdGhleSBleGlzdCBpbiB0aGUgZmlyc3QgcGxhY2U/XG4gKiBUaGVzZSBjbGFzc2VzIGFyZSB1c2VkIGF0IGEgc3BlY2lmaWNpdHkgb2YgMi5cbiAqIEl0IGFsbG93cyB0aGVtIHRvIG92ZXJyaWRlIHByZXZpb3VzbHkgZGVmaW5pZWQgc3R5bGVzIGFzIHdlbGwgYXNcbiAqIGJlaW5nIHVudG91Y2hlZCBieSBzaW1wbGUgdXNlciBvdmVycmlkZXMuXG4gKi9cblxudmFyIHBzZXVkb0NsYXNzZXMgPSBbJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnZXhwYW5kZWQnLCAnc2VsZWN0ZWQnXTsgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB1bmlxdWUgY2xhc3MgbmFtZXMgYmFzZWQgb24gY291bnRlcnMuXG4vLyBXaGVuIG5ldyBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgY3JlYXRlZCwgcnVsZSBjb3VudGVyIGlzIHJlc2V0LlxuLy8gV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbi8vXG4vLyBJdCdzIGluc3BpcmVkIGJ5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvYmxvYi80ZTZhMDVkZDNmN2I2NTcyZmRkM2FiMjE2ODYxZDllNDQ2YzIwMzMxL3NyYy91dGlscy9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZS5qc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgX29wdGlvbnMkZGlzYWJsZUdsb2JhID0gb3B0aW9ucy5kaXNhYmxlR2xvYmFsLFxuICAgICAgZGlzYWJsZUdsb2JhbCA9IF9vcHRpb25zJGRpc2FibGVHbG9iYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRkaXNhYmxlR2xvYmEsXG4gICAgICBfb3B0aW9ucyRwcm9kdWN0aW9uUHIgPSBvcHRpb25zLnByb2R1Y3Rpb25QcmVmaXgsXG4gICAgICBwcm9kdWN0aW9uUHJlZml4ID0gX29wdGlvbnMkcHJvZHVjdGlvblByID09PSB2b2lkIDAgPyAnanNzJyA6IF9vcHRpb25zJHByb2R1Y3Rpb25QcixcbiAgICAgIF9vcHRpb25zJHNlZWQgPSBvcHRpb25zLnNlZWQsXG4gICAgICBzZWVkID0gX29wdGlvbnMkc2VlZCA9PT0gdm9pZCAwID8gJycgOiBfb3B0aW9ucyRzZWVkO1xuICB2YXIgc2VlZFByZWZpeCA9IHNlZWQgPT09ICcnID8gJycgOiBcIlwiLmNvbmNhdChzZWVkLCBcIi1cIik7XG4gIHZhciBydWxlQ291bnRlciA9IDA7XG5cbiAgdmFyIGdldE5leHRDb3VudGVySWQgPSBmdW5jdGlvbiBnZXROZXh0Q291bnRlcklkKCkge1xuICAgIHJ1bGVDb3VudGVyICs9IDE7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHJ1bGVDb3VudGVyID49IDFlMTApIHtcbiAgICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuJywgJ1RoZSBydWxlQ291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBydWxlQ291bnRlcjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHJ1bGUsIHN0eWxlU2hlZXQpIHtcbiAgICB2YXIgbmFtZSA9IHN0eWxlU2hlZXQub3B0aW9ucy5uYW1lOyAvLyBJcyBhIGdsb2JhbCBzdGF0aWMgTVVJIHN0eWxlP1xuXG4gICAgaWYgKG5hbWUgJiYgbmFtZS5pbmRleE9mKCdNdWknKSA9PT0gMCAmJiAhc3R5bGVTaGVldC5vcHRpb25zLmxpbmsgJiYgIWRpc2FibGVHbG9iYWwpIHtcbiAgICAgIC8vIFdlIGNhbiB1c2UgYSBzaG9ydGhhbmQgY2xhc3MgbmFtZSwgd2UgbmV2ZXIgdXNlIHRoZSBrZXlzIHRvIHN0eWxlIHRoZSBjb21wb25lbnRzLlxuICAgICAgaWYgKHBzZXVkb0NsYXNzZXMuaW5kZXhPZihydWxlLmtleSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBcIk11aS1cIi5jb25jYXQocnVsZS5rZXkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJlZml4ID0gXCJcIi5jb25jYXQoc2VlZFByZWZpeCkuY29uY2F0KG5hbWUsIFwiLVwiKS5jb25jYXQocnVsZS5rZXkpO1xuXG4gICAgICBpZiAoIXN0eWxlU2hlZXQub3B0aW9ucy50aGVtZVtuZXN0ZWRdIHx8IHNlZWQgIT09ICcnKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChwcmVmaXgsIFwiLVwiKS5jb25jYXQoZ2V0TmV4dENvdW50ZXJJZCgpKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChwcm9kdWN0aW9uUHJlZml4KS5jb25jYXQoZ2V0TmV4dENvdW50ZXJJZCgpKTtcbiAgICB9XG5cbiAgICB2YXIgc3VmZml4ID0gXCJcIi5jb25jYXQocnVsZS5rZXksIFwiLVwiKS5jb25jYXQoZ2V0TmV4dENvdW50ZXJJZCgpKTsgLy8gSGVscCB3aXRoIGRlYnVnZ2FiaWxpdHkuXG5cbiAgICBpZiAoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChzdHlsZVNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4LCBcIi1cIikuY29uY2F0KHN1ZmZpeCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChzdWZmaXgpO1xuICB9O1xufSIsImltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgeyBjcmVhdGVSdWxlIH0gZnJvbSAnanNzJztcblxudmFyIG5vdyA9IERhdGUubm93KCk7XG52YXIgZm5WYWx1ZXNOcyA9IFwiZm5WYWx1ZXNcIiArIG5vdztcbnZhciBmblJ1bGVOcyA9IFwiZm5TdHlsZVwiICsgKytub3c7XG5cbnZhciBmdW5jdGlvblBsdWdpbiA9IGZ1bmN0aW9uIGZ1bmN0aW9uUGx1Z2luKCkge1xuICByZXR1cm4ge1xuICAgIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgZGVjbCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwge30sIG9wdGlvbnMpO1xuICAgICAgcnVsZVtmblJ1bGVOc10gPSBkZWNsO1xuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfSxcbiAgICBvblByb2Nlc3NTdHlsZTogZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZXh0cmFjdCBmdW5jdGlvbiB2YWx1ZXMgZnJvbSB0aGUgZGVjbGFyYXRpb24sIHNvIHRoYXQgd2UgY2FuIGtlZXAgY29yZSB1bmF3YXJlIG9mIHRoZW0uXG4gICAgICAvLyBXZSBuZWVkIHRvIGRvIHRoYXQgb25seSBvbmNlLlxuICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBleHRyYWN0IGZ1bmN0aW9ucyBvbiBlYWNoIHN0eWxlIHVwZGF0ZSwgc2luY2UgdGhpcyBjYW4gaGFwcGVuIG9ubHkgb25jZS5cbiAgICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgZnVuY3Rpb24gdmFsdWVzIGluc2lkZSBvZiBmdW5jdGlvbiBydWxlcy5cbiAgICAgIGlmIChmblZhbHVlc05zIGluIHJ1bGUgfHwgZm5SdWxlTnMgaW4gcnVsZSkgcmV0dXJuIHN0eWxlO1xuICAgICAgdmFyIGZuVmFsdWVzID0ge307XG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIGNvbnRpbnVlO1xuICAgICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICAgIGZuVmFsdWVzW3Byb3BdID0gdmFsdWU7XG4gICAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG5cbiAgICAgIHJ1bGVbZm5WYWx1ZXNOc10gPSBmblZhbHVlcztcbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9LFxuICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucykge1xuICAgICAgdmFyIHN0eWxlUnVsZSA9IHJ1bGU7IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG4gICAgICB2YXIgZm5SdWxlID0gc3R5bGVSdWxlW2ZuUnVsZU5zXTsgLy8gSWYgd2UgaGF2ZSBhIHN0eWxlIGZ1bmN0aW9uLCB0aGUgZW50aXJlIHJ1bGUgaXMgZHluYW1pYyBhbmQgc3R5bGUgb2JqZWN0XG4gICAgICAvLyB3aWxsIGJlIHJldHVybmVkIGZyb20gdGhhdCBmdW5jdGlvbi5cblxuICAgICAgaWYgKGZuUnVsZSkge1xuICAgICAgICAvLyBFbXB0eSBvYmplY3Qgd2lsbCByZW1vdmUgYWxsIGN1cnJlbnRseSBkZWZpbmVkIHByb3BzXG4gICAgICAgIC8vIGluIGNhc2UgZnVuY3Rpb24gcnVsZSByZXR1cm5zIGEgZmFsc3kgdmFsdWUuXG4gICAgICAgIHN0eWxlUnVsZS5zdHlsZSA9IGZuUnVsZShkYXRhKSB8fCB7fTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHlsZVJ1bGUuc3R5bGVbcHJvcF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIEZ1bmN0aW9uIHZhbHVlcyBpbnNpZGUgZnVuY3Rpb24gcnVsZXMgYXJlIG5vdCBzdXBwb3J0ZWQuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuXG4gICAgICB2YXIgZm5WYWx1ZXMgPSBzdHlsZVJ1bGVbZm5WYWx1ZXNOc107IC8vIElmIHdlIGhhdmUgYSBmbiB2YWx1ZXMgbWFwLCBpdCBpcyBhIHJ1bGUgd2l0aCBmdW5jdGlvbiB2YWx1ZXMuXG5cbiAgICAgIGlmIChmblZhbHVlcykge1xuICAgICAgICBmb3IgKHZhciBfcHJvcCBpbiBmblZhbHVlcykge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBmblZhbHVlc1tfcHJvcF0oZGF0YSksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb25QbHVnaW47XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyBSdWxlTGlzdCB9IGZyb20gJ2pzcyc7XG5cbnZhciBhdCA9ICdAZ2xvYmFsJztcbnZhciBhdFByZWZpeCA9ICdAZ2xvYmFsICc7XG5cbnZhciBHbG9iYWxDb250YWluZXJSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsQ29udGFpbmVyUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdnbG9iYWwnO1xuICAgIHRoaXMuYXQgPSBhdDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG5cbiAgICBmb3IgKHZhciBzZWxlY3RvciBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKHNlbGVjdG9yLCBzdHlsZXNbc2VsZWN0b3JdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gR2xvYmFsQ29udGFpbmVyUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZSwgcnVuIHBsdWdpbnMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgaWYgKHJ1bGUpIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy50b1N0cmluZygpO1xuICB9O1xuXG4gIHJldHVybiBHbG9iYWxDb250YWluZXJSdWxlO1xufSgpO1xuXG52YXIgR2xvYmFsUHJlZml4ZWRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsUHJlZml4ZWRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZ2xvYmFsJztcbiAgICB0aGlzLmF0ID0gYXQ7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2VsZWN0b3IgPSBrZXkuc3Vic3RyKGF0UHJlZml4Lmxlbmd0aCk7XG4gICAgdGhpcy5ydWxlID0gb3B0aW9ucy5qc3MuY3JlYXRlUnVsZShzZWxlY3Rvciwgc3R5bGUsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IEdsb2JhbFByZWZpeGVkUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlID8gdGhpcy5ydWxlLnRvU3RyaW5nKG9wdGlvbnMpIDogJyc7XG4gIH07XG5cbiAgcmV0dXJuIEdsb2JhbFByZWZpeGVkUnVsZTtcbn0oKTtcblxudmFyIHNlcGFyYXRvclJlZ0V4cCA9IC9cXHMqLFxccyovZztcblxuZnVuY3Rpb24gYWRkU2NvcGUoc2VsZWN0b3IsIHNjb3BlKSB7XG4gIHZhciBwYXJ0cyA9IHNlbGVjdG9yLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gIHZhciBzY29wZWQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgc2NvcGVkICs9IHNjb3BlICsgXCIgXCIgKyBwYXJ0c1tpXS50cmltKCk7XG4gICAgaWYgKHBhcnRzW2kgKyAxXSkgc2NvcGVkICs9ICcsICc7XG4gIH1cblxuICByZXR1cm4gc2NvcGVkO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUsIHNoZWV0KSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuICB2YXIgcnVsZXMgPSBzdHlsZSA/IHN0eWxlW2F0XSA6IG51bGw7XG4gIGlmICghcnVsZXMpIHJldHVybjtcblxuICBmb3IgKHZhciBuYW1lIGluIHJ1bGVzKSB7XG4gICAgc2hlZXQuYWRkUnVsZShuYW1lLCBydWxlc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBhZGRTY29wZShuYW1lLCBydWxlLnNlbGVjdG9yKVxuICAgIH0pKTtcbiAgfVxuXG4gIGRlbGV0ZSBzdHlsZVthdF07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlLCBzaGVldCkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcblxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgaWYgKHByb3BbMF0gIT09ICdAJyB8fCBwcm9wLnN1YnN0cigwLCBhdC5sZW5ndGgpICE9PSBhdCkgY29udGludWU7XG4gICAgdmFyIHNlbGVjdG9yID0gYWRkU2NvcGUocHJvcC5zdWJzdHIoYXQubGVuZ3RoKSwgcnVsZS5zZWxlY3Rvcik7XG4gICAgc2hlZXQuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICB9KSk7XG4gICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICB9XG59XG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBqc3NHbG9iYWwoKSB7XG4gIGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW5hbWUpIHJldHVybiBudWxsO1xuXG4gICAgaWYgKG5hbWUgPT09IGF0KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbENvbnRhaW5lclJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZVswXSA9PT0gJ0AnICYmIG5hbWUuc3Vic3RyKDAsIGF0UHJlZml4Lmxlbmd0aCkgPT09IGF0UHJlZml4KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbFByZWZpeGVkUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcgfHwgcGFyZW50Lm9wdGlvbnMucGFyZW50ICYmIHBhcmVudC5vcHRpb25zLnBhcmVudC50eXBlID09PSAnZ2xvYmFsJykge1xuICAgICAgICBvcHRpb25zLnNjb3BlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNjb3BlZCA9PT0gZmFsc2UpIHtcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBuYW1lO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScgfHwgIXNoZWV0KSByZXR1cm47XG4gICAgaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZShydWxlLCBzaGVldCk7XG4gICAgaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUsIHNoZWV0KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25DcmVhdGVSdWxlOiBvbkNyZWF0ZVJ1bGUsXG4gICAgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NHbG9iYWw7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgc2VwYXJhdG9yUmVnRXhwID0gL1xccyosXFxzKi9nO1xudmFyIHBhcmVudFJlZ0V4cCA9IC8mL2c7XG52YXIgcmVmUmVnRXhwID0gL1xcJChbXFx3LV0rKS9nO1xuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGpzc05lc3RlZCgpIHtcbiAgLy8gR2V0IGEgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgJHJlZiByZXBsYWNlbWVudC5cbiAgZnVuY3Rpb24gZ2V0UmVwbGFjZVJlZihjb250YWluZXIsIHNoZWV0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtYXRjaCwga2V5KSB7XG4gICAgICB2YXIgcnVsZSA9IGNvbnRhaW5lci5nZXRSdWxlKGtleSkgfHwgc2hlZXQgJiYgc2hlZXQuZ2V0UnVsZShrZXkpO1xuXG4gICAgICBpZiAocnVsZSkge1xuICAgICAgICBydWxlID0gcnVsZTtcbiAgICAgICAgcmV0dXJuIHJ1bGUuc2VsZWN0b3I7XG4gICAgICB9XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gQ291bGQgbm90IGZpbmQgdGhlIHJlZmVyZW5jZWQgcnVsZSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaW4gXFxcIlwiICsgKGNvbnRhaW5lci5vcHRpb25zLm1ldGEgfHwgY29udGFpbmVyLnRvU3RyaW5nKCkpICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VQYXJlbnRSZWZzKG5lc3RlZFByb3AsIHBhcmVudFByb3ApIHtcbiAgICB2YXIgcGFyZW50U2VsZWN0b3JzID0gcGFyZW50UHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICAgIHZhciBuZXN0ZWRTZWxlY3RvcnMgPSBuZXN0ZWRQcm9wLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRTZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRTZWxlY3RvcnNbaV07XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmVzdGVkU2VsZWN0b3JzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBuZXN0ZWQgPSBuZXN0ZWRTZWxlY3RvcnNbal07XG4gICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnLCAnOyAvLyBSZXBsYWNlIGFsbCAmIGJ5IHRoZSBwYXJlbnQgb3IgcHJlZml4ICYgd2l0aCB0aGUgcGFyZW50LlxuXG4gICAgICAgIHJlc3VsdCArPSBuZXN0ZWQuaW5kZXhPZignJicpICE9PSAtMSA/IG5lc3RlZC5yZXBsYWNlKHBhcmVudFJlZ0V4cCwgcGFyZW50KSA6IHBhcmVudCArIFwiIFwiICsgbmVzdGVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPcHRpb25zKHJ1bGUsIGNvbnRhaW5lciwgcHJldk9wdGlvbnMpIHtcbiAgICAvLyBPcHRpb25zIGhhcyBiZWVuIGFscmVhZHkgY3JlYXRlZCwgbm93IHdlIG9ubHkgaW5jcmVhc2UgaW5kZXguXG4gICAgaWYgKHByZXZPcHRpb25zKSByZXR1cm4gX2V4dGVuZHMoe30sIHByZXZPcHRpb25zLCB7XG4gICAgICBpbmRleDogcHJldk9wdGlvbnMuaW5kZXggKyAxIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG4gICAgfSk7XG4gICAgdmFyIG5lc3RpbmdMZXZlbCA9IHJ1bGUub3B0aW9ucy5uZXN0aW5nTGV2ZWw7XG4gICAgbmVzdGluZ0xldmVsID0gbmVzdGluZ0xldmVsID09PSB1bmRlZmluZWQgPyAxIDogbmVzdGluZ0xldmVsICsgMTtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIHJ1bGUub3B0aW9ucywge1xuICAgICAgbmVzdGluZ0xldmVsOiBuZXN0aW5nTGV2ZWwsXG4gICAgICBpbmRleDogY29udGFpbmVyLmluZGV4T2YocnVsZSkgKyAxIC8vIFdlIGRvbid0IG5lZWQgdGhlIHBhcmVudCBuYW1lIHRvIGJlIHNldCBvcHRpb25zIGZvciBjaGxpZC5cblxuICAgIH0pO1xuXG4gICAgZGVsZXRlIG9wdGlvbnMubmFtZTtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgY29udGFpbmVyID0gc3R5bGVSdWxlLm9wdGlvbnMucGFyZW50O1xuICAgIHZhciBvcHRpb25zO1xuICAgIHZhciByZXBsYWNlUmVmO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIGlzTmVzdGVkID0gcHJvcC5pbmRleE9mKCcmJykgIT09IC0xO1xuICAgICAgdmFyIGlzTmVzdGVkQ29uZGl0aW9uYWwgPSBwcm9wWzBdID09PSAnQCc7XG4gICAgICBpZiAoIWlzTmVzdGVkICYmICFpc05lc3RlZENvbmRpdGlvbmFsKSBjb250aW51ZTtcbiAgICAgIG9wdGlvbnMgPSBnZXRPcHRpb25zKHN0eWxlUnVsZSwgY29udGFpbmVyLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGlzTmVzdGVkKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHJlcGxhY2VQYXJlbnRSZWZzKHByb3AsIHN0eWxlUnVsZS5zZWxlY3Rvcik7IC8vIExhemlseSBjcmVhdGUgdGhlIHJlZiByZXBsYWNlciBmdW5jdGlvbiBqdXN0IG9uY2UgZm9yXG4gICAgICAgIC8vIGFsbCBuZXN0ZWQgcnVsZXMgd2l0aGluIHRoZSBzaGVldC5cblxuICAgICAgICBpZiAoIXJlcGxhY2VSZWYpIHJlcGxhY2VSZWYgPSBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lciwgc2hlZXQpOyAvLyBSZXBsYWNlIGFsbCAkcmVmcy5cblxuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UocmVmUmVnRXhwLCByZXBsYWNlUmVmKTtcbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclxuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTmVzdGVkQ29uZGl0aW9uYWwpIHtcbiAgICAgICAgLy8gUGxhY2UgY29uZGl0aW9uYWwgcmlnaHQgYWZ0ZXIgdGhlIHBhcmVudCBydWxlIHRvIGVuc3VyZSByaWdodCBvcmRlcmluZy5cbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUocHJvcCwge30sIG9wdGlvbnMpIC8vIEZsb3cgZXhwZWN0cyBtb3JlIG9wdGlvbnMgYnV0IHRoZXkgYXJlbid0IHJlcXVpcmVkXG4gICAgICAgIC8vIEFuZCBmbG93IGRvZXNuJ3Qga25vdyB0aGlzIHdpbGwgYWx3YXlzIGJlIGEgU3R5bGVSdWxlIHdoaWNoIGhhcyB0aGUgYWRkUnVsZSBtZXRob2RcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgICAgLmFkZFJ1bGUoc3R5bGVSdWxlLmtleSwgc3R5bGVbcHJvcF0sIHtcbiAgICAgICAgICBzZWxlY3Rvcjogc3R5bGVSdWxlLnNlbGVjdG9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzTmVzdGVkO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdmFyLCBwcmVmZXItdGVtcGxhdGUgKi9cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gL1tBLVpdL2dcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS9cbnZhciBjYWNoZSA9IHt9XG5cbmZ1bmN0aW9uIHRvSHlwaGVuTG93ZXIobWF0Y2gpIHtcbiAgcmV0dXJuICctJyArIG1hdGNoLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKG5hbWUpIHtcbiAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgcmV0dXJuIGNhY2hlW25hbWVdXG4gIH1cblxuICB2YXIgaE5hbWUgPSBuYW1lLnJlcGxhY2UodXBwZXJjYXNlUGF0dGVybiwgdG9IeXBoZW5Mb3dlcilcbiAgcmV0dXJuIChjYWNoZVtuYW1lXSA9IG1zUGF0dGVybi50ZXN0KGhOYW1lKSA/ICctJyArIGhOYW1lIDogaE5hbWUpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGh5cGhlbmF0ZVN0eWxlTmFtZVxuIiwiaW1wb3J0IGh5cGhlbmF0ZSBmcm9tICdoeXBoZW5hdGUtc3R5bGUtbmFtZSc7XG5cbi8qKlxuICogQ29udmVydCBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyB0byBkYXNoIHNlcGFyYXRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBjb252ZXJ0Q2FzZShzdHlsZSkge1xuICB2YXIgY29udmVydGVkID0ge307XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIHZhciBrZXkgPSBwcm9wLmluZGV4T2YoJy0tJykgPT09IDAgPyBwcm9wIDogaHlwaGVuYXRlKHByb3ApO1xuICAgIGNvbnZlcnRlZFtrZXldID0gc3R5bGVbcHJvcF07XG4gIH1cblxuICBpZiAoc3R5bGUuZmFsbGJhY2tzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUuZmFsbGJhY2tzKSkgY29udmVydGVkLmZhbGxiYWNrcyA9IHN0eWxlLmZhbGxiYWNrcy5tYXAoY29udmVydENhc2UpO2Vsc2UgY29udmVydGVkLmZhbGxiYWNrcyA9IGNvbnZlcnRDYXNlKHN0eWxlLmZhbGxiYWNrcyk7XG4gIH1cblxuICByZXR1cm4gY29udmVydGVkO1xufVxuLyoqXG4gKiBBbGxvdyBjYW1lbCBjYXNlZCBwcm9wZXJ0eSBuYW1lcyBieSBjb252ZXJ0aW5nIHRoZW0gYmFjayB0byBkYXNoZXJpemVkLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICovXG5cblxuZnVuY3Rpb24gY2FtZWxDYXNlKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkge1xuICAgICAgLy8gSGFuZGxlIHJ1bGVzIGxpa2UgQGZvbnQtZmFjZSwgd2hpY2ggY2FuIGhhdmUgbXVsdGlwbGUgc3R5bGVzIGluIGFuIGFycmF5XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3R5bGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHN0eWxlW2luZGV4XSA9IGNvbnZlcnRDYXNlKHN0eWxlW2luZGV4XSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udmVydENhc2Uoc3R5bGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIGlmIChwcm9wLmluZGV4T2YoJy0tJykgPT09IDApIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgaHlwaGVuYXRlZFByb3AgPSBoeXBoZW5hdGUocHJvcCk7IC8vIFRoZXJlIHdhcyBubyBjYW1lbCBjYXNlIGluIHBsYWNlXG5cbiAgICBpZiAocHJvcCA9PT0gaHlwaGVuYXRlZFByb3ApIHJldHVybiB2YWx1ZTtcbiAgICBydWxlLnByb3AoaHlwaGVuYXRlZFByb3AsIHZhbHVlKTsgLy8gQ29yZSB3aWxsIGlnbm9yZSB0aGF0IHByb3BlcnR5IHZhbHVlIHdlIHNldCB0aGUgcHJvcGVyIG9uZSBhYm92ZS5cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYW1lbENhc2U7XG4iLCJpbXBvcnQgeyBoYXNDU1NUT01TdXBwb3J0IH0gZnJvbSAnanNzJztcblxudmFyIHB4ID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MucHggOiAncHgnO1xudmFyIG1zID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MubXMgOiAnbXMnO1xudmFyIHBlcmNlbnQgPSBoYXNDU1NUT01TdXBwb3J0ICYmIENTUyA/IENTUy5wZXJjZW50IDogJyUnO1xuLyoqXG4gKiBHZW5lcmF0ZWQganNzLXBsdWdpbi1kZWZhdWx0LXVuaXQgQ1NTIHByb3BlcnR5IHVuaXRzXG4gKlxuICogQHR5cGUgb2JqZWN0XG4gKi9cblxudmFyIGRlZmF1bHRVbml0cyA9IHtcbiAgLy8gQW5pbWF0aW9uIHByb3BlcnRpZXNcbiAgJ2FuaW1hdGlvbi1kZWxheSc6IG1zLFxuICAnYW5pbWF0aW9uLWR1cmF0aW9uJzogbXMsXG4gIC8vIEJhY2tncm91bmQgcHJvcGVydGllc1xuICAnYmFja2dyb3VuZC1wb3NpdGlvbic6IHB4LFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi14JzogcHgsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXknOiBweCxcbiAgJ2JhY2tncm91bmQtc2l6ZSc6IHB4LFxuICAvLyBCb3JkZXIgUHJvcGVydGllc1xuICBib3JkZXI6IHB4LFxuICAnYm9yZGVyLWJvdHRvbSc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1ib3R0b20td2lkdGgnOiBweCxcbiAgJ2JvcmRlci1sZWZ0JzogcHgsXG4gICdib3JkZXItbGVmdC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXJpZ2h0JzogcHgsXG4gICdib3JkZXItcmlnaHQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci10b3AnOiBweCxcbiAgJ2JvcmRlci10b3AtbGVmdC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci10b3AtcmlnaHQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItdG9wLXdpZHRoJzogcHgsXG4gICdib3JkZXItd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1ibG9jayc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLWVuZCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLWVuZC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLXN0YXJ0JzogcHgsXG4gICdib3JkZXItYmxvY2stc3RhcnQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1ibG9jay13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWlubGluZSc6IHB4LFxuICAnYm9yZGVyLWlubGluZS1lbmQnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUtZW5kLXdpZHRoJzogcHgsXG4gICdib3JkZXItaW5saW5lLXN0YXJ0JzogcHgsXG4gICdib3JkZXItaW5saW5lLXN0YXJ0LXdpZHRoJzogcHgsXG4gICdib3JkZXItaW5saW5lLXdpZHRoJzogcHgsXG4gICdib3JkZXItc3RhcnQtc3RhcnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItc3RhcnQtZW5kLXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWVuZC1zdGFydC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1lbmQtZW5kLXJhZGl1cyc6IHB4LFxuICAvLyBNYXJnaW4gcHJvcGVydGllc1xuICBtYXJnaW46IHB4LFxuICAnbWFyZ2luLWJvdHRvbSc6IHB4LFxuICAnbWFyZ2luLWxlZnQnOiBweCxcbiAgJ21hcmdpbi1yaWdodCc6IHB4LFxuICAnbWFyZ2luLXRvcCc6IHB4LFxuICAnbWFyZ2luLWJsb2NrJzogcHgsXG4gICdtYXJnaW4tYmxvY2stZW5kJzogcHgsXG4gICdtYXJnaW4tYmxvY2stc3RhcnQnOiBweCxcbiAgJ21hcmdpbi1pbmxpbmUnOiBweCxcbiAgJ21hcmdpbi1pbmxpbmUtZW5kJzogcHgsXG4gICdtYXJnaW4taW5saW5lLXN0YXJ0JzogcHgsXG4gIC8vIFBhZGRpbmcgcHJvcGVydGllc1xuICBwYWRkaW5nOiBweCxcbiAgJ3BhZGRpbmctYm90dG9tJzogcHgsXG4gICdwYWRkaW5nLWxlZnQnOiBweCxcbiAgJ3BhZGRpbmctcmlnaHQnOiBweCxcbiAgJ3BhZGRpbmctdG9wJzogcHgsXG4gICdwYWRkaW5nLWJsb2NrJzogcHgsXG4gICdwYWRkaW5nLWJsb2NrLWVuZCc6IHB4LFxuICAncGFkZGluZy1ibG9jay1zdGFydCc6IHB4LFxuICAncGFkZGluZy1pbmxpbmUnOiBweCxcbiAgJ3BhZGRpbmctaW5saW5lLWVuZCc6IHB4LFxuICAncGFkZGluZy1pbmxpbmUtc3RhcnQnOiBweCxcbiAgLy8gTWFzayBwcm9wZXJ0aWVzXG4gICdtYXNrLXBvc2l0aW9uLXgnOiBweCxcbiAgJ21hc2stcG9zaXRpb24teSc6IHB4LFxuICAnbWFzay1zaXplJzogcHgsXG4gIC8vIFdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICBoZWlnaHQ6IHB4LFxuICB3aWR0aDogcHgsXG4gICdtaW4taGVpZ2h0JzogcHgsXG4gICdtYXgtaGVpZ2h0JzogcHgsXG4gICdtaW4td2lkdGgnOiBweCxcbiAgJ21heC13aWR0aCc6IHB4LFxuICAvLyBQb3NpdGlvbiBwcm9wZXJ0aWVzXG4gIGJvdHRvbTogcHgsXG4gIGxlZnQ6IHB4LFxuICB0b3A6IHB4LFxuICByaWdodDogcHgsXG4gIGluc2V0OiBweCxcbiAgJ2luc2V0LWJsb2NrJzogcHgsXG4gICdpbnNldC1ibG9jay1lbmQnOiBweCxcbiAgJ2luc2V0LWJsb2NrLXN0YXJ0JzogcHgsXG4gICdpbnNldC1pbmxpbmUnOiBweCxcbiAgJ2luc2V0LWlubGluZS1lbmQnOiBweCxcbiAgJ2luc2V0LWlubGluZS1zdGFydCc6IHB4LFxuICAvLyBTaGFkb3cgcHJvcGVydGllc1xuICAnYm94LXNoYWRvdyc6IHB4LFxuICAndGV4dC1zaGFkb3cnOiBweCxcbiAgLy8gQ29sdW1uIHByb3BlcnRpZXNcbiAgJ2NvbHVtbi1nYXAnOiBweCxcbiAgJ2NvbHVtbi1ydWxlJzogcHgsXG4gICdjb2x1bW4tcnVsZS13aWR0aCc6IHB4LFxuICAnY29sdW1uLXdpZHRoJzogcHgsXG4gIC8vIEZvbnQgYW5kIHRleHQgcHJvcGVydGllc1xuICAnZm9udC1zaXplJzogcHgsXG4gICdmb250LXNpemUtZGVsdGEnOiBweCxcbiAgJ2xldHRlci1zcGFjaW5nJzogcHgsXG4gICd0ZXh0LWRlY29yYXRpb24tdGhpY2tuZXNzJzogcHgsXG4gICd0ZXh0LWluZGVudCc6IHB4LFxuICAndGV4dC1zdHJva2UnOiBweCxcbiAgJ3RleHQtc3Ryb2tlLXdpZHRoJzogcHgsXG4gICd3b3JkLXNwYWNpbmcnOiBweCxcbiAgLy8gTW90aW9uIHByb3BlcnRpZXNcbiAgbW90aW9uOiBweCxcbiAgJ21vdGlvbi1vZmZzZXQnOiBweCxcbiAgLy8gT3V0bGluZSBwcm9wZXJ0aWVzXG4gIG91dGxpbmU6IHB4LFxuICAnb3V0bGluZS1vZmZzZXQnOiBweCxcbiAgJ291dGxpbmUtd2lkdGgnOiBweCxcbiAgLy8gUGVyc3BlY3RpdmUgcHJvcGVydGllc1xuICBwZXJzcGVjdGl2ZTogcHgsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teSc6IHBlcmNlbnQsXG4gIC8vIFRyYW5zZm9ybSBwcm9wZXJ0aWVzXG4gICd0cmFuc2Zvcm0tb3JpZ2luJzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXknOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi16JzogcGVyY2VudCxcbiAgLy8gVHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gICd0cmFuc2l0aW9uLWRlbGF5JzogbXMsXG4gICd0cmFuc2l0aW9uLWR1cmF0aW9uJzogbXMsXG4gIC8vIEFsaWdubWVudCBwcm9wZXJ0aWVzXG4gICd2ZXJ0aWNhbC1hbGlnbic6IHB4LFxuICAnZmxleC1iYXNpcyc6IHB4LFxuICAvLyBTb21lIHJhbmRvbSBwcm9wZXJ0aWVzXG4gICdzaGFwZS1tYXJnaW4nOiBweCxcbiAgc2l6ZTogcHgsXG4gIGdhcDogcHgsXG4gIC8vIEdyaWQgcHJvcGVydGllc1xuICBncmlkOiBweCxcbiAgJ2dyaWQtZ2FwJzogcHgsXG4gICdyb3ctZ2FwJzogcHgsXG4gICdncmlkLXJvdy1nYXAnOiBweCxcbiAgJ2dyaWQtY29sdW1uLWdhcCc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1yb3dzJzogcHgsXG4gICdncmlkLXRlbXBsYXRlLWNvbHVtbnMnOiBweCxcbiAgJ2dyaWQtYXV0by1yb3dzJzogcHgsXG4gICdncmlkLWF1dG8tY29sdW1ucyc6IHB4LFxuICAvLyBOb3QgZXhpc3RpbmcgcHJvcGVydGllcy5cbiAgLy8gVXNlZCB0byBhdm9pZCBpc3N1ZXMgd2l0aCBqc3MtcGx1Z2luLWV4cGFuZCBpbnRlZ3JhdGlvbi5cbiAgJ2JveC1zaGFkb3cteCc6IHB4LFxuICAnYm94LXNoYWRvdy15JzogcHgsXG4gICdib3gtc2hhZG93LWJsdXInOiBweCxcbiAgJ2JveC1zaGFkb3ctc3ByZWFkJzogcHgsXG4gICdmb250LWxpbmUtaGVpZ2h0JzogcHgsXG4gICd0ZXh0LXNoYWRvdy14JzogcHgsXG4gICd0ZXh0LXNoYWRvdy15JzogcHgsXG4gICd0ZXh0LXNoYWRvdy1ibHVyJzogcHhcbn07XG5cbi8qKlxuICogQ2xvbmVzIHRoZSBvYmplY3QgYW5kIGFkZHMgYSBjYW1lbCBjYXNlZCBwcm9wZXJ0eSB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBhZGRDYW1lbENhc2VkVmVyc2lvbihvYmopIHtcbiAgdmFyIHJlZ0V4cCA9IC8oLVthLXpdKS9nO1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICByZXR1cm4gc3RyWzFdLnRvVXBwZXJDYXNlKCk7XG4gIH07XG5cbiAgdmFyIG5ld09iaiA9IHt9O1xuXG4gIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgbmV3T2JqW19rZXldID0gb2JqW19rZXldO1xuICAgIG5ld09ialtfa2V5LnJlcGxhY2UocmVnRXhwLCByZXBsYWNlKV0gPSBvYmpbX2tleV07XG4gIH1cblxuICByZXR1cm4gbmV3T2JqO1xufVxuXG52YXIgdW5pdHMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihkZWZhdWx0VW5pdHMpO1xuLyoqXG4gKiBSZWN1cnNpdmUgZGVlcCBzdHlsZSBwYXNzaW5nIGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHZhbHVlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlW2ldID0gaXRlcmF0ZShwcm9wLCB2YWx1ZVtpXSwgb3B0aW9ucyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIGZvciAodmFyIGlubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVtpbm5lclByb3BdID0gaXRlcmF0ZShpbm5lclByb3AsIHZhbHVlW2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBfaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW19pbm5lclByb3BdID0gaXRlcmF0ZShwcm9wICsgXCItXCIgKyBfaW5uZXJQcm9wLCB2YWx1ZVtfaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIU51bWJlci5pc05hTih2YWx1ZSkpIHtcbiAgICB2YXIgdW5pdCA9IG9wdGlvbnNbcHJvcF0gfHwgdW5pdHNbcHJvcF07IC8vIEFkZCB0aGUgdW5pdCBpZiBhdmFpbGFibGUsIGV4Y2VwdCBmb3IgdGhlIHNwZWNpYWwgY2FzZSBvZiAwcHguXG5cbiAgICBpZiAodW5pdCAmJiAhKHZhbHVlID09PSAwICYmIHVuaXQgPT09IHB4KSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB1bml0ID09PSAnZnVuY3Rpb24nID8gdW5pdCh2YWx1ZSkudG9TdHJpbmcoKSA6IFwiXCIgKyB2YWx1ZSArIHVuaXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIEFkZCB1bml0IHRvIG51bWVyaWMgdmFsdWVzLlxuICovXG5cblxuZnVuY3Rpb24gZGVmYXVsdFVuaXQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIGNhbWVsQ2FzZWRPcHRpb25zID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob3B0aW9ucyk7XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICBzdHlsZVtwcm9wXSA9IGl0ZXJhdGUocHJvcCwgc3R5bGVbcHJvcF0sIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIGl0ZXJhdGUocHJvcCwgdmFsdWUsIGNhbWVsQ2FzZWRPcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFVuaXQ7XG4iLCJpbXBvcnQgaXNJbkJyb3dzZXIgZnJvbSAnaXMtaW4tYnJvd3Nlcic7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5JztcblxuLy8gRXhwb3J0IGphdmFzY3JpcHQgc3R5bGUgYW5kIGNzcyBzdHlsZSB2ZW5kb3IgcHJlZml4ZXMuXG52YXIganMgPSAnJztcbnZhciBjc3MgPSAnJztcbnZhciB2ZW5kb3IgPSAnJztcbnZhciBicm93c2VyID0gJyc7XG52YXIgaXNUb3VjaCA9IGlzSW5Ccm93c2VyICYmICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsgLy8gV2Ugc2hvdWxkIG5vdCBkbyBhbnl0aGluZyBpZiByZXF1aXJlZCBzZXJ2ZXJzaWRlLlxuXG5pZiAoaXNJbkJyb3dzZXIpIHtcbiAgLy8gT3JkZXIgbWF0dGVycy4gV2UgbmVlZCB0byBjaGVjayBXZWJraXQgdGhlIGxhc3Qgb25lIGJlY2F1c2VcbiAgLy8gb3RoZXIgdmVuZG9ycyB1c2UgdG8gYWRkIFdlYmtpdCBwcmVmaXhlcyB0byBzb21lIHByb3BlcnRpZXNcbiAgdmFyIGpzQ3NzTWFwID0ge1xuICAgIE1vejogJy1tb3otJyxcbiAgICBtczogJy1tcy0nLFxuICAgIE86ICctby0nLFxuICAgIFdlYmtpdDogJy13ZWJraXQtJ1xuICB9O1xuXG4gIHZhciBfZG9jdW1lbnQkY3JlYXRlRWxlbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyksXG4gICAgICBzdHlsZSA9IF9kb2N1bWVudCRjcmVhdGVFbGVtZS5zdHlsZTtcblxuICB2YXIgdGVzdFByb3AgPSAnVHJhbnNmb3JtJztcblxuICBmb3IgKHZhciBrZXkgaW4ganNDc3NNYXApIHtcbiAgICBpZiAoa2V5ICsgdGVzdFByb3AgaW4gc3R5bGUpIHtcbiAgICAgIGpzID0ga2V5O1xuICAgICAgY3NzID0ganNDc3NNYXBba2V5XTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSAvLyBDb3JyZWN0bHkgZGV0ZWN0IHRoZSBFZGdlIGJyb3dzZXIuXG5cblxuICBpZiAoanMgPT09ICdXZWJraXQnICYmICdtc0h5cGhlbnMnIGluIHN0eWxlKSB7XG4gICAganMgPSAnbXMnO1xuICAgIGNzcyA9IGpzQ3NzTWFwLm1zO1xuICAgIGJyb3dzZXIgPSAnZWRnZSc7XG4gIH0gLy8gQ29ycmVjdGx5IGRldGVjdCB0aGUgU2FmYXJpIGJyb3dzZXIuXG5cblxuICBpZiAoanMgPT09ICdXZWJraXQnICYmICctYXBwbGUtdHJhaWxpbmctd29yZCcgaW4gc3R5bGUpIHtcbiAgICB2ZW5kb3IgPSAnYXBwbGUnO1xuICB9XG59XG4vKipcbiAqIFZlbmRvciBwcmVmaXggc3RyaW5nIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICpcbiAqIEB0eXBlIHt7anM6IFN0cmluZywgY3NzOiBTdHJpbmcsIHZlbmRvcjogU3RyaW5nLCBicm93c2VyOiBTdHJpbmd9fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbnZhciBwcmVmaXggPSB7XG4gIGpzOiBqcyxcbiAgY3NzOiBjc3MsXG4gIHZlbmRvcjogdmVuZG9yLFxuICBicm93c2VyOiBicm93c2VyLFxuICBpc1RvdWNoOiBpc1RvdWNoXG59O1xuXG4vKipcbiAqIFRlc3QgaWYgYSBrZXlmcmFtZSBhdC1ydWxlIHNob3VsZCBiZSBwcmVmaXhlZCBvciBub3RcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdmVuZG9yIHByZWZpeCBzdHJpbmcgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZEtleWZyYW1lcyhrZXkpIHtcbiAgLy8gS2V5ZnJhbWVzIGlzIGFscmVhZHkgcHJlZml4ZWQuIGUuZy4ga2V5ID0gJ0Atd2Via2l0LWtleWZyYW1lcyBhJ1xuICBpZiAoa2V5WzFdID09PSAnLScpIHJldHVybiBrZXk7IC8vIE5vIG5lZWQgdG8gcHJlZml4IElFL0VkZ2UuIE9sZGVyIGJyb3dzZXJzIHdpbGwgaWdub3JlIHVuc3VwcG9ydGVkIHJ1bGVzLlxuICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9a2V5ZnJhbWVzXG5cbiAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykgcmV0dXJuIGtleTtcbiAgcmV0dXJuIFwiQFwiICsgcHJlZml4LmNzcyArIFwia2V5ZnJhbWVzXCIgKyBrZXkuc3Vic3RyKDEwKTtcbn1cblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWFwcGVhcmFuY2VcblxudmFyIGFwcGVhcmVuY2UgPSB7XG4gIG5vUHJlZmlsbDogWydhcHBlYXJhbmNlJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdhcHBlYXJhbmNlJykgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHJldHVybiBcIi13ZWJraXQtXCIgKyBwcm9wO1xuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWNvbG9yLWFkanVzdFxuXG52YXIgY29sb3JBZGp1c3QgPSB7XG4gIG5vUHJlZmlsbDogWydjb2xvci1hZGp1c3QnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ2NvbG9yLWFkanVzdCcpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0JykgcmV0dXJuIHByZWZpeC5jc3MgKyBcInByaW50LVwiICsgcHJvcDtcbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxudmFyIHJlZ0V4cCA9IC9bLVxcc10rKC4pPy9nO1xuLyoqXG4gKiBSZXBsYWNlcyB0aGUgbGV0dGVyIHdpdGggdGhlIGNhcGl0YWwgbGV0dGVyXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ30gY1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gdG9VcHBlcihtYXRjaCwgYykge1xuICByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnO1xufVxuLyoqXG4gKiBDb252ZXJ0IGRhc2ggc2VwYXJhdGVkIHN0cmluZ3MgdG8gY2FtZWwtY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlZ0V4cCwgdG9VcHBlcik7XG59XG5cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIHBhc2NhbCBjYXNlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXNjYWxpemUoc3RyKSB7XG4gIHJldHVybiBjYW1lbGl6ZShcIi1cIiArIHN0cik7XG59XG5cbi8vIGJ1dCB3ZSBjYW4gdXNlIGEgbG9uZ2hhbmQgcHJvcGVydHkgaW5zdGVhZC5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1tYXNrXG5cbnZhciBtYXNrID0ge1xuICBub1ByZWZpbGw6IFsnbWFzayddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9ebWFzay8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHtcbiAgICAgIHZhciBsb25naGFuZCA9ICdtYXNrLWltYWdlJztcblxuICAgICAgaWYgKGNhbWVsaXplKGxvbmdoYW5kKSBpbiBzdHlsZSkge1xuICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZWZpeC5qcyArIHBhc2NhbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dGV4dC1vcmllbnRhdGlvblxuXG52YXIgdGV4dE9yaWVudGF0aW9uID0ge1xuICBub1ByZWZpbGw6IFsndGV4dC1vcmllbnRhdGlvbiddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAndGV4dC1vcmllbnRhdGlvbicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXgudmVuZG9yID09PSAnYXBwbGUnICYmICFwcmVmaXguaXNUb3VjaCkge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dHJhbnNmb3JtXG5cbnZhciB0cmFuc2Zvcm0gPSB7XG4gIG5vUHJlZmlsbDogWyd0cmFuc2Zvcm0nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKHByb3AgIT09ICd0cmFuc2Zvcm0nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2Zvcm0pIHtcbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zaXRpb25cblxudmFyIHRyYW5zaXRpb24gPSB7XG4gIG5vUHJlZmlsbDogWyd0cmFuc2l0aW9uJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wICE9PSAndHJhbnNpdGlvbicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXdyaXRpbmctbW9kZVxuXG52YXIgd3JpdGluZ01vZGUgPSB7XG4gIG5vUHJlZmlsbDogWyd3cml0aW5nLW1vZGUnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3dyaXRpbmctbW9kZScpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnIHx8IHByZWZpeC5qcyA9PT0gJ21zJyAmJiBwcmVmaXguYnJvd3NlciAhPT0gJ2VkZ2UnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD11c2VyLXNlbGVjdFxuXG52YXIgdXNlclNlbGVjdCA9IHtcbiAgbm9QcmVmaWxsOiBbJ3VzZXItc2VsZWN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd1c2VyLXNlbGVjdCcpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onIHx8IHByZWZpeC5qcyA9PT0gJ21zJyB8fCBwcmVmaXgudmVuZG9yID09PSAnYXBwbGUnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1tdWx0aWNvbHVtblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy80OTFcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvMTc3XG5cbnZhciBicmVha1Byb3BzT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eYnJlYWstLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0Jykge1xuICAgICAgdmFyIGpzUHJvcCA9IFwiV2Via2l0Q29sdW1uXCIgKyBwYXNjYWxpemUocHJvcCk7XG4gICAgICByZXR1cm4ganNQcm9wIGluIHN0eWxlID8gcHJlZml4LmNzcyArIFwiY29sdW1uLVwiICsgcHJvcCA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onKSB7XG4gICAgICB2YXIgX2pzUHJvcCA9IFwicGFnZVwiICsgcGFzY2FsaXplKHByb3ApO1xuXG4gICAgICByZXR1cm4gX2pzUHJvcCBpbiBzdHlsZSA/IFwicGFnZS1cIiArIHByb3AgOiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzMyNC5cblxudmFyIGlubGluZUxvZ2ljYWxPbGQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIGlmICghL14oYm9yZGVyfG1hcmdpbnxwYWRkaW5nKS1pbmxpbmUvLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96JykgcmV0dXJuIHByb3A7XG4gICAgdmFyIG5ld1Byb3AgPSBwcm9wLnJlcGxhY2UoJy1pbmxpbmUnLCAnJyk7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbi8vIENhbWVsaXphdGlvbiBpcyByZXF1aXJlZCBiZWNhdXNlIHdlIGNhbid0IHRlc3QgdXNpbmcuXG4vLyBDU1Mgc3ludGF4IGZvciBlLmcuIGluIEZGLlxuXG52YXIgdW5wcmVmaXhlZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgcmV0dXJuIGNhbWVsaXplKHByb3ApIGluIHN0eWxlID8gcHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG52YXIgcHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHZhciBwYXNjYWxpemVkID0gcGFzY2FsaXplKHByb3ApOyAvLyBSZXR1cm4gY3VzdG9tIENTUyB2YXJpYWJsZSB3aXRob3V0IHByZWZpeGluZy5cblxuICAgIGlmIChwcm9wWzBdID09PSAnLScpIHJldHVybiBwcm9wOyAvLyBSZXR1cm4gYWxyZWFkeSBwcmVmaXhlZCB2YWx1ZSB3aXRob3V0IHByZWZpeGluZy5cblxuICAgIGlmIChwcm9wWzBdID09PSAnLScgJiYgcHJvcFsxXSA9PT0gJy0nKSByZXR1cm4gcHJvcDtcbiAgICBpZiAocHJlZml4LmpzICsgcGFzY2FsaXplZCBpbiBzdHlsZSkgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wOyAvLyBUcnkgd2Via2l0IGZhbGxiYWNrLlxuXG4gICAgaWYgKHByZWZpeC5qcyAhPT0gJ1dlYmtpdCcgJiYgXCJXZWJraXRcIiArIHBhc2NhbGl6ZWQgaW4gc3R5bGUpIHJldHVybiBcIi13ZWJraXQtXCIgKyBwcm9wO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXNjcm9sbC1zbmFwXG5cbnZhciBzY3JvbGxTbmFwID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wLnN1YnN0cmluZygwLCAxMSkgIT09ICdzY3JvbGwtc25hcCcpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHtcbiAgICAgIHJldHVybiBcIlwiICsgcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1vdmVyc2Nyb2xsLWJlaGF2aW9yXG5cbnZhciBvdmVyc2Nyb2xsQmVoYXZpb3IgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdvdmVyc2Nyb2xsLWJlaGF2aW9yJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBcInNjcm9sbC1jaGFpbmluZ1wiO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG52YXIgcHJvcE1hcCA9IHtcbiAgJ2ZsZXgtZ3Jvdyc6ICdmbGV4LXBvc2l0aXZlJyxcbiAgJ2ZsZXgtc2hyaW5rJzogJ2ZsZXgtbmVnYXRpdmUnLFxuICAnZmxleC1iYXNpcyc6ICdmbGV4LXByZWZlcnJlZC1zaXplJyxcbiAgJ2p1c3RpZnktY29udGVudCc6ICdmbGV4LXBhY2snLFxuICBvcmRlcjogJ2ZsZXgtb3JkZXInLFxuICAnYWxpZ24taXRlbXMnOiAnZmxleC1hbGlnbicsXG4gICdhbGlnbi1jb250ZW50JzogJ2ZsZXgtbGluZS1wYWNrJyAvLyAnYWxpZ24tc2VsZicgaXMgaGFuZGxlZCBieSAnYWxpZ24tc2VsZicgcGx1Z2luLlxuXG59OyAvLyBTdXBwb3J0IG9sZCBmbGV4IHNwZWMgZnJvbSAyMDEyLlxuXG52YXIgZmxleDIwMTIgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHZhciBuZXdQcm9wID0gcHJvcE1hcFtwcm9wXTtcbiAgICBpZiAoIW5ld1Byb3ApIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgfVxufTtcblxudmFyIHByb3BNYXAkMSA9IHtcbiAgZmxleDogJ2JveC1mbGV4JyxcbiAgJ2ZsZXgtZ3Jvdyc6ICdib3gtZmxleCcsXG4gICdmbGV4LWRpcmVjdGlvbic6IFsnYm94LW9yaWVudCcsICdib3gtZGlyZWN0aW9uJ10sXG4gIG9yZGVyOiAnYm94LW9yZGluYWwtZ3JvdXAnLFxuICAnYWxpZ24taXRlbXMnOiAnYm94LWFsaWduJyxcbiAgJ2ZsZXgtZmxvdyc6IFsnYm94LW9yaWVudCcsICdib3gtZGlyZWN0aW9uJ10sXG4gICdqdXN0aWZ5LWNvbnRlbnQnOiAnYm94LXBhY2snXG59O1xudmFyIHByb3BLZXlzID0gT2JqZWN0LmtleXMocHJvcE1hcCQxKTtcblxudmFyIHByZWZpeENzcyA9IGZ1bmN0aW9uIHByZWZpeENzcyhwKSB7XG4gIHJldHVybiBwcmVmaXguY3NzICsgcDtcbn07IC8vIFN1cHBvcnQgb2xkIGZsZXggc3BlYyBmcm9tIDIwMDkuXG5cblxudmFyIGZsZXgyMDA5ID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIF9yZWYpIHtcbiAgICB2YXIgbXVsdGlwbGUgPSBfcmVmLm11bHRpcGxlO1xuXG4gICAgaWYgKHByb3BLZXlzLmluZGV4T2YocHJvcCkgPiAtMSkge1xuICAgICAgdmFyIG5ld1Byb3AgPSBwcm9wTWFwJDFbcHJvcF07XG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShuZXdQcm9wKSkge1xuICAgICAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtdWx0aXBsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1Byb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCEocHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3BbMF0pIGluIHN0eWxlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3UHJvcC5tYXAocHJlZml4Q3NzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIHBsdWdpbnMgPSBbXG4vLyAgIC4uLnBsdWdpbnMsXG4vLyAgICBicmVha1Byb3BzT2xkLFxuLy8gICAgaW5saW5lTG9naWNhbE9sZCxcbi8vICAgIHVucHJlZml4ZWQsXG4vLyAgICBwcmVmaXhlZCxcbi8vICAgIHNjcm9sbFNuYXAsXG4vLyAgICBmbGV4MjAxMixcbi8vICAgIGZsZXgyMDA5XG4vLyBdXG4vLyBQbHVnaW5zIHdpdGhvdXQgJ25vUHJlZmlsbCcgdmFsdWUsIGdvaW5nIGxhc3QuXG4vLyAnZmxleC0qJyBwbHVnaW5zIHNob3VsZCBiZSBhdCB0aGUgYm90dG9tLlxuLy8gJ2ZsZXgyMDA5JyBnb2luZyBhZnRlciAnZmxleDIwMTInLlxuLy8gJ3ByZWZpeGVkJyBnb2luZyBhZnRlciAndW5wcmVmaXhlZCdcblxudmFyIHBsdWdpbnMgPSBbYXBwZWFyZW5jZSwgY29sb3JBZGp1c3QsIG1hc2ssIHRleHRPcmllbnRhdGlvbiwgdHJhbnNmb3JtLCB0cmFuc2l0aW9uLCB3cml0aW5nTW9kZSwgdXNlclNlbGVjdCwgYnJlYWtQcm9wc09sZCwgaW5saW5lTG9naWNhbE9sZCwgdW5wcmVmaXhlZCwgcHJlZml4ZWQsIHNjcm9sbFNuYXAsIG92ZXJzY3JvbGxCZWhhdmlvciwgZmxleDIwMTIsIGZsZXgyMDA5XTtcbnZhciBwcm9wZXJ0eURldGVjdG9ycyA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLnN1cHBvcnRlZFByb3BlcnR5O1xufSkubWFwKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLnN1cHBvcnRlZFByb3BlcnR5O1xufSk7XG52YXIgbm9QcmVmaWxsID0gcGx1Z2lucy5maWx0ZXIoZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAubm9QcmVmaWxsO1xufSkucmVkdWNlKGZ1bmN0aW9uIChhLCBwKSB7XG4gIGEucHVzaC5hcHBseShhLCBfdG9Db25zdW1hYmxlQXJyYXkocC5ub1ByZWZpbGwpKTtcbiAgcmV0dXJuIGE7XG59LCBbXSk7XG5cbnZhciBlbDtcbnZhciBjYWNoZSA9IHt9O1xuXG5pZiAoaXNJbkJyb3dzZXIpIHtcbiAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7IC8vIFdlIHRlc3QgZXZlcnkgcHJvcGVydHkgb24gdmVuZG9yIHByZWZpeCByZXF1aXJlbWVudC5cbiAgLy8gT25jZSB0ZXN0ZWQsIHJlc3VsdCBpcyBjYWNoZWQuIEl0IGdpdmVzIHVzIHVwIHRvIDcwJSBwZXJmIGJvb3N0LlxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9lbGVtZW50LXN0eWxlLW9iamVjdC1hY2Nlc3MtdnMtcGxhaW4tb2JqZWN0XG4gIC8vXG4gIC8vIFByZWZpbGwgY2FjaGUgd2l0aCBrbm93biBjc3MgcHJvcGVydGllcyB0byByZWR1Y2UgYW1vdW50IG9mXG4gIC8vIHByb3BlcnRpZXMgd2UgbmVlZCB0byBmZWF0dXJlIHRlc3QgYXQgcnVudGltZS5cbiAgLy8gaHR0cDovL2Rhdmlkd2Fsc2gubmFtZS92ZW5kb3ItcHJlZml4XG5cbiAgdmFyIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnJyk7XG5cbiAgZm9yICh2YXIga2V5JDEgaW4gY29tcHV0ZWQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgaWYgKCFpc05hTihrZXkkMSkpIGNhY2hlW2NvbXB1dGVkW2tleSQxXV0gPSBjb21wdXRlZFtrZXkkMV07XG4gIH0gLy8gUHJvcGVydGllcyB0aGF0IGNhbm5vdCBiZSBjb3JyZWN0bHkgZGV0ZWN0ZWQgdXNpbmcgdGhlXG4gIC8vIGNhY2hlIHByZWZpbGwgbWV0aG9kLlxuXG5cbiAgbm9QcmVmaWxsLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gZGVsZXRlIGNhY2hlW3hdO1xuICB9KTtcbn1cbi8qKlxuICogVGVzdCBpZiBhIHByb3BlcnR5IGlzIHN1cHBvcnRlZCwgcmV0dXJucyBzdXBwb3J0ZWQgcHJvcGVydHkgd2l0aCB2ZW5kb3JcbiAqIHByZWZpeCBpZiByZXF1aXJlZC4gUmV0dXJucyBgZmFsc2VgIGlmIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3AgZGFzaCBzZXBhcmF0ZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge1N0cmluZ3xCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIGlmICghZWwpIHJldHVybiBwcm9wOyAvLyBSZW1vdmUgY2FjaGUgZm9yIGJlbmNobWFyayB0ZXN0cyBvciByZXR1cm4gcHJvcGVydHkgZnJvbSB0aGUgY2FjaGUuXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnYmVuY2htYXJrJyAmJiBjYWNoZVtwcm9wXSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGNhY2hlW3Byb3BdO1xuICB9IC8vIENoZWNrIGlmICd0cmFuc2l0aW9uJyBvciAndHJhbnNmb3JtJyBuYXRpdmVseSBzdXBwb3J0ZWQgaW4gYnJvd3Nlci5cblxuXG4gIGlmIChwcm9wID09PSAndHJhbnNpdGlvbicgfHwgcHJvcCA9PT0gJ3RyYW5zZm9ybScpIHtcbiAgICBvcHRpb25zW3Byb3BdID0gcHJvcCBpbiBlbC5zdHlsZTtcbiAgfSAvLyBGaW5kIGEgcGx1Z2luIGZvciBjdXJyZW50IHByZWZpeCBwcm9wZXJ0eS5cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcGVydHlEZXRlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjYWNoZVtwcm9wXSA9IHByb3BlcnR5RGV0ZWN0b3JzW2ldKHByb3AsIGVsLnN0eWxlLCBvcHRpb25zKTsgLy8gQnJlYWsgbG9vcCwgaWYgdmFsdWUgZm91bmQuXG5cbiAgICBpZiAoY2FjaGVbcHJvcF0pIGJyZWFrO1xuICB9IC8vIFJlc2V0IHN0eWxlcyBmb3IgY3VycmVudCBwcm9wZXJ0eS5cbiAgLy8gRmlyZWZveCBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBmb3IgaW52YWxpZCBwcm9wZXJ0aWVzLCBlLmcuLCBcIjBcIi5cblxuXG4gIHRyeSB7XG4gICAgZWwuc3R5bGVbcHJvcF0gPSAnJztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlW3Byb3BdO1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIHRyYW5zaXRpb25Qcm9wZXJ0aWVzID0ge1xuICB0cmFuc2l0aW9uOiAxLFxuICAndHJhbnNpdGlvbi1wcm9wZXJ0eSc6IDEsXG4gICctd2Via2l0LXRyYW5zaXRpb24nOiAxLFxuICAnLXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5JzogMVxufTtcbnZhciB0cmFuc1Byb3BzUmVnRXhwID0gLyheXFxzKltcXHctXSspfCwgKFxccypbXFx3LV0rKSg/IVteKCldKlxcKSkvZztcbnZhciBlbCQxO1xuLyoqXG4gKiBSZXR1cm5zIHByZWZpeGVkIHZhbHVlIHRyYW5zaXRpb24vdHJhbnNmb3JtIGlmIG5lZWRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWF0Y2hcbiAqIEBwYXJhbSB7U3RyaW5nfSBwMVxuICogQHBhcmFtIHtTdHJpbmd9IHAyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2sobWF0Y2gsIHAxLCBwMikge1xuICBpZiAocDEgPT09ICd2YXInKSByZXR1cm4gJ3Zhcic7XG4gIGlmIChwMSA9PT0gJ2FsbCcpIHJldHVybiAnYWxsJztcbiAgaWYgKHAyID09PSAnYWxsJykgcmV0dXJuICcsIGFsbCc7XG4gIHZhciBwcmVmaXhlZFZhbHVlID0gcDEgPyBzdXBwb3J0ZWRQcm9wZXJ0eShwMSkgOiBcIiwgXCIgKyBzdXBwb3J0ZWRQcm9wZXJ0eShwMik7XG4gIGlmICghcHJlZml4ZWRWYWx1ZSkgcmV0dXJuIHAxIHx8IHAyO1xuICByZXR1cm4gcHJlZml4ZWRWYWx1ZTtcbn1cblxuaWYgKGlzSW5Ccm93c2VyKSBlbCQxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuLyoqXG4gKiBSZXR1cm5zIHByZWZpeGVkIHZhbHVlIGlmIG5lZWRlZC4gUmV0dXJucyBgZmFsc2VgIGlmIHZhbHVlIGlzIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge1N0cmluZ3xCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgLy8gRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgdmFyIHByZWZpeGVkVmFsdWUgPSB2YWx1ZTtcbiAgaWYgKCFlbCQxIHx8IHByb3BlcnR5ID09PSAnY29udGVudCcpIHJldHVybiB2YWx1ZTsgLy8gSXQgaXMgYSBzdHJpbmcgb3IgYSBudW1iZXIgYXMgYSBzdHJpbmcgbGlrZSAnMScuXG4gIC8vIFdlIHdhbnQgb25seSBwcmVmaXhhYmxlIHZhbHVlcyBoZXJlLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG5cbiAgaWYgKHR5cGVvZiBwcmVmaXhlZFZhbHVlICE9PSAnc3RyaW5nJyB8fCAhaXNOYU4ocGFyc2VJbnQocHJlZml4ZWRWYWx1ZSwgMTApKSkge1xuICAgIHJldHVybiBwcmVmaXhlZFZhbHVlO1xuICB9IC8vIENyZWF0ZSBjYWNoZSBrZXkgZm9yIGN1cnJlbnQgdmFsdWUuXG5cblxuICB2YXIgY2FjaGVLZXkgPSBwcm9wZXJ0eSArIHByZWZpeGVkVmFsdWU7IC8vIFJlbW92ZSBjYWNoZSBmb3IgYmVuY2htYXJrIHRlc3RzIG9yIHJldHVybiB2YWx1ZSBmcm9tIGNhY2hlLlxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGUkMVtjYWNoZUtleV0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZSQxW2NhY2hlS2V5XTtcbiAgfSAvLyBJRSBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBpbiBzb21lIGNhc2VzLCBmb3IgZS5nLiBzdHlsZS5jb250ZW50ID0gJ2JhcicuXG5cblxuICB0cnkge1xuICAgIC8vIFRlc3QgdmFsdWUgYXMgaXQgaXMuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cbiAgICBjYWNoZSQxW2NhY2hlS2V5XSA9IGZhbHNlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zaXRpb24tcHJvcGVydHknIHByb3BlcnR5LlxuXG5cbiAgaWYgKHRyYW5zaXRpb25Qcm9wZXJ0aWVzW3Byb3BlcnR5XSkge1xuICAgIHByZWZpeGVkVmFsdWUgPSBwcmVmaXhlZFZhbHVlLnJlcGxhY2UodHJhbnNQcm9wc1JlZ0V4cCwgcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAvLyBWYWx1ZSB3aXRoIGEgdmVuZG9yIHByZWZpeC5cbiAgICBwcmVmaXhlZFZhbHVlID0gcHJlZml4LmNzcyArIHByZWZpeGVkVmFsdWU7IC8vIEhhcmRjb2RlIHRlc3QgdG8gY29udmVydCBcImZsZXhcIiB0byBcIi1tcy1mbGV4Ym94XCIgZm9yIElFMTAuXG5cbiAgICBpZiAocHJlZml4ZWRWYWx1ZSA9PT0gJy1tcy1mbGV4JykgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSAnLW1zLWZsZXhib3gnOyAvLyBUZXN0IHByZWZpeGVkIHZhbHVlLlxuXG4gICAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhlZFZhbHVlOyAvLyBSZXR1cm4gZmFsc2UgaWYgdmFsdWUgbm90IHN1cHBvcnRlZC5cblxuICAgIGlmIChlbCQxLnN0eWxlW3Byb3BlcnR5XSA9PT0gJycpIHtcbiAgICAgIGNhY2hlJDFbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IC8vIFJlc2V0IHN0eWxlcyBmb3IgY3VycmVudCBwcm9wZXJ0eS5cblxuXG4gIGVsJDEuc3R5bGVbcHJvcGVydHldID0gJyc7IC8vIFdyaXRlIGN1cnJlbnQgdmFsdWUgdG8gY2FjaGUuXG5cbiAgY2FjaGUkMVtjYWNoZUtleV0gPSBwcmVmaXhlZFZhbHVlO1xuICByZXR1cm4gY2FjaGUkMVtjYWNoZUtleV07XG59XG5cbmV4cG9ydCB7IHByZWZpeCwgc3VwcG9ydGVkS2V5ZnJhbWVzLCBzdXBwb3J0ZWRQcm9wZXJ0eSwgc3VwcG9ydGVkVmFsdWUgfTtcbiIsImltcG9ydCB7IHN1cHBvcnRlZEtleWZyYW1lcywgc3VwcG9ydGVkVmFsdWUsIHN1cHBvcnRlZFByb3BlcnR5IH0gZnJvbSAnY3NzLXZlbmRvcic7XG5pbXBvcnQgeyB0b0Nzc1ZhbHVlIH0gZnJvbSAnanNzJztcblxuLyoqXG4gKiBBZGQgdmVuZG9yIHByZWZpeCB0byBhIHByb3BlcnR5IG5hbWUgd2hlbiBuZWVkZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBqc3NWZW5kb3JQcmVmaXhlcigpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHZhciBhdFJ1bGUgPSBydWxlO1xuICAgICAgYXRSdWxlLmF0ID0gc3VwcG9ydGVkS2V5ZnJhbWVzKGF0UnVsZS5hdCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlZml4U3R5bGUoc3R5bGUpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcblxuICAgICAgaWYgKHByb3AgPT09ICdmYWxsYmFja3MnICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHN0eWxlW3Byb3BdID0gdmFsdWUubWFwKHByZWZpeFN0eWxlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2VQcm9wID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IHN1cHBvcnRlZFByb3BlcnR5KHByb3ApO1xuICAgICAgaWYgKHN1cHBvcnRlZFByb3AgJiYgc3VwcG9ydGVkUHJvcCAhPT0gcHJvcCkgY2hhbmdlUHJvcCA9IHRydWU7XG4gICAgICB2YXIgY2hhbmdlVmFsdWUgPSBmYWxzZTtcbiAgICAgIHZhciBzdXBwb3J0ZWRWYWx1ZSQxID0gc3VwcG9ydGVkVmFsdWUoc3VwcG9ydGVkUHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpO1xuICAgICAgaWYgKHN1cHBvcnRlZFZhbHVlJDEgJiYgc3VwcG9ydGVkVmFsdWUkMSAhPT0gdmFsdWUpIGNoYW5nZVZhbHVlID0gdHJ1ZTtcblxuICAgICAgaWYgKGNoYW5nZVByb3AgfHwgY2hhbmdlVmFsdWUpIHtcbiAgICAgICAgaWYgKGNoYW5nZVByb3ApIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgc3R5bGVbc3VwcG9ydGVkUHJvcCB8fCBwcm9wXSA9IHN1cHBvcnRlZFZhbHVlJDEgfHwgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgcmV0dXJuIHByZWZpeFN0eWxlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gc3VwcG9ydGVkVmFsdWUocHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpIHx8IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlLFxuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1ZlbmRvclByZWZpeGVyO1xuIiwiLyoqXG4gKiBTb3J0IHByb3BzIGJ5IGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24ganNzUHJvcHNTb3J0KCkge1xuICB2YXIgc29ydCA9IGZ1bmN0aW9uIHNvcnQocHJvcDAsIHByb3AxKSB7XG4gICAgaWYgKHByb3AwLmxlbmd0aCA9PT0gcHJvcDEubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gcHJvcDAgPiBwcm9wMSA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDAubGVuZ3RoIC0gcHJvcDEubGVuZ3RoO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgICB2YXIgbmV3U3R5bGUgPSB7fTtcbiAgICAgIHZhciBwcm9wcyA9IE9iamVjdC5rZXlzKHN0eWxlKS5zb3J0KHNvcnQpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5ld1N0eWxlW3Byb3BzW2ldXSA9IHN0eWxlW3Byb3BzW2ldXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1N0eWxlO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzUHJvcHNTb3J0O1xuIiwiaW1wb3J0IGZ1bmN0aW9ucyBmcm9tICdqc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24nO1xuaW1wb3J0IGdsb2JhbCBmcm9tICdqc3MtcGx1Z2luLWdsb2JhbCc7XG5pbXBvcnQgbmVzdGVkIGZyb20gJ2pzcy1wbHVnaW4tbmVzdGVkJztcbmltcG9ydCBjYW1lbENhc2UgZnJvbSAnanNzLXBsdWdpbi1jYW1lbC1jYXNlJztcbmltcG9ydCBkZWZhdWx0VW5pdCBmcm9tICdqc3MtcGx1Z2luLWRlZmF1bHQtdW5pdCc7XG5pbXBvcnQgdmVuZG9yUHJlZml4ZXIgZnJvbSAnanNzLXBsdWdpbi12ZW5kb3ItcHJlZml4ZXInO1xuaW1wb3J0IHByb3BzU29ydCBmcm9tICdqc3MtcGx1Z2luLXByb3BzLXNvcnQnOyAvLyBTdWJzZXQgb2YganNzLXByZXNldC1kZWZhdWx0IHdpdGggb25seSB0aGUgcGx1Z2lucyB0aGUgTWF0ZXJpYWwtVUkgY29tcG9uZW50cyBhcmUgdXNpbmcuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGpzc1ByZXNldCgpIHtcbiAgcmV0dXJuIHtcbiAgICBwbHVnaW5zOiBbZnVuY3Rpb25zKCksIGdsb2JhbCgpLCBuZXN0ZWQoKSwgY2FtZWxDYXNlKCksIGRlZmF1bHRVbml0KCksIC8vIERpc2FibGUgdGhlIHZlbmRvciBwcmVmaXhlciBzZXJ2ZXItc2lkZSwgaXQgZG9lcyBub3RoaW5nLlxuICAgIC8vIFRoaXMgd2F5LCB3ZSBjYW4gZ2V0IGEgcGVyZm9ybWFuY2UgYm9vc3QuXG4gICAgLy8gSW4gdGhlIGRvY3VtZW50YXRpb24sIHdlIGFyZSB1c2luZyBgYXV0b3ByZWZpeGVyYCB0byBzb2x2ZSB0aGlzIHByb2JsZW0uXG4gICAgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogdmVuZG9yUHJlZml4ZXIoKSwgcHJvcHNTb3J0KCldXG4gIH07XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lIGZyb20gJy4uL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lJztcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJ2pzcyc7XG5pbXBvcnQganNzUHJlc2V0IGZyb20gJy4uL2pzc1ByZXNldCc7IC8vIERlZmF1bHQgSlNTIGluc3RhbmNlLlxuXG52YXIganNzID0gY3JlYXRlKGpzc1ByZXNldCgpKTsgLy8gVXNlIGEgc2luZ2xldG9uIG9yIHRoZSBwcm92aWRlZCBvbmUgYnkgdGhlIGNvbnRleHQuXG4vL1xuLy8gVGhlIGNvdW50ZXItYmFzZWQgYXBwcm9hY2ggZG9lc24ndCB0b2xlcmF0ZSBhbnkgbWlzdGFrZS5cbi8vIEl0J3MgbXVjaCBzYWZlciB0byB1c2UgdGhlIHNhbWUgY291bnRlciBldmVyeXdoZXJlLlxuXG52YXIgZ2VuZXJhdGVDbGFzc05hbWUgPSBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSgpOyAvLyBFeHBvcnRlZCBmb3IgdGVzdCBwdXJwb3Nlc1xuXG5leHBvcnQgdmFyIHNoZWV0c01hbmFnZXIgPSBuZXcgTWFwKCk7XG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGRpc2FibGVHZW5lcmF0aW9uOiBmYWxzZSxcbiAgZ2VuZXJhdGVDbGFzc05hbWU6IGdlbmVyYXRlQ2xhc3NOYW1lLFxuICBqc3M6IGpzcyxcbiAgc2hlZXRzQ2FjaGU6IG51bGwsXG4gIHNoZWV0c01hbmFnZXI6IHNoZWV0c01hbmFnZXIsXG4gIHNoZWV0c1JlZ2lzdHJ5OiBudWxsXG59O1xuZXhwb3J0IHZhciBTdHlsZXNDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChkZWZhdWx0T3B0aW9ucyk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFN0eWxlc0NvbnRleHQuZGlzcGxheU5hbWUgPSAnU3R5bGVzQ29udGV4dCc7XG59XG5cbnZhciBpbmplY3RGaXJzdE5vZGU7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdHlsZXNQcm92aWRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRpbmplY3RGaXJzdCA9IHByb3BzLmluamVjdEZpcnN0LFxuICAgICAgaW5qZWN0Rmlyc3QgPSBfcHJvcHMkaW5qZWN0Rmlyc3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGluamVjdEZpcnN0LFxuICAgICAgX3Byb3BzJGRpc2FibGVHZW5lcmF0ID0gcHJvcHMuZGlzYWJsZUdlbmVyYXRpb24sXG4gICAgICBkaXNhYmxlR2VuZXJhdGlvbiA9IF9wcm9wcyRkaXNhYmxlR2VuZXJhdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUdlbmVyYXQsXG4gICAgICBsb2NhbE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiaW5qZWN0Rmlyc3RcIiwgXCJkaXNhYmxlR2VuZXJhdGlvblwiXSk7XG5cbiAgdmFyIG91dGVyT3B0aW9ucyA9IFJlYWN0LnVzZUNvbnRleHQoU3R5bGVzQ29udGV4dCk7XG5cbiAgdmFyIGNvbnRleHQgPSBfZXh0ZW5kcyh7fSwgb3V0ZXJPcHRpb25zLCB7XG4gICAgZGlzYWJsZUdlbmVyYXRpb246IGRpc2FibGVHZW5lcmF0aW9uXG4gIH0sIGxvY2FsT3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgJiYgIWNvbnRleHQuc2hlZXRzTWFuYWdlcikge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBuZWVkIHRvIHVzZSB0aGUgU2VydmVyU3R5bGVTaGVldHMgQVBJIHdoZW4gcmVuZGVyaW5nIG9uIHRoZSBzZXJ2ZXIuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoY29udGV4dC5qc3Mub3B0aW9ucy5pbnNlcnRpb25Qb2ludCAmJiBpbmplY3RGaXJzdCkge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBjYW5ub3QgdXNlIGEgY3VzdG9tIGluc2VydGlvblBvaW50IGFuZCA8U3R5bGVzQ29udGV4dCBpbmplY3RGaXJzdD4gYXQgdGhlIHNhbWUgdGltZS4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChpbmplY3RGaXJzdCAmJiBsb2NhbE9wdGlvbnMuanNzKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogWW91IGNhbm5vdCB1c2UgdGhlIGpzcyBhbmQgaW5qZWN0Rmlyc3QgcHJvcHMgYXQgdGhlIHNhbWUgdGltZS4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbnRleHQuanNzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgJiYgaW5qZWN0Rmlyc3QgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoIWluamVjdEZpcnN0Tm9kZSkge1xuICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkO1xuICAgICAgaW5qZWN0Rmlyc3ROb2RlID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnbXVpLWluamVjdC1maXJzdCcpO1xuICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoaW5qZWN0Rmlyc3ROb2RlLCBoZWFkLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIGNvbnRleHQuanNzID0gY3JlYXRlKHtcbiAgICAgIHBsdWdpbnM6IGpzc1ByZXNldCgpLnBsdWdpbnMsXG4gICAgICBpbnNlcnRpb25Qb2ludDogaW5qZWN0Rmlyc3ROb2RlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3R5bGVzQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0XG4gIH0sIGNoaWxkcmVuKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogWW91IGNhbiBkaXNhYmxlIHRoZSBnZW5lcmF0aW9uIG9mIHRoZSBzdHlsZXMgd2l0aCB0aGlzIG9wdGlvbi5cbiAgICogSXQgY2FuIGJlIHVzZWZ1bCB3aGVuIHRyYXZlcnNpbmcgdGhlIFJlYWN0IHRyZWUgb3V0c2lkZSBvZiB0aGUgSFRNTFxuICAgKiByZW5kZXJpbmcgc3RlcCBvbiB0aGUgc2VydmVyLlxuICAgKiBMZXQncyBzYXkgeW91IGFyZSB1c2luZyByZWFjdC1hcG9sbG8gdG8gZXh0cmFjdCBhbGxcbiAgICogdGhlIHF1ZXJpZXMgbWFkZSBieSB0aGUgaW50ZXJmYWNlIHNlcnZlci1zaWRlIC0geW91IGNhbiBzaWduaWZpY2FudGx5IHNwZWVkIHVwIHRoZSB0cmF2ZXJzYWwgd2l0aCB0aGlzIHByb3AuXG4gICAqL1xuICBkaXNhYmxlR2VuZXJhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEpTUydzIGNsYXNzIG5hbWUgZ2VuZXJhdG9yLlxuICAgKi9cbiAgZ2VuZXJhdGVDbGFzc05hbWU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBsYXN0IGluIHRoZSA8aGVhZD4gZWxlbWVudCBvZiB0aGUgcGFnZS5cbiAgICogQXMgYSByZXN1bHQsIHRoZXkgZ2FpbiBtb3JlIHNwZWNpZmljaXR5IHRoYW4gYW55IG90aGVyIHN0eWxlIHNoZWV0LlxuICAgKiBJZiB5b3Ugd2FudCB0byBvdmVycmlkZSBNYXRlcmlhbC1VSSdzIHN0eWxlcywgc2V0IHRoaXMgcHJvcC5cbiAgICovXG4gIGluamVjdEZpcnN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSlNTJ3MgaW5zdGFuY2UuXG4gICAqL1xuICBqc3M6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBCZXRhIGZlYXR1cmUuXG4gICAqXG4gICAqIENhY2hlIGZvciB0aGUgc2hlZXRzLlxuICAgKi9cbiAgc2hlZXRzQ2FjaGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogVGhlIHNoZWV0c01hbmFnZXIgaXMgdXNlZCB0byBkZWR1cGxpY2F0ZSBzdHlsZSBzaGVldCBpbmplY3Rpb24gaW4gdGhlIHBhZ2UuXG4gICAqIEl0J3MgZGVkdXBsaWNhdGluZyB1c2luZyB0aGUgKHRoZW1lLCBzdHlsZXMpIGNvdXBsZS5cbiAgICogT24gdGhlIHNlcnZlciwgeW91IHNob3VsZCBwcm92aWRlIGEgbmV3IGluc3RhbmNlIGZvciBlYWNoIHJlcXVlc3QuXG4gICAqL1xuICBzaGVldHNNYW5hZ2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIENvbGxlY3QgdGhlIHNoZWV0cy5cbiAgICovXG4gIHNoZWV0c1JlZ2lzdHJ5OiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMgPSBleGFjdFByb3AoU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzKSA6IHZvaWQgMDtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXG4vLyBHbG9iYWwgaW5kZXggY291bnRlciB0byBwcmVzZXJ2ZSBzb3VyY2Ugb3JkZXIuXG4vLyBXZSBjcmVhdGUgdGhlIHN0eWxlIHNoZWV0IGR1cmluZyB0aGUgY3JlYXRpb24gb2YgdGhlIGNvbXBvbmVudCxcbi8vIGNoaWxkcmVuIGFyZSBoYW5kbGVkIGFmdGVyIHRoZSBwYXJlbnRzLCBzbyB0aGUgb3JkZXIgb2Ygc3R5bGUgZWxlbWVudHMgd291bGQgYmUgcGFyZW50LT5jaGlsZC5cbi8vIEl0IGlzIGEgcHJvYmxlbSB0aG91Z2ggd2hlbiBhIHBhcmVudCBwYXNzZXMgYSBjbGFzc05hbWVcbi8vIHdoaWNoIG5lZWRzIHRvIG92ZXJyaWRlIGFueSBjaGlsZCdzIHN0eWxlcy5cbi8vIFN0eWxlU2hlZXQgb2YgdGhlIGNoaWxkIGhhcyBhIGhpZ2hlciBzcGVjaWZpY2l0eSwgYmVjYXVzZSBvZiB0aGUgc291cmNlIG9yZGVyLlxuLy8gU28gb3VyIHNvbHV0aW9uIGlzIHRvIHJlbmRlciBzaGVldHMgdGhlbSBpbiB0aGUgcmV2ZXJzZSBvcmRlciBjaGlsZC0+c2hlZXQsIHNvXG4vLyB0aGF0IHBhcmVudCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHkuXG52YXIgaW5kZXhDb3VudGVyID0gLTFlOTtcbmV4cG9ydCBmdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gIGluZGV4Q291bnRlciArPSAxO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGluZGV4Q291bnRlciA+PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIGluZGV4Q291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleENvdW50ZXI7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChpdGVtKSB7XG4gIHJldHVybiBpdGVtICYmIF90eXBlb2YoaXRlbSkgPT09ICdvYmplY3QnICYmIGl0ZW0uY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge1xuICAgIGNsb25lOiB0cnVlXG4gIH07XG4gIHZhciBvdXRwdXQgPSBvcHRpb25zLmNsb25lID8gX2V4dGVuZHMoe30sIHRhcmdldCkgOiB0YXJnZXQ7XG5cbiAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiBpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLy8gQXZvaWQgcHJvdG90eXBlIHBvbGx1dGlvblxuICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgJiYga2V5IGluIHRhcmdldCkge1xuICAgICAgICBvdXRwdXRba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG5vb3BUaGVtZSBmcm9tICcuL25vb3BUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTdHlsZXNDcmVhdG9yKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgdGhlbWluZ0VuYWJsZWQgPSB0eXBlb2Ygc3R5bGVzT3JDcmVhdG9yID09PSAnZnVuY3Rpb24nO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKF90eXBlb2Yoc3R5bGVzT3JDcmVhdG9yKSAhPT0gJ29iamVjdCcgJiYgIXRoZW1pbmdFbmFibGVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgc3R5bGVzYCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgbmVlZCB0byBwcm92aWRlIGEgZnVuY3Rpb24gZ2VuZXJhdGluZyB0aGUgc3R5bGVzIG9yIGEgc3R5bGVzIG9iamVjdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSh0aGVtZSwgbmFtZSkge1xuICAgICAgdmFyIHN0eWxlcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgc3R5bGVzID0gdGhlbWluZ0VuYWJsZWQgPyBzdHlsZXNPckNyZWF0b3IodGhlbWUpIDogc3R5bGVzT3JDcmVhdG9yO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoZW1pbmdFbmFibGVkID09PSB0cnVlICYmIHRoZW1lID09PSBub29wVGhlbWUpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHByZXBlbmQgZXJyb3IgbWVzc2FnZS9uYW1lIGluc3RlYWRcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIGBzdHlsZXNgIGFyZ3VtZW50IHByb3ZpZGVkIGlzIGludmFsaWQuJywgJ1lvdSBhcmUgcHJvdmlkaW5nIGEgZnVuY3Rpb24gd2l0aG91dCBhIHRoZW1lIGluIHRoZSBjb250ZXh0LicsICdPbmUgb2YgdGhlIHBhcmVudCBlbGVtZW50cyBuZWVkcyB0byB1c2UgYSBUaGVtZVByb3ZpZGVyLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG5cbiAgICAgIGlmICghbmFtZSB8fCAhdGhlbWUub3ZlcnJpZGVzIHx8ICF0aGVtZS5vdmVycmlkZXNbbmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgIH1cblxuICAgICAgdmFyIG92ZXJyaWRlcyA9IHRoZW1lLm92ZXJyaWRlc1tuYW1lXTtcblxuICAgICAgdmFyIHN0eWxlc1dpdGhPdmVycmlkZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzKTtcblxuICAgICAgT2JqZWN0LmtleXMob3ZlcnJpZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoIXN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFlvdSBhcmUgdHJ5aW5nIHRvIG92ZXJyaWRlIGEgc3R5bGUgdGhhdCBkb2VzIG5vdCBleGlzdC4nLCBcIkZpeCB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBrZXkgb2YgYHRoZW1lLm92ZXJyaWRlcy5cIikuY29uY2F0KG5hbWUsIFwiYC5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0gPSBkZWVwbWVyZ2Uoc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldLCBvdmVycmlkZXNba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzdHlsZXNXaXRoT3ZlcnJpZGVzO1xuICAgIH0sXG4gICAgb3B0aW9uczoge31cbiAgfTtcbn0iLCIvLyBXZSB1c2UgdGhlIHNhbWUgZW1wdHkgb2JqZWN0IHRvIHJlZiBjb3VudCB0aGUgc3R5bGVzIHRoYXQgZG9uJ3QgbmVlZCBhIHRoZW1lIG9iamVjdC5cbnZhciBub29wVGhlbWUgPSB7fTtcbmV4cG9ydCBkZWZhdWx0IG5vb3BUaGVtZTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0RHluYW1pY1N0eWxlcyB9IGZyb20gJ2pzcyc7XG5pbXBvcnQgbWVyZ2VDbGFzc2VzIGZyb20gJy4uL21lcmdlQ2xhc3Nlcyc7XG5pbXBvcnQgbXVsdGlLZXlTdG9yZSBmcm9tICcuL211bHRpS2V5U3RvcmUnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCB7IFN0eWxlc0NvbnRleHQgfSBmcm9tICcuLi9TdHlsZXNQcm92aWRlcic7XG5pbXBvcnQgeyBpbmNyZW1lbnQgfSBmcm9tICcuL2luZGV4Q291bnRlcic7XG5pbXBvcnQgZ2V0U3R5bGVzQ3JlYXRvciBmcm9tICcuLi9nZXRTdHlsZXNDcmVhdG9yJztcbmltcG9ydCBub29wVGhlbWUgZnJvbSAnLi4vZ2V0U3R5bGVzQ3JlYXRvci9ub29wVGhlbWUnO1xuXG5mdW5jdGlvbiBnZXRDbGFzc2VzKF9yZWYsIGNsYXNzZXMsIENvbXBvbmVudCkge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYuc3R5bGVzT3B0aW9ucztcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybiBjbGFzc2VzIHx8IHt9O1xuICB9XG5cbiAgaWYgKCFzdGF0ZS5jYWNoZUNsYXNzZXMpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMgPSB7XG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGZpbmFsaXplZCBjbGFzc2VzIHZhbHVlLlxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGxhc3QgdXNlZCBjbGFzc2VzIHByb3AgcG9pbnRlci5cbiAgICAgIGxhc3RQcm9wOiBudWxsLFxuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgcmVuZGVyZWQgY2xhc3NlcyBwb2ludGVyLlxuICAgICAgbGFzdEpTUzoge31cbiAgICB9O1xuICB9IC8vIFRyYWNrcyBpZiBlaXRoZXIgdGhlIHJlbmRlcmVkIGNsYXNzZXMgb3IgY2xhc3NlcyBwcm9wIGhhcyBjaGFuZ2VkLFxuICAvLyByZXF1aXJpbmcgdGhlIGdlbmVyYXRpb24gb2YgYSBuZXcgZmluYWxpemVkIGNsYXNzZXMgb2JqZWN0LlxuXG5cbiAgdmFyIGdlbmVyYXRlID0gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLmNsYXNzZXMgIT09IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MgPSBzdGF0ZS5jbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjbGFzc2VzICE9PSBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3ApIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdFByb3AgPSBjbGFzc2VzO1xuICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChnZW5lcmF0ZSkge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy52YWx1ZSA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MsXG4gICAgICBuZXdDbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnRcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5jYWNoZUNsYXNzZXMudmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaChfcmVmMiwgcHJvcHMpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICB0aGVtZSA9IF9yZWYyLnRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWYyLnN0eWxlc09wdGlvbnMsXG4gICAgICBzdHlsZXNDcmVhdG9yID0gX3JlZjIuc3R5bGVzQ3JlYXRvcixcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuXG4gIGlmIChzdHlsZXNPcHRpb25zLmRpc2FibGVHZW5lcmF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoZWV0TWFuYWdlciA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuXG4gIGlmICghc2hlZXRNYW5hZ2VyKSB7XG4gICAgc2hlZXRNYW5hZ2VyID0ge1xuICAgICAgcmVmczogMCxcbiAgICAgIHN0YXRpY1NoZWV0OiBudWxsLFxuICAgICAgZHluYW1pY1N0eWxlczogbnVsbFxuICAgIH07XG4gICAgbXVsdGlLZXlTdG9yZS5zZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc2hlZXRNYW5hZ2VyKTtcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIHN0eWxlc0NyZWF0b3Iub3B0aW9ucywgc3R5bGVzT3B0aW9ucywge1xuICAgIHRoZW1lOiB0aGVtZSxcbiAgICBmbGlwOiB0eXBlb2Ygc3R5bGVzT3B0aW9ucy5mbGlwID09PSAnYm9vbGVhbicgPyBzdHlsZXNPcHRpb25zLmZsaXAgOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnXG4gIH0pO1xuXG4gIG9wdGlvbnMuZ2VuZXJhdGVJZCA9IG9wdGlvbnMuc2VydmVyR2VuZXJhdGVDbGFzc05hbWUgfHwgb3B0aW9ucy5nZW5lcmF0ZUNsYXNzTmFtZTtcbiAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gc3R5bGVzT3B0aW9ucy5zaGVldHNSZWdpc3RyeTtcblxuICBpZiAoc2hlZXRNYW5hZ2VyLnJlZnMgPT09IDApIHtcbiAgICB2YXIgc3RhdGljU2hlZXQ7XG5cbiAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgc3RhdGljU2hlZXQgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlcyA9IHN0eWxlc0NyZWF0b3IuY3JlYXRlKHRoZW1lLCBuYW1lKTtcblxuICAgIGlmICghc3RhdGljU2hlZXQpIHtcbiAgICAgIHN0YXRpY1NoZWV0ID0gc3R5bGVzT3B0aW9ucy5qc3MuY3JlYXRlU3R5bGVTaGVldChzdHlsZXMsIF9leHRlbmRzKHtcbiAgICAgICAgbGluazogZmFsc2VcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICAgIHN0YXRpY1NoZWV0LmF0dGFjaCgpO1xuXG4gICAgICBpZiAoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSkge1xuICAgICAgICBtdWx0aUtleVN0b3JlLnNldChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSwgc3RhdGljU2hlZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkuYWRkKHN0YXRpY1NoZWV0KTtcbiAgICB9XG5cbiAgICBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQgPSBzdGF0aWNTaGVldDtcbiAgICBzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcyA9IGdldER5bmFtaWNTdHlsZXMoc3R5bGVzKTtcbiAgfVxuXG4gIGlmIChzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcykge1xuICAgIHZhciBkeW5hbWljU2hlZXQgPSBzdHlsZXNPcHRpb25zLmpzcy5jcmVhdGVTdHlsZVNoZWV0KHNoZWV0TWFuYWdlci5keW5hbWljU3R5bGVzLCBfZXh0ZW5kcyh7XG4gICAgICBsaW5rOiB0cnVlXG4gICAgfSwgb3B0aW9ucykpO1xuICAgIGR5bmFtaWNTaGVldC51cGRhdGUocHJvcHMpO1xuICAgIGR5bmFtaWNTaGVldC5hdHRhY2goKTtcbiAgICBzdGF0ZS5keW5hbWljU2hlZXQgPSBkeW5hbWljU2hlZXQ7XG4gICAgc3RhdGUuY2xhc3NlcyA9IG1lcmdlQ2xhc3Nlcyh7XG4gICAgICBiYXNlQ2xhc3Nlczogc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0LmNsYXNzZXMsXG4gICAgICBuZXdDbGFzc2VzOiBkeW5hbWljU2hlZXQuY2xhc3Nlc1xuICAgIH0pO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5hZGQoZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY2xhc3NlcyA9IHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldC5jbGFzc2VzO1xuICB9XG5cbiAgc2hlZXRNYW5hZ2VyLnJlZnMgKz0gMTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKF9yZWYzLCBwcm9wcykge1xuICB2YXIgc3RhdGUgPSBfcmVmMy5zdGF0ZTtcblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3RhdGUuZHluYW1pY1NoZWV0LnVwZGF0ZShwcm9wcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0YWNoKF9yZWY0KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY0LnN0YXRlLFxuICAgICAgdGhlbWUgPSBfcmVmNC50aGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmNC5zdHlsZXNPcHRpb25zLFxuICAgICAgc3R5bGVzQ3JlYXRvciA9IF9yZWY0LnN0eWxlc0NyZWF0b3I7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2hlZXRNYW5hZ2VyID0gbXVsdGlLZXlTdG9yZS5nZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gIHNoZWV0TWFuYWdlci5yZWZzIC09IDE7XG4gIHZhciBzaGVldHNSZWdpc3RyeSA9IHN0eWxlc09wdGlvbnMuc2hlZXRzUmVnaXN0cnk7XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5yZWZzID09PSAwKSB7XG4gICAgbXVsdGlLZXlTdG9yZS5kZWxldGUoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0KTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUuZHluYW1pY1NoZWV0KSB7XG4gICAgc3R5bGVzT3B0aW9ucy5qc3MucmVtb3ZlU3R5bGVTaGVldChzdGF0ZS5keW5hbWljU2hlZXQpO1xuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5yZW1vdmUoc3RhdGUuZHluYW1pY1NoZWV0KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlU3luY2hyb25vdXNFZmZlY3QoZnVuYywgdmFsdWVzKSB7XG4gIHZhciBrZXkgPSBSZWFjdC51c2VSZWYoW10pO1xuICB2YXIgb3V0cHV0OyAvLyBTdG9yZSBcImdlbmVyYXRpb25cIiBrZXkuIEp1c3QgcmV0dXJucyBhIG5ldyBvYmplY3QgZXZlcnkgdGltZVxuXG4gIHZhciBjdXJyZW50S2V5ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LCB2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAvLyBcInRoZSBmaXJzdCByZW5kZXJcIiwgb3IgXCJtZW1vIGRyb3BwZWQgdGhlIHZhbHVlXCJcblxuICBpZiAoa2V5LmN1cnJlbnQgIT09IGN1cnJlbnRLZXkpIHtcbiAgICBrZXkuY3VycmVudCA9IGN1cnJlbnRLZXk7XG4gICAgb3V0cHV0ID0gZnVuYygpO1xuICB9XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG91dHB1dCkge1xuICAgICAgICBvdXRwdXQoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbY3VycmVudEtleV0gLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4T3B0aW9uID0gb3B0aW9ucy5jbGFzc05hbWVQcmVmaXgsXG4gICAgICBDb21wb25lbnQgPSBvcHRpb25zLkNvbXBvbmVudCxcbiAgICAgIF9vcHRpb25zJGRlZmF1bHRUaGVtZSA9IG9wdGlvbnMuZGVmYXVsdFRoZW1lLFxuICAgICAgZGVmYXVsdFRoZW1lID0gX29wdGlvbnMkZGVmYXVsdFRoZW1lID09PSB2b2lkIDAgPyBub29wVGhlbWUgOiBfb3B0aW9ucyRkZWZhdWx0VGhlbWUsXG4gICAgICBzdHlsZXNPcHRpb25zMiA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJuYW1lXCIsIFwiY2xhc3NOYW1lUHJlZml4XCIsIFwiQ29tcG9uZW50XCIsIFwiZGVmYXVsdFRoZW1lXCJdKTtcblxuICB2YXIgc3R5bGVzQ3JlYXRvciA9IGdldFN0eWxlc0NyZWF0b3Ioc3R5bGVzT3JDcmVhdG9yKTtcbiAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IG5hbWUgfHwgY2xhc3NOYW1lUHJlZml4T3B0aW9uIHx8ICdtYWtlU3R5bGVzJztcbiAgc3R5bGVzQ3JlYXRvci5vcHRpb25zID0ge1xuICAgIGluZGV4OiBpbmNyZW1lbnQoKSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIG1ldGE6IGNsYXNzTmFtZVByZWZpeCxcbiAgICBjbGFzc05hbWVQcmVmaXg6IGNsYXNzTmFtZVByZWZpeFxuICB9O1xuXG4gIHZhciB1c2VTdHlsZXMgPSBmdW5jdGlvbiB1c2VTdHlsZXMoKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICAgIHZhciBzdHlsZXNPcHRpb25zID0gX2V4dGVuZHMoe30sIFJlYWN0LnVzZUNvbnRleHQoU3R5bGVzQ29udGV4dCksIHN0eWxlc09wdGlvbnMyKTtcblxuICAgIHZhciBpbnN0YW5jZSA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHZhciBzaG91bGRVcGRhdGUgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB1c2VTeW5jaHJvbm91c0VmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgc3RhdGU6IHt9LFxuICAgICAgICBzdHlsZXNDcmVhdG9yOiBzdHlsZXNDcmVhdG9yLFxuICAgICAgICBzdHlsZXNPcHRpb25zOiBzdHlsZXNPcHRpb25zLFxuICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgIH07XG4gICAgICBhdHRhY2goY3VycmVudCwgcHJvcHMpO1xuICAgICAgc2hvdWxkVXBkYXRlLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGluc3RhbmNlLmN1cnJlbnQgPSBjdXJyZW50O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGV0YWNoKGN1cnJlbnQpO1xuICAgICAgfTtcbiAgICB9LCBbdGhlbWUsIHN0eWxlc0NyZWF0b3JdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZS5jdXJyZW50KSB7XG4gICAgICAgIHVwZGF0ZShpbnN0YW5jZS5jdXJyZW50LCBwcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIHNob3VsZFVwZGF0ZS5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9KTtcbiAgICB2YXIgY2xhc3NlcyA9IGdldENsYXNzZXMoaW5zdGFuY2UuY3VycmVudCwgcHJvcHMuY2xhc3NlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICAgIFJlYWN0LnVzZURlYnVnVmFsdWUoY2xhc3Nlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzZXM7XG4gIH07XG5cbiAgcmV0dXJuIHVzZVN0eWxlcztcbn0iLCJpbXBvcnQgeyBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcHBpbmcgb2Yga2V5IHRvIGNoaWxkXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoaWxkTWFwcGluZyhjaGlsZHJlbiwgbWFwRm4pIHtcbiAgdmFyIG1hcHBlciA9IGZ1bmN0aW9uIG1hcHBlcihjaGlsZCkge1xuICAgIHJldHVybiBtYXBGbiAmJiBpc1ZhbGlkRWxlbWVudChjaGlsZCkgPyBtYXBGbihjaGlsZCkgOiBjaGlsZDtcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKGNoaWxkcmVuKSBDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGM7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgLy8gcnVuIHRoZSBtYXAgZnVuY3Rpb24gaGVyZSBpbnN0ZWFkIHNvIHRoYXQgdGhlIGtleSBpcyB0aGUgY29tcHV0ZWQgb25lXG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBtYXBwZXIoY2hpbGQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gbmV4dCA/IG5leHRba2V5XSA6IHByZXZba2V5XTtcbiAgfSAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcblxuXG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAocHJldktleSBpbiBuZXh0KSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9IC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbmZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3AsIHByb3BzKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPSBudWxsID8gcHJvcHNbcHJvcF0gOiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxDaGlsZE1hcHBpbmcocHJvcHMsIG9uRXhpdGVkKSB7XG4gIHJldHVybiBnZXRDaGlsZE1hcHBpbmcocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgIGluOiB0cnVlLFxuICAgICAgYXBwZWFyOiBnZXRQcm9wKGNoaWxkLCAnYXBwZWFyJywgcHJvcHMpLFxuICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIHByb3BzKSxcbiAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgcHJvcHMpXG4gICAgfSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBvbkV4aXRlZCkge1xuICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyhuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZyk7XG4gIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltrZXldO1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSByZXR1cm47XG4gICAgdmFyIGhhc1ByZXYgPSAoa2V5IGluIHByZXZDaGlsZE1hcHBpbmcpO1xuICAgIHZhciBoYXNOZXh0ID0gKGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkTWFwcGluZ1trZXldO1xuICAgIHZhciBpc0xlYXZpbmcgPSBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpICYmICFwcmV2Q2hpbGQucHJvcHMuaW47IC8vIGl0ZW0gaXMgbmV3IChlbnRlcmluZylcblxuICAgIGlmIChoYXNOZXh0ICYmICghaGFzUHJldiB8fCBpc0xlYXZpbmcpKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygnZW50ZXJpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHRydWUsXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIWhhc05leHQgJiYgaGFzUHJldiAmJiAhaXNMZWF2aW5nKSB7XG4gICAgICAvLyBpdGVtIGlzIG9sZCAoZXhpdGluZylcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdsZWF2aW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBpbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaGFzTmV4dCAmJiBoYXNQcmV2ICYmIGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkpIHtcbiAgICAgIC8vIGl0ZW0gaGFzbid0IGNoYW5nZWQgdHJhbnNpdGlvbiBzdGF0ZXNcbiAgICAgIC8vIGNvcHkgb3ZlciB0aGUgbGFzdCB0cmFuc2l0aW9uIHByb3BzO1xuICAgICAgLy8gY29uc29sZS5sb2coJ3VuY2hhbmdlZCcsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogcHJldkNoaWxkLnByb3BzLmluLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hpbGRyZW47XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuaW1wb3J0IHsgZ2V0Q2hpbGRNYXBwaW5nLCBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nLCBnZXROZXh0Q2hpbGRNYXBwaW5nIH0gZnJvbSAnLi91dGlscy9DaGlsZE1hcHBpbmcnO1xuXG52YXIgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBvYmpba107XG4gIH0pO1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAnZGl2JyxcbiAgY2hpbGRGYWN0b3J5OiBmdW5jdGlvbiBjaGlsZEZhY3RvcnkoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cbn07XG4vKipcbiAqIFRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIGNvbXBvbmVudCBtYW5hZ2VzIGEgc2V0IG9mIHRyYW5zaXRpb24gY29tcG9uZW50c1xuICogKGA8VHJhbnNpdGlvbj5gIGFuZCBgPENTU1RyYW5zaXRpb24+YCkgaW4gYSBsaXN0LiBMaWtlIHdpdGggdGhlIHRyYW5zaXRpb25cbiAqIGNvbXBvbmVudHMsIGA8VHJhbnNpdGlvbkdyb3VwPmAgaXMgYSBzdGF0ZSBtYWNoaW5lIGZvciBtYW5hZ2luZyB0aGUgbW91bnRpbmdcbiAqIGFuZCB1bm1vdW50aW5nIG9mIGNvbXBvbmVudHMgb3ZlciB0aW1lLlxuICpcbiAqIENvbnNpZGVyIHRoZSBleGFtcGxlIGJlbG93LiBBcyBpdGVtcyBhcmUgcmVtb3ZlZCBvciBhZGRlZCB0byB0aGUgVG9kb0xpc3QgdGhlXG4gKiBgaW5gIHByb3AgaXMgdG9nZ2xlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gLlxuICpcbiAqIE5vdGUgdGhhdCBgPFRyYW5zaXRpb25Hcm91cD5gICBkb2VzIG5vdCBkZWZpbmUgYW55IGFuaW1hdGlvbiBiZWhhdmlvciFcbiAqIEV4YWN0bHkgX2hvd18gYSBsaXN0IGl0ZW0gYW5pbWF0ZXMgaXMgdXAgdG8gdGhlIGluZGl2aWR1YWwgdHJhbnNpdGlvblxuICogY29tcG9uZW50LiBUaGlzIG1lYW5zIHlvdSBjYW4gbWl4IGFuZCBtYXRjaCBhbmltYXRpb25zIGFjcm9zcyBkaWZmZXJlbnQgbGlzdFxuICogaXRlbXMuXG4gKi9cblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb25Hcm91cChwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuXG4gICAgdmFyIGhhbmRsZUV4aXRlZCA9IF90aGlzLmhhbmRsZUV4aXRlZC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsgLy8gSW5pdGlhbCBjaGlsZHJlbiBzaG91bGQgYWxsIGJlIGVudGVyaW5nLCBkZXBlbmRlbnQgb24gYXBwZWFyXG5cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY29udGV4dFZhbHVlOiB7XG4gICAgICAgIGlzTW91bnRpbmc6IHRydWVcbiAgICAgIH0sXG4gICAgICBoYW5kbGVFeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICAgIGZpcnN0UmVuZGVyOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY29udGV4dFZhbHVlOiB7XG4gICAgICAgIGlzTW91bnRpbmc6IGZhbHNlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIF9yZWYpIHtcbiAgICB2YXIgcHJldkNoaWxkTWFwcGluZyA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICAgIGhhbmRsZUV4aXRlZCA9IF9yZWYuaGFuZGxlRXhpdGVkLFxuICAgICAgICBmaXJzdFJlbmRlciA9IF9yZWYuZmlyc3RSZW5kZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBmaXJzdFJlbmRlciA/IGdldEluaXRpYWxDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBoYW5kbGVFeGl0ZWQpIDogZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIGhhbmRsZUV4aXRlZCksXG4gICAgICBmaXJzdFJlbmRlcjogZmFsc2VcbiAgICB9O1xuICB9IC8vIG5vZGUgaXMgYHVuZGVmaW5lZGAgd2hlbiB1c2VyIHByb3ZpZGVkIGBub2RlUmVmYCBwcm9wXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlRXhpdGVkKGNoaWxkLCBub2RlKSB7XG4gICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKGNoaWxkLmtleSBpbiBjdXJyZW50Q2hpbGRNYXBwaW5nKSByZXR1cm47XG5cbiAgICBpZiAoY2hpbGQucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG5cbiAgICAgICAgZGVsZXRlIGNoaWxkcmVuW2NoaWxkLmtleV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgIGNoaWxkRmFjdG9yeSA9IF90aGlzJHByb3BzLmNoaWxkRmFjdG9yeSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50XCIsIFwiY2hpbGRGYWN0b3J5XCJdKTtcblxuICAgIHZhciBjb250ZXh0VmFsdWUgPSB0aGlzLnN0YXRlLmNvbnRleHRWYWx1ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2YWx1ZXModGhpcy5zdGF0ZS5jaGlsZHJlbikubWFwKGNoaWxkRmFjdG9yeSk7XG4gICAgZGVsZXRlIHByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLmV4aXQ7XG5cbiAgICBpZiAoQ29tcG9uZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzLCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uR3JvdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb25Hcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBgPFRyYW5zaXRpb25Hcm91cD5gIHJlbmRlcnMgYSBgPGRpdj5gIGJ5IGRlZmF1bHQuIFlvdSBjYW4gY2hhbmdlIHRoaXNcbiAgICogYmVoYXZpb3IgYnkgcHJvdmlkaW5nIGEgYGNvbXBvbmVudGAgcHJvcC5cbiAgICogSWYgeW91IHVzZSBSZWFjdCB2MTYrIGFuZCB3b3VsZCBsaWtlIHRvIGF2b2lkIGEgd3JhcHBpbmcgYDxkaXY+YCBlbGVtZW50XG4gICAqIHlvdSBjYW4gcGFzcyBpbiBgY29tcG9uZW50PXtudWxsfWAuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSB3cmFwcGluZyBkaXZcbiAgICogYm9ya3MgeW91ciBjc3Mgc3R5bGVzLlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBgPFRyYW5zaXRpb24+YCBjb21wb25lbnRzLCB0aGF0IGFyZSB0b2dnbGVkIGBpbmAgYW5kIG91dCBhcyB0aGV5XG4gICAqIGxlYXZlLiB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YCB3aWxsIGluamVjdCBzcGVjaWZpYyB0cmFuc2l0aW9uIHByb3BzLCBzb1xuICAgKiByZW1lbWJlciB0byBzcHJlYWQgdGhlbSB0aHJvdWdoIGlmIHlvdSBhcmUgd3JhcHBpbmcgdGhlIGA8VHJhbnNpdGlvbj5gIGFzXG4gICAqIHdpdGggb3VyIGA8RmFkZT5gIGV4YW1wbGUuXG4gICAqXG4gICAqIFdoaWxlIHRoaXMgY29tcG9uZW50IGlzIG1lYW50IGZvciBtdWx0aXBsZSBgVHJhbnNpdGlvbmAgb3IgYENTU1RyYW5zaXRpb25gXG4gICAqIGNoaWxkcmVuLCBzb21ldGltZXMgeW91IG1heSB3YW50IHRvIGhhdmUgYSBzaW5nbGUgdHJhbnNpdGlvbiBjaGlsZCB3aXRoXG4gICAqIGNvbnRlbnQgdGhhdCB5b3Ugd2FudCB0byBiZSB0cmFuc2l0aW9uZWQgb3V0IGFuZCBpbiB3aGVuIHlvdSBjaGFuZ2UgaXRcbiAgICogKGUuZy4gcm91dGVzLCBpbWFnZXMgZXRjLikgSW4gdGhhdCBjYXNlIHlvdSBjYW4gY2hhbmdlIHRoZSBga2V5YCBwcm9wIG9mXG4gICAqIHRoZSB0cmFuc2l0aW9uIGNoaWxkIGFzIHlvdSBjaGFuZ2UgaXRzIGNvbnRlbnQsIHRoaXMgd2lsbCBjYXVzZVxuICAgKiBgVHJhbnNpdGlvbkdyb3VwYCB0byB0cmFuc2l0aW9uIHRoZSBjaGlsZCBvdXQgYW5kIGJhY2sgaW4uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgYXBwZWFyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZW50ZXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGV4aXQgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFlvdSBtYXkgbmVlZCB0byBhcHBseSByZWFjdGl2ZSB1cGRhdGVzIHRvIGEgY2hpbGQgYXMgaXQgaXMgZXhpdGluZy5cbiAgICogVGhpcyBpcyBnZW5lcmFsbHkgZG9uZSBieSB1c2luZyBgY2xvbmVFbGVtZW50YCBob3dldmVyIGluIHRoZSBjYXNlIG9mIGFuIGV4aXRpbmdcbiAgICogY2hpbGQgdGhlIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiByZW1vdmVkIGFuZCBub3QgYWNjZXNzaWJsZSB0byB0aGUgY29uc3VtZXIuXG4gICAqXG4gICAqIElmIHlvdSBkbyBuZWVkIHRvIHVwZGF0ZSBhIGNoaWxkIGFzIGl0IGxlYXZlcyB5b3UgY2FuIHByb3ZpZGUgYSBgY2hpbGRGYWN0b3J5YFxuICAgKiB0byB3cmFwIGV2ZXJ5IGNoaWxkLCBldmVuIHRoZSBvbmVzIHRoYXQgYXJlIGxlYXZpbmcuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKGNoaWxkOiBSZWFjdEVsZW1lbnQpIC0+IFJlYWN0RWxlbWVudFxuICAgKi9cbiAgY2hpbGRGYWN0b3J5OiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9O1xuVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IFRyYW5zaXRpb25Hcm91cDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlRWZmZWN0IDogUmVhY3QudXNlTGF5b3V0RWZmZWN0O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJpcHBsZShwcm9wcykge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkcHVsc2F0ZSA9IHByb3BzLnB1bHNhdGUsXG4gICAgICBwdWxzYXRlID0gX3Byb3BzJHB1bHNhdGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHB1bHNhdGUsXG4gICAgICByaXBwbGVYID0gcHJvcHMucmlwcGxlWCxcbiAgICAgIHJpcHBsZVkgPSBwcm9wcy5yaXBwbGVZLFxuICAgICAgcmlwcGxlU2l6ZSA9IHByb3BzLnJpcHBsZVNpemUsXG4gICAgICBpblByb3AgPSBwcm9wcy5pbixcbiAgICAgIF9wcm9wcyRvbkV4aXRlZCA9IHByb3BzLm9uRXhpdGVkLFxuICAgICAgb25FeGl0ZWQgPSBfcHJvcHMkb25FeGl0ZWQgPT09IHZvaWQgMCA/IGZ1bmN0aW9uICgpIHt9IDogX3Byb3BzJG9uRXhpdGVkLFxuICAgICAgdGltZW91dCA9IHByb3BzLnRpbWVvdXQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGxlYXZpbmcgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRMZWF2aW5nID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciByaXBwbGVDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMucmlwcGxlLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHB1bHNhdGUgJiYgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlKTtcbiAgdmFyIHJpcHBsZVN0eWxlcyA9IHtcbiAgICB3aWR0aDogcmlwcGxlU2l6ZSxcbiAgICBoZWlnaHQ6IHJpcHBsZVNpemUsXG4gICAgdG9wOiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVksXG4gICAgbGVmdDogLShyaXBwbGVTaXplIC8gMikgKyByaXBwbGVYXG4gIH07XG4gIHZhciBjaGlsZENsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5jaGlsZCwgbGVhdmluZyAmJiBjbGFzc2VzLmNoaWxkTGVhdmluZywgcHVsc2F0ZSAmJiBjbGFzc2VzLmNoaWxkUHVsc2F0ZSk7XG4gIHZhciBoYW5kbGVFeGl0ZWQgPSB1c2VFdmVudENhbGxiYWNrKG9uRXhpdGVkKTsgLy8gUmlwcGxlIGlzIHVzZWQgZm9yIHVzZXIgZmVlZGJhY2sgKGUuZy4gY2xpY2sgb3IgcHJlc3MpIHNvIHdlIHdhbnQgdG8gYXBwbHkgc3R5bGVzIHdpdGggdGhlIGhpZ2hlc3QgcHJpb3JpdHlcblxuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpblByb3ApIHtcbiAgICAgIC8vIHJlYWN0LXRyYW5zaXRpb24tZ3JvdXAjb25FeGl0XG4gICAgICBzZXRMZWF2aW5nKHRydWUpOyAvLyByZWFjdC10cmFuc2l0aW9uLWdyb3VwI29uRXhpdGVkXG5cbiAgICAgIHZhciB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGhhbmRsZUV4aXRlZCwgdGltZW91dCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2hhbmRsZUV4aXRlZCwgaW5Qcm9wLCB0aW1lb3V0XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogcmlwcGxlQ2xhc3NOYW1lLFxuICAgIHN0eWxlOiByaXBwbGVTdHlsZXNcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNoaWxkQ2xhc3NOYW1lXG4gIH0pKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZSAtIGluamVjdGVkIGZyb20gVHJhbnNpdGlvbkdyb3VwXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBwdWxzYXRlcywgdHlwaWNhbGx5IGluZGljYXRpbmcgdGhlIGtleWJvYXJkIGZvY3VzIHN0YXRlIG9mIGFuIGVsZW1lbnQuXG4gICAqL1xuICBwdWxzYXRlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlhbWV0ZXIgb2YgdGhlIHJpcHBsZS5cbiAgICovXG4gIHJpcHBsZVNpemU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIEhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVYOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBWZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVk6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIGV4aXQgZGVsYXlcbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFJpcHBsZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb25Hcm91cCB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgUmlwcGxlIGZyb20gJy4vUmlwcGxlJztcbnZhciBEVVJBVElPTiA9IDU1MDtcbmV4cG9ydCB2YXIgREVMQVlfUklQUExFID0gODA7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB6SW5kZXg6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlYCBjbGFzcy4gKi9cbiAgICByaXBwbGU6IHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlVmlzaWJsZWAgY2xhc3MuICovXG4gICAgcmlwcGxlVmlzaWJsZToge1xuICAgICAgb3BhY2l0eTogMC4zLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgYW5pbWF0aW9uOiBcIiRlbnRlciBcIi5jb25jYXQoRFVSQVRJT04sIFwibXMgXCIpLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlUHVsc2F0ZWAgY2xhc3MuICovXG4gICAgcmlwcGxlUHVsc2F0ZToge1xuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IFwiXCIuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsIFwibXNcIilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkYCBjbGFzcy4gKi9cbiAgICBjaGlsZDoge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRMZWF2aW5nYCBjbGFzcy4gKi9cbiAgICBjaGlsZExlYXZpbmc6IHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBhbmltYXRpb246IFwiJGV4aXQgXCIuY29uY2F0KERVUkFUSU9OLCBcIm1zIFwiKS5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkUHVsc2F0ZWAgY2xhc3MuICovXG4gICAgY2hpbGRQdWxzYXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBhbmltYXRpb246IFwiJHB1bHNhdGUgMjUwMG1zIFwiLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCBcIiAyMDBtcyBpbmZpbml0ZVwiKVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgZW50ZXInOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgICAgICAgb3BhY2l0eTogMC4xXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgICAgb3BhY2l0eTogMC4zXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBleGl0Jzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICBvcGFjaXR5OiAxXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIHB1bHNhdGUnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xuICAgICAgfSxcbiAgICAgICc1MCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuOTIpJ1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICpcbiAqIFRPRE8gdjU6IE1ha2UgcHJpdmF0ZVxuICovXG5cbnZhciBUb3VjaFJpcHBsZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVG91Y2hSaXBwbGUocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGNlbnRlciA9IHByb3BzLmNlbnRlcixcbiAgICAgIGNlbnRlclByb3AgPSBfcHJvcHMkY2VudGVyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRjZW50ZXIsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjZW50ZXJcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoW10pLFxuICAgICAgcmlwcGxlcyA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFJpcHBsZXMgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIG5leHRLZXkgPSBSZWFjdC51c2VSZWYoMCk7XG4gIHZhciByaXBwbGVDYWxsYmFjayA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmlwcGxlQ2FsbGJhY2suY3VycmVudCkge1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCgpO1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9LCBbcmlwcGxlc10pOyAvLyBVc2VkIHRvIGZpbHRlciBvdXQgbW91c2UgZW11bGF0ZWQgZXZlbnRzIG9uIG1vYmlsZS5cblxuICB2YXIgaWdub3JpbmdNb3VzZURvd24gPSBSZWFjdC51c2VSZWYoZmFsc2UpOyAvLyBXZSB1c2UgYSB0aW1lciBpbiBvcmRlciB0byBvbmx5IHNob3cgdGhlIHJpcHBsZXMgZm9yIHRvdWNoIFwiY2xpY2tcIiBsaWtlIGV2ZW50cy5cbiAgLy8gV2UgZG9uJ3Qgd2FudCB0byBkaXNwbGF5IHRoZSByaXBwbGUgZm9yIHRvdWNoIHNjcm9sbCBldmVudHMuXG5cbiAgdmFyIHN0YXJ0VGltZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7IC8vIFRoaXMgaXMgdGhlIGhvb2sgY2FsbGVkIG9uY2UgdGhlIHByZXZpb3VzIHRpbWVvdXQgaXMgcmVhZHkuXG5cbiAgdmFyIHN0YXJ0VGltZXJDb21taXQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBjb250YWluZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChzdGFydFRpbWVyLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgdmFyIHN0YXJ0Q29tbWl0ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIHZhciBwdWxzYXRlID0gcGFyYW1zLnB1bHNhdGUsXG4gICAgICAgIHJpcHBsZVggPSBwYXJhbXMucmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWSA9IHBhcmFtcy5yaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplID0gcGFyYW1zLnJpcHBsZVNpemUsXG4gICAgICAgIGNiID0gcGFyYW1zLmNiO1xuICAgIHNldFJpcHBsZXMoZnVuY3Rpb24gKG9sZFJpcHBsZXMpIHtcbiAgICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG9sZFJpcHBsZXMpLCBbLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmlwcGxlLCB7XG4gICAgICAgIGtleTogbmV4dEtleS5jdXJyZW50LFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgICB0aW1lb3V0OiBEVVJBVElPTixcbiAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZVxuICAgICAgfSldKTtcbiAgICB9KTtcbiAgICBuZXh0S2V5LmN1cnJlbnQgKz0gMTtcbiAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gY2I7XG4gIH0sIFtjbGFzc2VzXSk7XG4gIHZhciBzdGFydCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgX29wdGlvbnMkcHVsc2F0ZSA9IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgICAgcHVsc2F0ZSA9IF9vcHRpb25zJHB1bHNhdGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkcHVsc2F0ZSxcbiAgICAgICAgX29wdGlvbnMkY2VudGVyID0gb3B0aW9ucy5jZW50ZXIsXG4gICAgICAgIGNlbnRlciA9IF9vcHRpb25zJGNlbnRlciA9PT0gdm9pZCAwID8gY2VudGVyUHJvcCB8fCBvcHRpb25zLnB1bHNhdGUgOiBfb3B0aW9ucyRjZW50ZXIsXG4gICAgICAgIF9vcHRpb25zJGZha2VFbGVtZW50ID0gb3B0aW9ucy5mYWtlRWxlbWVudCxcbiAgICAgICAgZmFrZUVsZW1lbnQgPSBfb3B0aW9ucyRmYWtlRWxlbWVudCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRmYWtlRWxlbWVudDtcblxuICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50KSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnQgPSBmYWtlRWxlbWVudCA/IG51bGwgOiBjb250YWluZXIuY3VycmVudDtcbiAgICB2YXIgcmVjdCA9IGVsZW1lbnQgPyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwXG4gICAgfTsgLy8gR2V0IHRoZSBzaXplIG9mIHRoZSByaXBwbGVcblxuICAgIHZhciByaXBwbGVYO1xuICAgIHZhciByaXBwbGVZO1xuICAgIHZhciByaXBwbGVTaXplO1xuXG4gICAgaWYgKGNlbnRlciB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfcmVmID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0gOiBldmVudCxcbiAgICAgICAgICBjbGllbnRYID0gX3JlZi5jbGllbnRYLFxuICAgICAgICAgIGNsaWVudFkgPSBfcmVmLmNsaWVudFk7XG5cbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKGNsaWVudFggLSByZWN0LmxlZnQpO1xuICAgICAgcmlwcGxlWSA9IE1hdGgucm91bmQoY2xpZW50WSAtIHJlY3QudG9wKTtcbiAgICB9XG5cbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KCgyICogTWF0aC5wb3cocmVjdC53aWR0aCwgMikgKyBNYXRoLnBvdyhyZWN0LmhlaWdodCwgMikpIC8gMyk7IC8vIEZvciBzb21lIHJlYXNvbiB0aGUgYW5pbWF0aW9uIGlzIGJyb2tlbiBvbiBNb2JpbGUgQ2hyb21lIGlmIHRoZSBzaXplIGlmIGV2ZW4uXG5cbiAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzaXplWCA9IE1hdGgubWF4KE1hdGguYWJzKChlbGVtZW50ID8gZWxlbWVudC5jbGllbnRXaWR0aCA6IDApIC0gcmlwcGxlWCksIHJpcHBsZVgpICogMiArIDI7XG4gICAgICB2YXIgc2l6ZVkgPSBNYXRoLm1heChNYXRoLmFicygoZWxlbWVudCA/IGVsZW1lbnQuY2xpZW50SGVpZ2h0IDogMCkgLSByaXBwbGVZKSwgcmlwcGxlWSkgKiAyICsgMjtcbiAgICAgIHJpcHBsZVNpemUgPSBNYXRoLnNxcnQoTWF0aC5wb3coc2l6ZVgsIDIpICsgTWF0aC5wb3coc2l6ZVksIDIpKTtcbiAgICB9IC8vIFRvdWNoZSBkZXZpY2VzXG5cblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAvLyBjaGVjayB0aGF0IHRoaXMgaXNuJ3QgYW5vdGhlciB0b3VjaHN0YXJ0IGR1ZSB0byBtdWx0aXRvdWNoXG4gICAgICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCBvbmx5IGNsZWFyIGEgc2luZ2xlIHRpbWVyIHdoZW4gdW5tb3VudGluZyB3aGlsZSB0d29cbiAgICAgIC8vIGFyZSBydW5uaW5nXG4gICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgIC8vIFByZXBhcmUgdGhlIHJpcHBsZSBlZmZlY3QuXG4gICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGFydENvbW1pdCh7XG4gICAgICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplLFxuICAgICAgICAgICAgY2I6IGNiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07IC8vIERlbGF5IHRoZSBleGVjdXRpb24gb2YgdGhlIHJpcHBsZSBlZmZlY3QuXG5cblxuICAgICAgICBzdGFydFRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KSB7XG4gICAgICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQoKTtcbiAgICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBERUxBWV9SSVBQTEUpOyAvLyBXZSBoYXZlIHRvIG1ha2UgYSB0cmFkZW9mZiB3aXRoIHRoaXMgdmFsdWUuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZSxcbiAgICAgICAgY2I6IGNiXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtjZW50ZXJQcm9wLCBzdGFydENvbW1pdF0pO1xuICB2YXIgcHVsc2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBzdGFydCh7fSwge1xuICAgICAgcHVsc2F0ZTogdHJ1ZVxuICAgIH0pO1xuICB9LCBbc3RhcnRdKTtcbiAgdmFyIHN0b3AgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQsIGNiKSB7XG4gICAgY2xlYXJUaW1lb3V0KHN0YXJ0VGltZXIuY3VycmVudCk7IC8vIFRoZSB0b3VjaCBpbnRlcmFjdGlvbiBvY2N1cnMgdG9vIHF1aWNrbHkuXG4gICAgLy8gV2Ugc3RpbGwgd2FudCB0byBzaG93IHJpcHBsZSBlZmZlY3QuXG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoZW5kJyAmJiBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgIHN0YXJ0VGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzdG9wKGV2ZW50LCBjYik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgIHNldFJpcHBsZXMoZnVuY3Rpb24gKG9sZFJpcHBsZXMpIHtcbiAgICAgIGlmIChvbGRSaXBwbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG9sZFJpcHBsZXMuc2xpY2UoMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbGRSaXBwbGVzO1xuICAgIH0pO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgc3RvcDogc3RvcFxuICAgIH07XG4gIH0sIFtwdWxzYXRlLCBzdGFydCwgc3RvcF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogY29udGFpbmVyXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwLCB7XG4gICAgY29tcG9uZW50OiBudWxsLFxuICAgIGV4aXQ6IHRydWVcbiAgfSwgcmlwcGxlcykpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb3VjaFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgc3RhcnRzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIGNvbXBvbmVudFxuICAgKiByYXRoZXIgdGhhbiBhdCB0aGUgcG9pbnQgb2YgaW50ZXJhY3Rpb24uXG4gICAqL1xuICBjZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgZmxpcDogZmFsc2UsXG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZSdcbn0pKFJlYWN0Lm1lbW8oVG91Y2hSaXBwbGUpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsIHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB1c2VJc0ZvY3VzVmlzaWJsZSBmcm9tICcuLi91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgVG91Y2hSaXBwbGUgZnJvbSAnLi9Ub3VjaFJpcHBsZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAvLyBSZXNldCBkZWZhdWx0IHZhbHVlXG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAwLFxuICAgIGJvcmRlcjogMCxcbiAgICBtYXJnaW46IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgJy1tb3otYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAvLyBSZXNldFxuICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgLy8gUmVzZXRcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgIC8vIFNvIHdlIHRha2UgcHJlY2VkZW50IG92ZXIgdGhlIHN0eWxlIG9mIGEgbmF0aXZlIDxhIC8+IGVsZW1lbnQuXG4gICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICAgIGJvcmRlclN0eWxlOiAnbm9uZScgLy8gUmVtb3ZlIEZpcmVmb3ggZG90dGVkIG91dGxpbmUuXG5cbiAgICB9LFxuICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgLy8gRGlzYWJsZSBsaW5rIGludGVyYWN0aW9uc1xuICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICB9LFxuICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICBjb2xvckFkanVzdDogJ2V4YWN0J1xuICAgIH1cbiAgfSxcblxuICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICBkaXNhYmxlZDoge30sXG5cbiAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBrZXlib2FyZCBmb2N1c2VkLiAqL1xuICBmb2N1c1Zpc2libGU6IHt9XG59O1xuLyoqXG4gKiBgQnV0dG9uQmFzZWAgY29udGFpbnMgYXMgZmV3IHN0eWxlcyBhcyBwb3NzaWJsZS5cbiAqIEl0IGFpbXMgdG8gYmUgYSBzaW1wbGUgYnVpbGRpbmcgYmxvY2sgZm9yIGNyZWF0aW5nIGEgYnV0dG9uLlxuICogSXQgY29udGFpbnMgYSBsb2FkIG9mIHN0eWxlIHJlc2V0IGFuZCBzb21lIGZvY3VzL3JpcHBsZSBsb2dpYy5cbiAqL1xuXG52YXIgQnV0dG9uQmFzZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uQmFzZShwcm9wcywgcmVmKSB7XG4gIHZhciBhY3Rpb24gPSBwcm9wcy5hY3Rpb24sXG4gICAgICBidXR0b25SZWZQcm9wID0gcHJvcHMuYnV0dG9uUmVmLFxuICAgICAgX3Byb3BzJGNlbnRlclJpcHBsZSA9IHByb3BzLmNlbnRlclJpcHBsZSxcbiAgICAgIGNlbnRlclJpcHBsZSA9IF9wcm9wcyRjZW50ZXJSaXBwbGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNlbnRlclJpcHBsZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUmlwcGxlID0gcHJvcHMuZGlzYWJsZVJpcHBsZSxcbiAgICAgIGRpc2FibGVSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZVJpcHBsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVJpcHBsZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlVG91Y2hSaSA9IHByb3BzLmRpc2FibGVUb3VjaFJpcHBsZSxcbiAgICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IF9wcm9wcyRkaXNhYmxlVG91Y2hSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVRvdWNoUmksXG4gICAgICBfcHJvcHMkZm9jdXNSaXBwbGUgPSBwcm9wcy5mb2N1c1JpcHBsZSxcbiAgICAgIGZvY3VzUmlwcGxlID0gX3Byb3BzJGZvY3VzUmlwcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb2N1c1JpcHBsZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IHByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBvbkZvY3VzVmlzaWJsZSA9IHByb3BzLm9uRm9jdXNWaXNpYmxlLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgb25LZXlVcCA9IHByb3BzLm9uS2V5VXAsXG4gICAgICBvbk1vdXNlRG93biA9IHByb3BzLm9uTW91c2VEb3duLFxuICAgICAgb25Nb3VzZUxlYXZlID0gcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgb25Nb3VzZVVwID0gcHJvcHMub25Nb3VzZVVwLFxuICAgICAgb25Ub3VjaEVuZCA9IHByb3BzLm9uVG91Y2hFbmQsXG4gICAgICBvblRvdWNoTW92ZSA9IHByb3BzLm9uVG91Y2hNb3ZlLFxuICAgICAgb25Ub3VjaFN0YXJ0ID0gcHJvcHMub25Ub3VjaFN0YXJ0LFxuICAgICAgb25EcmFnTGVhdmUgPSBwcm9wcy5vbkRyYWdMZWF2ZSxcbiAgICAgIF9wcm9wcyR0YWJJbmRleCA9IHByb3BzLnRhYkluZGV4LFxuICAgICAgdGFiSW5kZXggPSBfcHJvcHMkdGFiSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkdGFiSW5kZXgsXG4gICAgICBUb3VjaFJpcHBsZVByb3BzID0gcHJvcHMuVG91Y2hSaXBwbGVQcm9wcyxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkdHlwZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3Rpb25cIiwgXCJidXR0b25SZWZcIiwgXCJjZW50ZXJSaXBwbGVcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVSaXBwbGVcIiwgXCJkaXNhYmxlVG91Y2hSaXBwbGVcIiwgXCJmb2N1c1JpcHBsZVwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2xpY2tcIiwgXCJvbkZvY3VzXCIsIFwib25Gb2N1c1Zpc2libGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwib25Nb3VzZURvd25cIiwgXCJvbk1vdXNlTGVhdmVcIiwgXCJvbk1vdXNlVXBcIiwgXCJvblRvdWNoRW5kXCIsIFwib25Ub3VjaE1vdmVcIiwgXCJvblRvdWNoU3RhcnRcIiwgXCJvbkRyYWdMZWF2ZVwiLCBcInRhYkluZGV4XCIsIFwiVG91Y2hSaXBwbGVQcm9wc1wiLCBcInR5cGVcIl0pO1xuXG4gIHZhciBidXR0b25SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgZnVuY3Rpb24gZ2V0QnV0dG9uTm9kZSgpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShidXR0b25SZWYuY3VycmVudCk7XG4gIH1cblxuICB2YXIgcmlwcGxlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBmb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRGb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgaWYgKGRpc2FibGVkICYmIGZvY3VzVmlzaWJsZSkge1xuICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gIH1cblxuICB2YXIgX3VzZUlzRm9jdXNWaXNpYmxlID0gdXNlSXNGb2N1c1Zpc2libGUoKSxcbiAgICAgIGlzRm9jdXNWaXNpYmxlID0gX3VzZUlzRm9jdXNWaXNpYmxlLmlzRm9jdXNWaXNpYmxlLFxuICAgICAgb25CbHVyVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5vbkJsdXJWaXNpYmxlLFxuICAgICAgZm9jdXNWaXNpYmxlUmVmID0gX3VzZUlzRm9jdXNWaXNpYmxlLnJlZjtcblxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb2N1c1Zpc2libGU6IGZ1bmN0aW9uIGZvY3VzVmlzaWJsZSgpIHtcbiAgICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgICBidXR0b25SZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzUmlwcGxlICYmICFkaXNhYmxlUmlwcGxlKSB7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5wdWxzYXRlKCk7XG4gICAgfVxuICB9LCBbZGlzYWJsZVJpcHBsZSwgZm9jdXNSaXBwbGUsIGZvY3VzVmlzaWJsZV0pO1xuXG4gIGZ1bmN0aW9uIHVzZVJpcHBsZUhhbmRsZXIocmlwcGxlQWN0aW9uLCBldmVudENhbGxiYWNrKSB7XG4gICAgdmFyIHNraXBSaXBwbGVBY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGRpc2FibGVUb3VjaFJpcHBsZTtcbiAgICByZXR1cm4gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudENhbGxiYWNrKSB7XG4gICAgICAgIGV2ZW50Q2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaWdub3JlID0gc2tpcFJpcHBsZUFjdGlvbjtcblxuICAgICAgaWYgKCFpZ25vcmUgJiYgcmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnRbcmlwcGxlQWN0aW9uXShldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhbmRsZU1vdXNlRG93biA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Nb3VzZURvd24pO1xuICB2YXIgaGFuZGxlRHJhZ0xlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uRHJhZ0xlYXZlKTtcbiAgdmFyIGhhbmRsZU1vdXNlVXAgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Nb3VzZVVwKTtcbiAgdmFyIGhhbmRsZU1vdXNlTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25Nb3VzZUxlYXZlKSB7XG4gICAgICBvbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVUb3VjaFN0YXJ0ID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvblRvdWNoU3RhcnQpO1xuICB2YXIgaGFuZGxlVG91Y2hFbmQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaEVuZCk7XG4gIHZhciBoYW5kbGVUb3VjaE1vdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaE1vdmUpO1xuICB2YXIgaGFuZGxlQmx1ciA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlKSB7XG4gICAgICBvbkJsdXJWaXNpYmxlKGV2ZW50KTtcbiAgICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH0sIGZhbHNlKTtcbiAgdmFyIGhhbmRsZUZvY3VzID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBGaXggZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzc2OVxuICAgIGlmICghYnV0dG9uUmVmLmN1cnJlbnQpIHtcbiAgICAgIGJ1dHRvblJlZi5jdXJyZW50ID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAoaXNGb2N1c1Zpc2libGUoZXZlbnQpKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG5cbiAgICAgIGlmIChvbkZvY3VzVmlzaWJsZSkge1xuICAgICAgICBvbkZvY3VzVmlzaWJsZShldmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGlzTm9uTmF0aXZlQnV0dG9uID0gZnVuY3Rpb24gaXNOb25OYXRpdmVCdXR0b24oKSB7XG4gICAgdmFyIGJ1dHRvbiA9IGdldEJ1dHRvbk5vZGUoKTtcbiAgICByZXR1cm4gY29tcG9uZW50ICYmIGNvbXBvbmVudCAhPT0gJ2J1dHRvbicgJiYgIShidXR0b24udGFnTmFtZSA9PT0gJ0EnICYmIGJ1dHRvbi5ocmVmKTtcbiAgfTtcbiAgLyoqXG4gICAqIElFIDExIHNoaW0gZm9yIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L3JlcGVhdFxuICAgKi9cblxuXG4gIHZhciBrZXlkb3duUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdmFyIGhhbmRsZUtleURvd24gPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIENoZWNrIGlmIGtleSBpcyBhbHJlYWR5IGRvd24gdG8gYXZvaWQgcmVwZWF0cyBiZWluZyBjb3VudGVkIGFzIG11bHRpcGxlIGFjdGl2YXRpb25zXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmICFrZXlkb3duUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5zdGFydChldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9IC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuXG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnRW50ZXInICYmICFkaXNhYmxlZCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUtleVVwID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBjYWxsaW5nIHByZXZlbnREZWZhdWx0IGluIGtleVVwIG9uIGEgPGJ1dHRvbj4gd2lsbCBub3QgZGlzcGF0Y2ggYSBjbGljayBldmVudCBpZiBTcGFjZSBpcyBwcmVzc2VkXG4gICAgLy8gaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL2J1dHRvbi1rZXl1cC1wcmV2ZW50ZGVmYXVsdC1kbjdmMFxuICAgIGlmIChmb2N1c1JpcHBsZSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiByaXBwbGVSZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5wdWxzYXRlKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvbktleVVwKSB7XG4gICAgICBvbktleVVwKGV2ZW50KTtcbiAgICB9IC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuXG5cbiAgICBpZiAob25DbGljayAmJiBldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIENvbXBvbmVudFByb3AgPSBjb21wb25lbnQ7XG5cbiAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nICYmIG90aGVyLmhyZWYpIHtcbiAgICBDb21wb25lbnRQcm9wID0gJ2EnO1xuICB9XG5cbiAgdmFyIGJ1dHRvblByb3BzID0ge307XG5cbiAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nKSB7XG4gICAgYnV0dG9uUHJvcHMudHlwZSA9IHR5cGU7XG4gICAgYnV0dG9uUHJvcHMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoQ29tcG9uZW50UHJvcCAhPT0gJ2EnIHx8ICFvdGhlci5ocmVmKSB7XG4gICAgICBidXR0b25Qcm9wcy5yb2xlID0gJ2J1dHRvbic7XG4gICAgfVxuXG4gICAgYnV0dG9uUHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA9IGRpc2FibGVkO1xuICB9XG5cbiAgdmFyIGhhbmRsZVVzZXJSZWYgPSB1c2VGb3JrUmVmKGJ1dHRvblJlZlByb3AsIHJlZik7XG4gIHZhciBoYW5kbGVPd25SZWYgPSB1c2VGb3JrUmVmKGZvY3VzVmlzaWJsZVJlZiwgYnV0dG9uUmVmKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoaGFuZGxlVXNlclJlZiwgaGFuZGxlT3duUmVmKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMiA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIG1vdW50ZWRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRNb3VudGVkU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc2V0TW91bnRlZFN0YXRlKHRydWUpO1xuICB9LCBbXSk7XG4gIHZhciBlbmFibGVUb3VjaFJpcHBsZSA9IG1vdW50ZWRTdGF0ZSAmJiAhZGlzYWJsZVJpcHBsZSAmJiAhZGlzYWJsZWQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGVuYWJsZVRvdWNoUmlwcGxlICYmICFyaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgY29tcG9uZW50YCBwcm9wIHByb3ZpZGVkIHRvIEJ1dHRvbkJhc2UgaXMgaW52YWxpZC4nLCAnUGxlYXNlIG1ha2Ugc3VyZSB0aGUgY2hpbGRyZW4gcHJvcCBpcyByZW5kZXJlZCBpbiB0aGlzIGN1c3RvbSBjb21wb25lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtlbmFibGVUb3VjaFJpcHBsZV0pO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudFByb3AsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGZvY3VzVmlzaWJsZSAmJiBbY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZV0sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQpLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICBvbktleVVwOiBoYW5kbGVLZXlVcCxcbiAgICBvbk1vdXNlRG93bjogaGFuZGxlTW91c2VEb3duLFxuICAgIG9uTW91c2VMZWF2ZTogaGFuZGxlTW91c2VMZWF2ZSxcbiAgICBvbk1vdXNlVXA6IGhhbmRsZU1vdXNlVXAsXG4gICAgb25EcmFnTGVhdmU6IGhhbmRsZURyYWdMZWF2ZSxcbiAgICBvblRvdWNoRW5kOiBoYW5kbGVUb3VjaEVuZCxcbiAgICBvblRvdWNoTW92ZTogaGFuZGxlVG91Y2hNb3ZlLFxuICAgIG9uVG91Y2hTdGFydDogaGFuZGxlVG91Y2hTdGFydCxcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICB0YWJJbmRleDogZGlzYWJsZWQgPyAtMSA6IHRhYkluZGV4XG4gIH0sIGJ1dHRvblByb3BzLCBvdGhlciksIGNoaWxkcmVuLCBlbmFibGVUb3VjaFJpcHBsZSA/XG4gIC8qI19fUFVSRV9fKi9cblxuICAvKiBUb3VjaFJpcHBsZSBpcyBvbmx5IG5lZWRlZCBjbGllbnQtc2lkZSwgeDIgYm9vc3Qgb24gdGhlIHNlcnZlci4gKi9cbiAgUmVhY3QuY3JlYXRlRWxlbWVudChUb3VjaFJpcHBsZSwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmlwcGxlUmVmLFxuICAgIGNlbnRlcjogY2VudGVyUmlwcGxlXG4gIH0sIFRvdWNoUmlwcGxlUHJvcHMpKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b25CYXNlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgcmVmIGZvciBpbXBlcmF0aXZlIGFjdGlvbnMuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIGBmb2N1c1Zpc2libGUoKWAgYWN0aW9uLlxuICAgKi9cbiAgYWN0aW9uOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIFVzZSB0aGF0IHByb3AgdG8gcGFzcyBhIHJlZiB0byB0aGUgbmF0aXZlIGJ1dHRvbiBjb21wb25lbnQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgcmVmYCBpbnN0ZWFkLlxuICAgKi9cbiAgYnV0dG9uUmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGVzIHdpbGwgYmUgY2VudGVyZWQuXG4gICAqIFRoZXkgd29uJ3Qgc3RhcnQgYXQgdGhlIGN1cnNvciBpbnRlcmFjdGlvbiBwb3NpdGlvbi5cbiAgICovXG4gIGNlbnRlclJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGBmb2N1c1Zpc2libGVDbGFzc05hbWVgLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRvdWNoIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVUb3VjaFJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgaGF2ZSBhIGtleWJvYXJkIGZvY3VzIHJpcHBsZS5cbiAgICogYGRpc2FibGVSaXBwbGVgIG11c3QgYWxzbyBiZSBgZmFsc2VgLlxuICAgKi9cbiAgZm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgYSBwZXJzb24ga25vdyB3aGljaCBlbGVtZW50IGhhcyB0aGUga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW4gdGhlIGZvY3VzIHRocm91Z2ggYSBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICogSXQncyBhIHBvbHlmaWxsIGZvciB0aGUgW0NTUyA6Zm9jdXMtdmlzaWJsZSBzZWxlY3Rvcl0oaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy00LyN0aGUtZm9jdXMtdmlzaWJsZS1wc2V1ZG8pLlxuICAgKiBUaGUgcmF0aW9uYWxlIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW5lZCBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvbWFzdGVyL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRHJhZ0xlYXZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkIHdpdGggYSBrZXlib2FyZC5cbiAgICogV2UgdHJpZ2dlciBhIGBvbkZvY3VzYCBjYWxsYmFjayB0b28uXG4gICAqL1xuICBvbkZvY3VzVmlzaWJsZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlRG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hFbmQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoTW92ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hTdGFydDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGBUb3VjaFJpcHBsZWAgZWxlbWVudC5cbiAgICovXG4gIFRvdWNoUmlwcGxlUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gY29udHJvbCB0aGUgYnV0dG9uJ3MgcHVycG9zZS5cbiAgICogVGhpcyBwcm9wIHBhc3NlcyB0aGUgdmFsdWUgdG8gdGhlIGB0eXBlYCBhdHRyaWJ1dGUgb2YgdGhlIG5hdGl2ZSBidXR0b24gY29tcG9uZW50LlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnc3VibWl0JywgJ3Jlc2V0JywgJ2J1dHRvbiddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCdXR0b25CYXNlJ1xufSkoQnV0dG9uQmFzZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBnZXREaXNwbGF5TmFtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUNsYXNzZXMoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGJhc2VDbGFzc2VzID0gb3B0aW9ucy5iYXNlQ2xhc3NlcyxcbiAgICAgIG5ld0NsYXNzZXMgPSBvcHRpb25zLm5ld0NsYXNzZXMsXG4gICAgICBDb21wb25lbnQgPSBvcHRpb25zLkNvbXBvbmVudDtcblxuICBpZiAoIW5ld0NsYXNzZXMpIHtcbiAgICByZXR1cm4gYmFzZUNsYXNzZXM7XG4gIH1cblxuICB2YXIgbmV4dENsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgYmFzZUNsYXNzZXMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdDbGFzc2VzID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIHZhbHVlIGBcIi5jb25jYXQobmV3Q2xhc3NlcywgXCJgIFwiKSArIFwicHJvdmlkZWQgdG8gdGhlIGNsYXNzZXMgcHJvcCBvZiBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIgaXMgaW5jb3JyZWN0LlwiKSwgJ1lvdSBtaWdodCB3YW50IHRvIHVzZSB0aGUgY2xhc3NOYW1lIHByb3AgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICByZXR1cm4gYmFzZUNsYXNzZXM7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMobmV3Q2xhc3NlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghYmFzZUNsYXNzZXNba2V5XSAmJiBuZXdDbGFzc2VzW2tleV0pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIGtleSBgXCIuY29uY2F0KGtleSwgXCJgIFwiKSArIFwicHJvdmlkZWQgdG8gdGhlIGNsYXNzZXMgcHJvcCBpcyBub3QgaW1wbGVtZW50ZWQgaW4gXCIuY29uY2F0KGdldERpc3BsYXlOYW1lKENvbXBvbmVudCksIFwiLlwiKSwgXCJZb3UgY2FuIG9ubHkgb3ZlcnJpZGUgb25lIG9mIHRoZSBmb2xsb3dpbmc6IFwiLmNvbmNhdChPYmplY3Qua2V5cyhiYXNlQ2xhc3Nlcykuam9pbignLCcpLCBcIi5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5ld0NsYXNzZXNba2V5XSAmJiB0eXBlb2YgbmV3Q2xhc3Nlc1trZXldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUga2V5IGBcIi5jb25jYXQoa2V5LCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIGlzIG5vdCB2YWxpZCBmb3IgXCIuY29uY2F0KGdldERpc3BsYXlOYW1lKENvbXBvbmVudCksIFwiLlwiKSwgXCJZb3UgbmVlZCB0byBwcm92aWRlIGEgbm9uIGVtcHR5IHN0cmluZyBpbnN0ZWFkIG9mOiBcIi5jb25jYXQobmV3Q2xhc3Nlc1trZXldLCBcIi5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmV3Q2xhc3Nlc1trZXldKSB7XG4gICAgICBuZXh0Q2xhc3Nlc1trZXldID0gXCJcIi5jb25jYXQoYmFzZUNsYXNzZXNba2V5XSwgXCIgXCIpLmNvbmNhdChuZXdDbGFzc2VzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXh0Q2xhc3Nlcztcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG4vLyBBIGdyaWQgY29tcG9uZW50IHVzaW5nIHRoZSBmb2xsb3dpbmcgbGlicyBhcyBpbnNwaXJhdGlvbi5cbi8vXG4vLyBGb3IgdGhlIGltcGxlbWVudGF0aW9uOlxuLy8gLSBodHRwczovL2dldGJvb3RzdHJhcC5jb20vZG9jcy80LjMvbGF5b3V0L2dyaWQvXG4vLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlzdG9mZXJqb3NlcGgvZmxleGJveGdyaWQvYmxvYi9tYXN0ZXIvc3JjL2Nzcy9mbGV4Ym94Z3JpZC5jc3Ncbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL3JveWxlZTA3MDQvcmVhY3QtZmxleGJveC1ncmlkXG4vLyAtIGh0dHBzOi8vbWF0ZXJpYWwuYW5ndWxhcmpzLm9yZy9sYXRlc3QvbGF5b3V0L2ludHJvZHVjdGlvblxuLy9cbi8vIEZvbGxvdyB0aGlzIGZsZXhib3ggR3VpZGUgdG8gYmV0dGVyIHVuZGVyc3RhbmQgdGhlIHVuZGVybHlpbmcgbW9kZWw6XG4vLyAtIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvY3NzL2EtZ3VpZGUtdG8tZmxleGJveC9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCByZXF1aXJlUHJvcEZhY3RvcnkgZnJvbSAnLi4vdXRpbHMvcmVxdWlyZVByb3BGYWN0b3J5JztcbnZhciBTUEFDSU5HUyA9IFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMF07XG52YXIgR1JJRF9TSVpFUyA9IFsnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUdyaWQoZ2xvYmFsU3R5bGVzLCB0aGVtZSwgYnJlYWtwb2ludCkge1xuICB2YXIgc3R5bGVzID0ge307XG4gIEdSSURfU0laRVMuZm9yRWFjaChmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHZhciBrZXkgPSBcImdyaWQtXCIuY29uY2F0KGJyZWFrcG9pbnQsIFwiLVwiKS5jb25jYXQoc2l6ZSk7XG5cbiAgICBpZiAoc2l6ZSA9PT0gdHJ1ZSkge1xuICAgICAgLy8gRm9yIHRoZSBhdXRvIGxheW91dGluZ1xuICAgICAgc3R5bGVzW2tleV0gPSB7XG4gICAgICAgIGZsZXhCYXNpczogMCxcbiAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgIG1heFdpZHRoOiAnMTAwJSdcbiAgICAgIH07XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHNpemUgPT09ICdhdXRvJykge1xuICAgICAgc3R5bGVzW2tleV0gPSB7XG4gICAgICAgIGZsZXhCYXNpczogJ2F1dG8nLFxuICAgICAgICBmbGV4R3JvdzogMCxcbiAgICAgICAgbWF4V2lkdGg6ICdub25lJ1xuICAgICAgfTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEtlZXAgNyBzaWduaWZpY2FudCBudW1iZXJzLlxuXG5cbiAgICB2YXIgd2lkdGggPSBcIlwiLmNvbmNhdChNYXRoLnJvdW5kKHNpemUgLyAxMiAqIDEwZTcpIC8gMTBlNSwgXCIlXCIpOyAvLyBDbG9zZSB0byB0aGUgYm9vdHN0cmFwIGltcGxlbWVudGF0aW9uOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzhmY2NhYTI0MzllOTdlYzcyYTRiN2RjNDJjY2MxZjY0OTc5MGFkYjAvc2Nzcy9taXhpbnMvX2dyaWQuc2NzcyNMNDFcblxuICAgIHN0eWxlc1trZXldID0ge1xuICAgICAgZmxleEJhc2lzOiB3aWR0aCxcbiAgICAgIGZsZXhHcm93OiAwLFxuICAgICAgbWF4V2lkdGg6IHdpZHRoXG4gICAgfTtcbiAgfSk7IC8vIE5vIG5lZWQgZm9yIGEgbWVkaWEgcXVlcnkgZm9yIHRoZSBmaXJzdCBzaXplLlxuXG4gIGlmIChicmVha3BvaW50ID09PSAneHMnKSB7XG4gICAgX2V4dGVuZHMoZ2xvYmFsU3R5bGVzLCBzdHlsZXMpO1xuICB9IGVsc2Uge1xuICAgIGdsb2JhbFN0eWxlc1t0aGVtZS5icmVha3BvaW50cy51cChicmVha3BvaW50KV0gPSBzdHlsZXM7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0KHZhbCkge1xuICB2YXIgZGl2ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuICB2YXIgcGFyc2UgPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBcIlwiLmNvbmNhdChwYXJzZSAvIGRpdikuY29uY2F0KFN0cmluZyh2YWwpLnJlcGxhY2UoU3RyaW5nKHBhcnNlKSwgJycpIHx8ICdweCcpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUd1dHRlcih0aGVtZSwgYnJlYWtwb2ludCkge1xuICB2YXIgc3R5bGVzID0ge307XG4gIFNQQUNJTkdTLmZvckVhY2goZnVuY3Rpb24gKHNwYWNpbmcpIHtcbiAgICB2YXIgdGhlbWVTcGFjaW5nID0gdGhlbWUuc3BhY2luZyhzcGFjaW5nKTtcblxuICAgIGlmICh0aGVtZVNwYWNpbmcgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdHlsZXNbXCJzcGFjaW5nLVwiLmNvbmNhdChicmVha3BvaW50LCBcIi1cIikuY29uY2F0KHNwYWNpbmcpXSA9IHtcbiAgICAgIG1hcmdpbjogXCItXCIuY29uY2F0KGdldE9mZnNldCh0aGVtZVNwYWNpbmcsIDIpKSxcbiAgICAgIHdpZHRoOiBcImNhbGMoMTAwJSArIFwiLmNvbmNhdChnZXRPZmZzZXQodGhlbWVTcGFjaW5nKSwgXCIpXCIpLFxuICAgICAgJyYgPiAkaXRlbSc6IHtcbiAgICAgICAgcGFkZGluZzogZ2V0T2Zmc2V0KHRoZW1lU3BhY2luZywgMilcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHN0eWxlcztcbn0gLy8gRGVmYXVsdCBDU1MgdmFsdWVzXG4vLyBmbGV4OiAnMCAxIGF1dG8nLFxuLy8gZmxleERpcmVjdGlvbjogJ3JvdycsXG4vLyBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCcsXG4vLyBmbGV4V3JhcDogJ25vd3JhcCcsXG4vLyBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuXG5cbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiBfZXh0ZW5kcyhfZXh0ZW5kcyh7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbnRhaW5lcj17dHJ1ZX1gLiAqL1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBpdGVtPXt0cnVlfWAuICovXG4gICAgaXRlbToge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBtYXJnaW46ICcwJyAvLyBGb3IgaW5zdGFuY2UsIGl0J3MgdXNlZnVsIHdoZW4gdXNlZCB3aXRoIGEgYGZpZ3VyZWAgZWxlbWVudC5cblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB6ZXJvTWluV2lkdGg9e3RydWV9YC4gKi9cbiAgICB6ZXJvTWluV2lkdGg6IHtcbiAgICAgIG1pbldpZHRoOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpcmVjdGlvbj1cImNvbHVtblwiYC4gKi9cbiAgICAnZGlyZWN0aW9uLXhzLWNvbHVtbic6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpcmVjdGlvbj1cImNvbHVtbi1yZXZlcnNlXCJgLiAqL1xuICAgICdkaXJlY3Rpb24teHMtY29sdW1uLXJldmVyc2UnOiB7XG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uLXJldmVyc2UnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpcmVjdGlvbj1cInJvdy1yZXZlcnNlXCJgLiAqL1xuICAgICdkaXJlY3Rpb24teHMtcm93LXJldmVyc2UnOiB7XG4gICAgICBmbGV4RGlyZWN0aW9uOiAncm93LXJldmVyc2UnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHdyYXA9XCJub3dyYXBcImAuICovXG4gICAgJ3dyYXAteHMtbm93cmFwJzoge1xuICAgICAgZmxleFdyYXA6ICdub3dyYXAnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHdyYXA9XCJyZXZlcnNlXCJgLiAqL1xuICAgICd3cmFwLXhzLXdyYXAtcmV2ZXJzZSc6IHtcbiAgICAgIGZsZXhXcmFwOiAnd3JhcC1yZXZlcnNlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkl0ZW1zPVwiY2VudGVyXCJgLiAqL1xuICAgICdhbGlnbi1pdGVtcy14cy1jZW50ZXInOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkl0ZW1zPVwiZmxleC1zdGFydFwiYC4gKi9cbiAgICAnYWxpZ24taXRlbXMteHMtZmxleC1zdGFydCc6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkl0ZW1zPVwiZmxleC1lbmRcImAuICovXG4gICAgJ2FsaWduLWl0ZW1zLXhzLWZsZXgtZW5kJzoge1xuICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtZW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkl0ZW1zPVwiYmFzZWxpbmVcImAuICovXG4gICAgJ2FsaWduLWl0ZW1zLXhzLWJhc2VsaW5lJzoge1xuICAgICAgYWxpZ25JdGVtczogJ2Jhc2VsaW5lJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJjZW50ZXJcImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtY2VudGVyJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJmbGV4LXN0YXJ0XCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLWZsZXgtc3RhcnQnOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdmbGV4LXN0YXJ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJmbGV4LWVuZFwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1mbGV4LWVuZCc6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ2ZsZXgtZW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJzcGFjZS1iZXR3ZWVuXCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLXNwYWNlLWJldHdlZW4nOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbkNvbnRlbnQ9XCJzcGFjZS1hcm91bmRcImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtc3BhY2UtYXJvdW5kJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnc3BhY2UtYXJvdW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwiY2VudGVyXCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLWNlbnRlcic6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwiZmxleC1lbmRcImAuICovXG4gICAgJ2p1c3RpZnkteHMtZmxleC1lbmQnOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwic3BhY2UtYmV0d2VlblwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1zcGFjZS1iZXR3ZWVuJzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwic3BhY2UtYXJvdW5kXCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLXNwYWNlLWFyb3VuZCc6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYXJvdW5kJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBqdXN0aWZ5PVwic3BhY2UtZXZlbmx5XCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLXNwYWNlLWV2ZW5seSc6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtZXZlbmx5J1xuICAgIH1cbiAgfSwgZ2VuZXJhdGVHdXR0ZXIodGhlbWUsICd4cycpKSwgdGhlbWUuYnJlYWtwb2ludHMua2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBrZXkpIHtcbiAgICAvLyBVc2Ugc2lkZSBlZmZlY3Qgb3ZlciBpbW11dGFiaWxpdHkgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5cbiAgICBnZW5lcmF0ZUdyaWQoYWNjdW11bGF0b3IsIHRoZW1lLCBrZXkpO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfSwge30pKTtcbn07XG52YXIgR3JpZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gR3JpZChwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYWxpZ25Db250ZW50ID0gcHJvcHMuYWxpZ25Db250ZW50LFxuICAgICAgYWxpZ25Db250ZW50ID0gX3Byb3BzJGFsaWduQ29udGVudCA9PT0gdm9pZCAwID8gJ3N0cmV0Y2gnIDogX3Byb3BzJGFsaWduQ29udGVudCxcbiAgICAgIF9wcm9wcyRhbGlnbkl0ZW1zID0gcHJvcHMuYWxpZ25JdGVtcyxcbiAgICAgIGFsaWduSXRlbXMgPSBfcHJvcHMkYWxpZ25JdGVtcyA9PT0gdm9pZCAwID8gJ3N0cmV0Y2gnIDogX3Byb3BzJGFsaWduSXRlbXMsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGNvbnRhaW5lciA9IHByb3BzLmNvbnRhaW5lcixcbiAgICAgIGNvbnRhaW5lciA9IF9wcm9wcyRjb250YWluZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNvbnRhaW5lcixcbiAgICAgIF9wcm9wcyRkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBkaXJlY3Rpb24gPSBfcHJvcHMkZGlyZWN0aW9uID09PSB2b2lkIDAgPyAncm93JyA6IF9wcm9wcyRkaXJlY3Rpb24sXG4gICAgICBfcHJvcHMkaXRlbSA9IHByb3BzLml0ZW0sXG4gICAgICBpdGVtID0gX3Byb3BzJGl0ZW0gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGl0ZW0sXG4gICAgICBfcHJvcHMkanVzdGlmeSA9IHByb3BzLmp1c3RpZnksXG4gICAgICBqdXN0aWZ5ID0gX3Byb3BzJGp1c3RpZnkgPT09IHZvaWQgMCA/ICdmbGV4LXN0YXJ0JyA6IF9wcm9wcyRqdXN0aWZ5LFxuICAgICAgX3Byb3BzJGxnID0gcHJvcHMubGcsXG4gICAgICBsZyA9IF9wcm9wcyRsZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbGcsXG4gICAgICBfcHJvcHMkbWQgPSBwcm9wcy5tZCxcbiAgICAgIG1kID0gX3Byb3BzJG1kID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtZCxcbiAgICAgIF9wcm9wcyRzbSA9IHByb3BzLnNtLFxuICAgICAgc20gPSBfcHJvcHMkc20gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHNtLFxuICAgICAgX3Byb3BzJHNwYWNpbmcgPSBwcm9wcy5zcGFjaW5nLFxuICAgICAgc3BhY2luZyA9IF9wcm9wcyRzcGFjaW5nID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJHNwYWNpbmcsXG4gICAgICBfcHJvcHMkd3JhcCA9IHByb3BzLndyYXAsXG4gICAgICB3cmFwID0gX3Byb3BzJHdyYXAgPT09IHZvaWQgMCA/ICd3cmFwJyA6IF9wcm9wcyR3cmFwLFxuICAgICAgX3Byb3BzJHhsID0gcHJvcHMueGwsXG4gICAgICB4bCA9IF9wcm9wcyR4bCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkeGwsXG4gICAgICBfcHJvcHMkeHMgPSBwcm9wcy54cyxcbiAgICAgIHhzID0gX3Byb3BzJHhzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR4cyxcbiAgICAgIF9wcm9wcyR6ZXJvTWluV2lkdGggPSBwcm9wcy56ZXJvTWluV2lkdGgsXG4gICAgICB6ZXJvTWluV2lkdGggPSBfcHJvcHMkemVyb01pbldpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR6ZXJvTWluV2lkdGgsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWxpZ25Db250ZW50XCIsIFwiYWxpZ25JdGVtc1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjb250YWluZXJcIiwgXCJkaXJlY3Rpb25cIiwgXCJpdGVtXCIsIFwianVzdGlmeVwiLCBcImxnXCIsIFwibWRcIiwgXCJzbVwiLCBcInNwYWNpbmdcIiwgXCJ3cmFwXCIsIFwieGxcIiwgXCJ4c1wiLCBcInplcm9NaW5XaWR0aFwiXSk7XG5cbiAgdmFyIGNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWVQcm9wLCBjb250YWluZXIgJiYgW2NsYXNzZXMuY29udGFpbmVyLCBzcGFjaW5nICE9PSAwICYmIGNsYXNzZXNbXCJzcGFjaW5nLXhzLVwiLmNvbmNhdChTdHJpbmcoc3BhY2luZykpXV0sIGl0ZW0gJiYgY2xhc3Nlcy5pdGVtLCB6ZXJvTWluV2lkdGggJiYgY2xhc3Nlcy56ZXJvTWluV2lkdGgsIGRpcmVjdGlvbiAhPT0gJ3JvdycgJiYgY2xhc3Nlc1tcImRpcmVjdGlvbi14cy1cIi5jb25jYXQoU3RyaW5nKGRpcmVjdGlvbikpXSwgd3JhcCAhPT0gJ3dyYXAnICYmIGNsYXNzZXNbXCJ3cmFwLXhzLVwiLmNvbmNhdChTdHJpbmcod3JhcCkpXSwgYWxpZ25JdGVtcyAhPT0gJ3N0cmV0Y2gnICYmIGNsYXNzZXNbXCJhbGlnbi1pdGVtcy14cy1cIi5jb25jYXQoU3RyaW5nKGFsaWduSXRlbXMpKV0sIGFsaWduQ29udGVudCAhPT0gJ3N0cmV0Y2gnICYmIGNsYXNzZXNbXCJhbGlnbi1jb250ZW50LXhzLVwiLmNvbmNhdChTdHJpbmcoYWxpZ25Db250ZW50KSldLCBqdXN0aWZ5ICE9PSAnZmxleC1zdGFydCcgJiYgY2xhc3Nlc1tcImp1c3RpZnkteHMtXCIuY29uY2F0KFN0cmluZyhqdXN0aWZ5KSldLCB4cyAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcImdyaWQteHMtXCIuY29uY2F0KFN0cmluZyh4cykpXSwgc20gIT09IGZhbHNlICYmIGNsYXNzZXNbXCJncmlkLXNtLVwiLmNvbmNhdChTdHJpbmcoc20pKV0sIG1kICE9PSBmYWxzZSAmJiBjbGFzc2VzW1wiZ3JpZC1tZC1cIi5jb25jYXQoU3RyaW5nKG1kKSldLCBsZyAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcImdyaWQtbGctXCIuY29uY2F0KFN0cmluZyhsZykpXSwgeGwgIT09IGZhbHNlICYmIGNsYXNzZXNbXCJncmlkLXhsLVwiLmNvbmNhdChTdHJpbmcoeGwpKV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR3JpZC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgYWxpZ24tY29udGVudGAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIGFsaWduQ29udGVudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RyZXRjaCcsICdjZW50ZXInLCAnZmxleC1zdGFydCcsICdmbGV4LWVuZCcsICdzcGFjZS1iZXR3ZWVuJywgJ3NwYWNlLWFyb3VuZCddKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGFsaWduLWl0ZW1zYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAgYWxpZ25JdGVtczogUHJvcFR5cGVzLm9uZU9mKFsnZmxleC1zdGFydCcsICdjZW50ZXInLCAnZmxleC1lbmQnLCAnc3RyZXRjaCcsICdiYXNlbGluZSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGhhdmUgdGhlIGZsZXggKmNvbnRhaW5lciogYmVoYXZpb3IuXG4gICAqIFlvdSBzaG91bGQgYmUgd3JhcHBpbmcgKml0ZW1zKiB3aXRoIGEgKmNvbnRhaW5lciouXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgZmxleC1kaXJlY3Rpb25gIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCBpcyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydyb3cnLCAncm93LXJldmVyc2UnLCAnY29sdW1uJywgJ2NvbHVtbi1yZXZlcnNlJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCBoYXZlIHRoZSBmbGV4ICppdGVtKiBiZWhhdmlvci5cbiAgICogWW91IHNob3VsZCBiZSB3cmFwcGluZyAqaXRlbXMqIHdpdGggYSAqY29udGFpbmVyKi5cbiAgICovXG4gIGl0ZW06IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBganVzdGlmeS1jb250ZW50YCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQgaXMgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIGp1c3RpZnk6IFByb3BUeXBlcy5vbmVPZihbJ2ZsZXgtc3RhcnQnLCAnY2VudGVyJywgJ2ZsZXgtZW5kJywgJ3NwYWNlLWJldHdlZW4nLCAnc3BhY2UtYXJvdW5kJywgJ3NwYWNlLWV2ZW5seSddKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgbGdgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqL1xuICBsZzogUHJvcFR5cGVzLm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciB0aGUgYG1kYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKi9cbiAgbWQ6IFByb3BUeXBlcy5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgdGhlIGBzbWAgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICovXG4gIHNtOiBQcm9wVHlwZXMub25lT2YoW2ZhbHNlLCAnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgdHlwZSBgaXRlbWAgY29tcG9uZW50LlxuICAgKiBJdCBjYW4gb25seSBiZSB1c2VkIG9uIGEgdHlwZSBgY29udGFpbmVyYCBjb21wb25lbnQuXG4gICAqL1xuICBzcGFjaW5nOiBQcm9wVHlwZXMub25lT2YoU1BBQ0lOR1MpLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgZmxleC13cmFwYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAgd3JhcDogUHJvcFR5cGVzLm9uZU9mKFsnbm93cmFwJywgJ3dyYXAnLCAnd3JhcC1yZXZlcnNlJ10pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgdGhlIGB4bGAgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucy5cbiAgICovXG4gIHhsOiBQcm9wVHlwZXMub25lT2YoW2ZhbHNlLCAnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCB0aGUgc2NyZWVuIHNpemVzIHdpdGggdGhlIGxvd2VzdCBwcmlvcml0eS5cbiAgICovXG4gIHhzOiBQcm9wVHlwZXMub25lT2YoW2ZhbHNlLCAnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBpdCBzZXRzIGBtaW4td2lkdGg6IDBgIG9uIHRoZSBpdGVtLlxuICAgKiBSZWZlciB0byB0aGUgbGltaXRhdGlvbnMgc2VjdGlvbiBvZiB0aGUgZG9jdW1lbnRhdGlvbiB0byBiZXR0ZXIgdW5kZXJzdGFuZCB0aGUgdXNlIGNhc2UuXG4gICAqL1xuICB6ZXJvTWluV2lkdGg6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xudmFyIFN0eWxlZEdyaWQgPSB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpR3JpZCdcbn0pKEdyaWQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcmVxdWlyZVByb3AgPSByZXF1aXJlUHJvcEZhY3RvcnkoJ0dyaWQnKTtcbiAgU3R5bGVkR3JpZC5wcm9wVHlwZXMgPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgU3R5bGVkR3JpZC5wcm9wVHlwZXMpLCB7fSwge1xuICAgIGFsaWduQ29udGVudDogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIGFsaWduSXRlbXM6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBkaXJlY3Rpb246IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBqdXN0aWZ5OiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgbGc6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgbWQ6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc206IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc3BhY2luZzogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIHdyYXA6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICB4czogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICB6ZXJvTWluV2lkdGg6IHJlcXVpcmVQcm9wKCdpdGVtJylcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0eWxlZEdyaWQ7IiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRoZW1lUHJvcHMocGFyYW1zKSB7XG4gIHZhciB0aGVtZSA9IHBhcmFtcy50aGVtZSxcbiAgICAgIG5hbWUgPSBwYXJhbXMubmFtZSxcbiAgICAgIHByb3BzID0gcGFyYW1zLnByb3BzO1xuXG4gIGlmICghdGhlbWUgfHwgIXRoZW1lLnByb3BzIHx8ICF0aGVtZS5wcm9wc1tuYW1lXSkge1xuICAgIHJldHVybiBwcm9wcztcbiAgfSAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHMsIGNvZGUgYm9ycm93IGZyb20gUmVhY3Qgc291cmNlLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8xNWE4ZjAzMTgzOGE1NTNlNDFjMGI2NmViMWJjZjFkYTg0NDgxMDRkL3BhY2thZ2VzL3JlYWN0L3NyYy9SZWFjdEVsZW1lbnQuanMjTDIyMVxuXG5cbiAgdmFyIGRlZmF1bHRQcm9wcyA9IHRoZW1lLnByb3BzW25hbWVdO1xuICB2YXIgcHJvcE5hbWU7XG5cbiAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHByb3BzO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHVzZUlzRm9jdXNWaXNpYmxlIGZyb20gJy4uL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge30sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdW5kZXJsaW5lPVwibm9uZVwiYC4gKi9cbiAgdW5kZXJsaW5lTm9uZToge1xuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZSdcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB1bmRlcmxpbmU9XCJob3ZlclwiYC4gKi9cbiAgdW5kZXJsaW5lSG92ZXI6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgdGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnXG4gICAgfVxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHVuZGVybGluZT1cImFsd2F5c1wiYC4gKi9cbiAgdW5kZXJsaW5lQWx3YXlzOiB7XG4gICAgdGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnXG4gIH0sXG4gIC8vIFNhbWUgcmVzZXQgYXMgQnV0dG9uQmFzZS5yb290XG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29tcG9uZW50PVwiYnV0dG9uXCJgLiAqL1xuICBidXR0b246IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgLy8gUmVzZXQgZGVmYXVsdCB2YWx1ZVxuICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgb3V0bGluZTogMCxcbiAgICBib3JkZXI6IDAsXG4gICAgbWFyZ2luOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgbWFyZ2luIGluIFNhZmFyaVxuICAgIGJvcmRlclJhZGl1czogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBGaXJlZm94XG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICctbW96LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgLy8gUmVzZXRcbiAgICAnLXdlYmtpdC1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuXG4gICAgfSxcbiAgICAnJiRmb2N1c1Zpc2libGUnOiB7XG4gICAgICBvdXRsaW5lOiAnYXV0bydcbiAgICB9XG4gIH0sXG5cbiAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgbGluayBpcyBrZXlib2FyZCBmb2N1c2VkLiAqL1xuICBmb2N1c1Zpc2libGU6IHt9XG59O1xudmFyIExpbmsgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmsocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAncHJpbWFyeScgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2EnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgVHlwb2dyYXBoeUNsYXNzZXMgPSBwcm9wcy5UeXBvZ3JhcGh5Q2xhc3NlcyxcbiAgICAgIF9wcm9wcyR1bmRlcmxpbmUgPSBwcm9wcy51bmRlcmxpbmUsXG4gICAgICB1bmRlcmxpbmUgPSBfcHJvcHMkdW5kZXJsaW5lID09PSB2b2lkIDAgPyAnaG92ZXInIDogX3Byb3BzJHVuZGVybGluZSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ2luaGVyaXQnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwib25CbHVyXCIsIFwib25Gb2N1c1wiLCBcIlR5cG9ncmFwaHlDbGFzc2VzXCIsIFwidW5kZXJsaW5lXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIF91c2VJc0ZvY3VzVmlzaWJsZSA9IHVzZUlzRm9jdXNWaXNpYmxlKCksXG4gICAgICBpc0ZvY3VzVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5pc0ZvY3VzVmlzaWJsZSxcbiAgICAgIG9uQmx1clZpc2libGUgPSBfdXNlSXNGb2N1c1Zpc2libGUub25CbHVyVmlzaWJsZSxcbiAgICAgIGZvY3VzVmlzaWJsZVJlZiA9IF91c2VJc0ZvY3VzVmlzaWJsZS5yZWY7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGZvY3VzVmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldEZvY3VzVmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgaGFuZGxlclJlZiA9IHVzZUZvcmtSZWYocmVmLCBmb2N1c1Zpc2libGVSZWYpO1xuXG4gIHZhciBoYW5kbGVCbHVyID0gZnVuY3Rpb24gaGFuZGxlQmx1cihldmVudCkge1xuICAgIGlmIChmb2N1c1Zpc2libGUpIHtcbiAgICAgIG9uQmx1clZpc2libGUoKTtcbiAgICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUZvY3VzID0gZnVuY3Rpb24gaGFuZGxlRm9jdXMoZXZlbnQpIHtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGUoZXZlbnQpKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHlwb2dyYXBoeSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJ1bmRlcmxpbmVcIi5jb25jYXQoY2FwaXRhbGl6ZSh1bmRlcmxpbmUpKV0sIGNsYXNzTmFtZSwgZm9jdXNWaXNpYmxlICYmIGNsYXNzZXMuZm9jdXNWaXNpYmxlLCBjb21wb25lbnQgPT09ICdidXR0b24nICYmIGNsYXNzZXMuYnV0dG9uKSxcbiAgICBjbGFzc2VzOiBUeXBvZ3JhcGh5Q2xhc3NlcyxcbiAgICBjb2xvcjogY29sb3IsXG4gICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIHJlZjogaGFuZGxlclJlZixcbiAgICB2YXJpYW50OiB2YXJpYW50XG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpbmsucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGxpbmsuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBsaW5rLlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2luaXRpYWwnLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICd0ZXh0UHJpbWFyeScsICd0ZXh0U2Vjb25kYXJ5JywgJ2Vycm9yJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogYGNsYXNzZXNgIHByb3AgYXBwbGllZCB0byB0aGUgW2BUeXBvZ3JhcGh5YF0oL2FwaS90eXBvZ3JhcGh5LykgZWxlbWVudC5cbiAgICovXG4gIFR5cG9ncmFwaHlDbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB3aGVuIHRoZSBsaW5rIHNob3VsZCBoYXZlIGFuIHVuZGVybGluZS5cbiAgICovXG4gIHVuZGVybGluZTogUHJvcFR5cGVzLm9uZU9mKFsnbm9uZScsICdob3ZlcicsICdhbHdheXMnXSksXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIHRoZW1lIHR5cG9ncmFwaHkgc3R5bGVzLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlMaW5rJ1xufSkoTGluayk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIGFzIG1ha2VTdHlsZXNXaXRob3V0RGVmYXVsdCB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5cbmZ1bmN0aW9uIG1ha2VTdHlsZXMoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIG1ha2VTdHlsZXNXaXRob3V0RGVmYXVsdChzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZVxuICB9LCBvcHRpb25zKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1ha2VTdHlsZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgVGhlbWVDb250ZXh0IGZyb20gJy4uL3VzZVRoZW1lL1RoZW1lQ29udGV4dCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnO1xuaW1wb3J0IG5lc3RlZCBmcm9tICcuL25lc3RlZCc7IC8vIFRvIHN1cHBvcnQgY29tcG9zaXRpb24gb2YgdGhlbWUuXG5cbmZ1bmN0aW9uIG1lcmdlT3V0ZXJMb2NhbFRoZW1lKG91dGVyVGhlbWUsIGxvY2FsVGhlbWUpIHtcbiAgaWYgKHR5cGVvZiBsb2NhbFRoZW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG1lcmdlZFRoZW1lID0gbG9jYWxUaGVtZShvdXRlclRoZW1lKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW1lcmdlZFRoZW1lKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogWW91IHNob3VsZCByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLicsICc8VGhlbWVQcm92aWRlciB0aGVtZT17KCkgPT4gKHt9KX0gLz4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcbn1cbi8qKlxuICogVGhpcyBjb21wb25lbnQgdGFrZXMgYSBgdGhlbWVgIHByb3AuXG4gKiBJdCBtYWtlcyB0aGUgYHRoZW1lYCBhdmFpbGFibGUgZG93biB0aGUgUmVhY3QgdHJlZSB0aGFua3MgdG8gUmVhY3QgY29udGV4dC5cbiAqIFRoaXMgY29tcG9uZW50IHNob3VsZCBwcmVmZXJhYmx5IGJlIHVzZWQgYXQgKip0aGUgcm9vdCBvZiB5b3VyIGNvbXBvbmVudCB0cmVlKiouXG4gKi9cblxuXG5mdW5jdGlvbiBUaGVtZVByb3ZpZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgbG9jYWxUaGVtZSA9IHByb3BzLnRoZW1lO1xuICB2YXIgb3V0ZXJUaGVtZSA9IHVzZVRoZW1lKCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAob3V0ZXJUaGVtZSA9PT0gbnVsbCAmJiB0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBZb3UgYXJlIHByb3ZpZGluZyBhIHRoZW1lIGZ1bmN0aW9uIHByb3AgdG8gdGhlIFRoZW1lUHJvdmlkZXIgY29tcG9uZW50OicsICc8VGhlbWVQcm92aWRlciB0aGVtZT17b3V0ZXJUaGVtZSA9PiBvdXRlclRoZW1lfSAvPicsICcnLCAnSG93ZXZlciwgbm8gb3V0ZXIgdGhlbWUgaXMgcHJlc2VudC4nLCAnTWFrZSBzdXJlIGEgdGhlbWUgaXMgYWxyZWFkeSBpbmplY3RlZCBoaWdoZXIgaW4gdGhlIFJlYWN0IHRyZWUgJyArICdvciBwcm92aWRlIGEgdGhlbWUgb2JqZWN0LiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgdGhlbWUgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3V0cHV0ID0gb3V0ZXJUaGVtZSA9PT0gbnVsbCA/IGxvY2FsVGhlbWUgOiBtZXJnZU91dGVyTG9jYWxUaGVtZShvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcblxuICAgIGlmIChvdXRwdXQgIT0gbnVsbCkge1xuICAgICAgb3V0cHV0W25lc3RlZF0gPSBvdXRlclRoZW1lICE9PSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sIFtsb2NhbFRoZW1lLCBvdXRlclRoZW1lXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdGhlbWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQSB0aGVtZSBvYmplY3QuIFlvdSBjYW4gcHJvdmlkZSBhIGZ1bmN0aW9uIHRvIGV4dGVuZCB0aGUgb3V0ZXIgdGhlbWUuXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKS5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IGV4YWN0UHJvcChUaGVtZVByb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1lUHJvdmlkZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmV4cG9ydCB2YXIgaHRtbCA9IHtcbiAgV2Via2l0Rm9udFNtb290aGluZzogJ2FudGlhbGlhc2VkJyxcbiAgLy8gQW50aWFsaWFzaW5nLlxuICBNb3pPc3hGb250U21vb3RoaW5nOiAnZ3JheXNjYWxlJyxcbiAgLy8gQW50aWFsaWFzaW5nLlxuICAvLyBDaGFuZ2UgZnJvbSBgYm94LXNpemluZzogY29udGVudC1ib3hgIHNvIHRoYXQgYHdpZHRoYFxuICAvLyBpcyBub3QgYWZmZWN0ZWQgYnkgYHBhZGRpbmdgIG9yIGBib3JkZXJgLlxuICBib3hTaXppbmc6ICdib3JkZXItYm94J1xufTtcbmV4cG9ydCB2YXIgYm9keSA9IGZ1bmN0aW9uIGJvZHkodGhlbWUpIHtcbiAgcmV0dXJuIF9leHRlbmRzKF9leHRlbmRzKHtcbiAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgfSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5MiksIHt9LCB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdCxcbiAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgLy8gU2F2ZSBwcmludGVyIGluay5cbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGVcbiAgICB9XG4gIH0pO1xufTtcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgJ0BnbG9iYWwnOiB7XG4gICAgICBodG1sOiBodG1sLFxuICAgICAgJyosICo6OmJlZm9yZSwgKjo6YWZ0ZXInOiB7XG4gICAgICAgIGJveFNpemluZzogJ2luaGVyaXQnXG4gICAgICB9LFxuICAgICAgJ3N0cm9uZywgYic6IHtcbiAgICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0Qm9sZFxuICAgICAgfSxcbiAgICAgIGJvZHk6IF9leHRlbmRzKF9leHRlbmRzKHtcbiAgICAgICAgbWFyZ2luOiAwXG4gICAgICB9LCBib2R5KHRoZW1lKSksIHt9LCB7XG4gICAgICAgIC8vIEFkZCBzdXBwb3J0IGZvciBkb2N1bWVudC5ib2R5LnJlcXVlc3RGdWxsU2NyZWVuKCkuXG4gICAgICAgIC8vIE90aGVyIGVsZW1lbnRzLCBpZiBiYWNrZ3JvdW5kIHRyYW5zcGFyZW50LCBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICAgICAgJyY6OmJhY2tkcm9wJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHRcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBLaWNrc3RhcnQgYW4gZWxlZ2FudCwgY29uc2lzdGVudCwgYW5kIHNpbXBsZSBiYXNlbGluZSB0byBidWlsZCB1cG9uLlxuICovXG5cbmZ1bmN0aW9uIENzc0Jhc2VsaW5lKHByb3BzKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gIHZhciBfcHJvcHMkY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNoaWxkcmVuID0gX3Byb3BzJGNoaWxkcmVuID09PSB2b2lkIDAgPyBudWxsIDogX3Byb3BzJGNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXM7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ3NzQmFzZWxpbmUucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogWW91IGNhbiB3cmFwIGEgbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgQ3NzQmFzZWxpbmVbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoQ3NzQmFzZWxpbmUucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUNzc0Jhc2VsaW5lJ1xufSkoQ3NzQmFzZWxpbmUpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGZhZGUgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IF9leHRlbmRzKF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJ1dHRvbiksIHt9LCB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1pbldpZHRoOiA2NCxcbiAgICAgIHBhZGRpbmc6ICc2cHggMTZweCcsXG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdycsICdib3JkZXInXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzcGFuIGVsZW1lbnQgdGhhdCB3cmFwcyB0aGUgY2hpbGRyZW4uICovXG4gICAgbGFiZWw6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAvLyBFbnN1cmUgdGhlIGNvcnJlY3Qgd2lkdGggZm9yIGlPUyBTYWZhcmlcbiAgICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICAgIGFsaWduSXRlbXM6ICdpbmhlcml0JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAuICovXG4gICAgdGV4dDoge1xuICAgICAgcGFkZGluZzogJzZweCA4cHgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJ0ZXh0XCJgIGFuZCBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIHRleHRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAgYW5kIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICB0ZXh0U2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBvdXRsaW5lZDoge1xuICAgICAgcGFkZGluZzogJzVweCAxNXB4JyxcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMjMpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjMpJyksXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgb3V0bGluZWRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCAwLjUpKSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIG91dGxpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgMC41KSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjb250YWluZWRcImAuICovXG4gICAgY29udGFpbmVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0pLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSxcbiAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1syXSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleS5BMTAwLFxuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNF0sXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMl0sXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXVxuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNWaXNpYmxlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNl1cbiAgICAgIH0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s4XVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQsXG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1swXSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImNvbnRhaW5lZFwiYCBhbmQgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb250YWluZWRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY29udGFpbmVkXCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29udGFpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVFbGV2YXRpb249e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlRWxldmF0aW9uOiB7XG4gICAgICBib3hTaGFkb3c6ICdub25lJyxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmJGZvY3VzVmlzaWJsZSc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSBCdXR0b25CYXNlIHJvb3QgZWxlbWVudCBpZiB0aGUgYnV0dG9uIGlzIGtleWJvYXJkIGZvY3VzZWQuICovXG4gICAgZm9jdXNWaXNpYmxlOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGJvcmRlckNvbG9yOiAnY3VycmVudENvbG9yJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAgYW5kIGB2YXJpYW50PVwidGV4dFwiYC4gKi9cbiAgICB0ZXh0U2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAnNHB4IDVweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAgYW5kIGB2YXJpYW50PVwidGV4dFwiYC4gKi9cbiAgICB0ZXh0U2l6ZUxhcmdlOiB7XG4gICAgICBwYWRkaW5nOiAnOHB4IDExcHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgIGFuZCBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkU2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAnM3B4IDlweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAgYW5kIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWRTaXplTGFyZ2U6IHtcbiAgICAgIHBhZGRpbmc6ICc3cHggMjFweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAgYW5kIGB2YXJpYW50PVwiY29udGFpbmVkXCJgLiAqL1xuICAgIGNvbnRhaW5lZFNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogJzRweCAxMHB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJsYXJnZVwiYCBhbmQgYHZhcmlhbnQ9XCJjb250YWluZWRcImAuICovXG4gICAgY29udGFpbmVkU2l6ZUxhcmdlOiB7XG4gICAgICBwYWRkaW5nOiAnOHB4IDIycHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAuICovXG4gICAgc2l6ZUxhcmdlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc3RhcnRJY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQuICovXG4gICAgc3RhcnRJY29uOiB7XG4gICAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgICBtYXJnaW5SaWdodDogOCxcbiAgICAgIG1hcmdpbkxlZnQ6IC00LFxuICAgICAgJyYkaWNvblNpemVTbWFsbCc6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogLTJcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGVuZEljb24gZWxlbWVudCBpZiBzdXBwbGllZC4gKi9cbiAgICBlbmRJY29uOiB7XG4gICAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgICBtYXJnaW5SaWdodDogLTQsXG4gICAgICBtYXJnaW5MZWZ0OiA4LFxuICAgICAgJyYkaWNvblNpemVTbWFsbCc6IHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IC0yXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQgYW5kIGBzaXplPVwic21hbGxcImAuICovXG4gICAgaWNvblNpemVTbWFsbDoge1xuICAgICAgJyYgPiAqOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICBmb250U2l6ZTogMThcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gZWxlbWVudCBpZiBzdXBwbGllZCBhbmQgYHNpemU9XCJtZWRpdW1cImAuICovXG4gICAgaWNvblNpemVNZWRpdW06IHtcbiAgICAgICcmID4gKjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgZm9udFNpemU6IDIwXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQgYW5kIGBzaXplPVwibGFyZ2VcImAuICovXG4gICAgaWNvblNpemVMYXJnZToge1xuICAgICAgJyYgPiAqOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICBmb250U2l6ZTogMjJcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xudmFyIEJ1dHRvbiA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRWxldmF0aSA9IHByb3BzLmRpc2FibGVFbGV2YXRpb24sXG4gICAgICBkaXNhYmxlRWxldmF0aW9uID0gX3Byb3BzJGRpc2FibGVFbGV2YXRpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRWxldmF0aSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9IHByb3BzLmRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUZvY3VzUmksXG4gICAgICBlbmRJY29uUHJvcCA9IHByb3BzLmVuZEljb24sXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUgPSBwcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAnbWVkaXVtJyA6IF9wcm9wcyRzaXplLFxuICAgICAgc3RhcnRJY29uUHJvcCA9IHByb3BzLnN0YXJ0SWNvbixcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkdHlwZSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3RleHQnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVFbGV2YXRpb25cIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJlbmRJY29uXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwiZnVsbFdpZHRoXCIsIFwic2l6ZVwiLCBcInN0YXJ0SWNvblwiLCBcInR5cGVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgc3RhcnRJY29uID0gc3RhcnRJY29uUHJvcCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnN0YXJ0SWNvbiwgY2xhc3Nlc1tcImljb25TaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSlcbiAgfSwgc3RhcnRJY29uUHJvcCk7XG4gIHZhciBlbmRJY29uID0gZW5kSWNvblByb3AgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5lbmRJY29uLCBjbGFzc2VzW1wiaWNvblNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldKVxuICB9LCBlbmRJY29uUHJvcCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25CYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1t2YXJpYW50XSwgY2xhc3NOYW1lLCBjb2xvciA9PT0gJ2luaGVyaXQnID8gY2xhc3Nlcy5jb2xvckluaGVyaXQgOiBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJcIi5jb25jYXQodmFyaWFudCkuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIHNpemUgIT09ICdtZWRpdW0nICYmIFtjbGFzc2VzW1wiXCIuY29uY2F0KHZhcmlhbnQsIFwiU2l6ZVwiKS5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldLCBjbGFzc2VzW1wic2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKHNpemUpKV1dLCBkaXNhYmxlRWxldmF0aW9uICYmIGNsYXNzZXMuZGlzYWJsZUVsZXZhdGlvbiwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZnVsbFdpZHRoICYmIGNsYXNzZXMuZnVsbFdpZHRoKSxcbiAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZm9jdXNSaXBwbGU6ICFkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZm9jdXNWaXNpYmxlLCBmb2N1c1Zpc2libGVDbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYWJlbFxuICB9LCBzdGFydEljb24sIGNoaWxkcmVuLCBlbmRJY29uKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgYnV0dG9uLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBubyBlbGV2YXRpb24gaXMgdXNlZC5cbiAgICovXG4gIGRpc2FibGVFbGV2YXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSAga2V5Ym9hcmQgZm9jdXMgcmlwcGxlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqIGBkaXNhYmxlUmlwcGxlYCBtdXN0IGFsc28gYmUgdHJ1ZS5cbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGBmb2N1c1Zpc2libGVDbGFzc05hbWVgLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVsZW1lbnQgcGxhY2VkIGFmdGVyIHRoZSBjaGlsZHJlbi5cbiAgICovXG4gIGVuZEljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbiB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBVUkwgdG8gbGluayB0byB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZC5cbiAgICogSWYgZGVmaW5lZCwgYW4gYGFgIGVsZW1lbnQgd2lsbCBiZSB1c2VkIGFzIHRoZSByb290IG5vZGUuXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgYnV0dG9uLlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10pLFxuXG4gIC8qKlxuICAgKiBFbGVtZW50IHBsYWNlZCBiZWZvcmUgdGhlIGNoaWxkcmVuLlxuICAgKi9cbiAgc3RhcnRJY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsndGV4dCcsICdvdXRsaW5lZCcsICdjb250YWluZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQnV0dG9uJ1xufSkoQnV0dG9uKTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtQ29udHJvbFN0YXRlKF9yZWYpIHtcbiAgdmFyIHByb3BzID0gX3JlZi5wcm9wcyxcbiAgICAgIHN0YXRlcyA9IF9yZWYuc3RhdGVzLFxuICAgICAgbXVpRm9ybUNvbnRyb2wgPSBfcmVmLm11aUZvcm1Db250cm9sO1xuICByZXR1cm4gc3RhdGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdGF0ZSkge1xuICAgIGFjY1tzdGF0ZV0gPSBwcm9wc1tzdGF0ZV07XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHNbc3RhdGVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhY2Nbc3RhdGVdID0gbXVpRm9ybUNvbnRyb2xbc3RhdGVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIEZvcm1Db250cm9sQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRm9ybUNvbnRyb2xDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0Zvcm1Db250cm9sQ29udGV4dCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3JtQ29udHJvbCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoRm9ybUNvbnRyb2xDb250ZXh0KTtcbn1cbmV4cG9ydCBkZWZhdWx0IEZvcm1Db250cm9sQ29udGV4dDsiLCIvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG4vLyBBIGZldyBieXRlcyBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL2RlYm91bmNlIGlzIH4zIGtCIGFuZCBkZWJvdW5jZSB+MzAwIEIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jKSB7XG4gIHZhciB3YWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxNjY7XG4gIHZhciB0aW1lb3V0O1xuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtdGhpc1xuICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uIGxhdGVyKCkge1xuICAgICAgZnVuYy5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgfVxuXG4gIGRlYm91bmNlZC5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4uL3V0aWxzL2RlYm91bmNlJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuXG5mdW5jdGlvbiBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsIHByb3BlcnR5KSB7XG4gIHJldHVybiBwYXJzZUludChjb21wdXRlZFN0eWxlW3Byb3BlcnR5XSwgMTApIHx8IDA7XG59XG5cbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xudmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNoYWRvdyB0ZXh0YXJlYSBlbGVtZW50LiAqL1xuICBzaGFkb3c6IHtcbiAgICAvLyBWaXNpYmlsaXR5IG5lZWRlZCB0byBoaWRlIHRoZSBleHRyYSB0ZXh0IGFyZWEgb24gaVBhZHNcbiAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAvLyBSZW1vdmUgZnJvbSB0aGUgY29udGVudCBmbG93XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgLy8gSWdub3JlIHRoZSBzY3JvbGxiYXIgd2lkdGhcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIC8vIENyZWF0ZSBhIG5ldyBsYXllciwgaW5jcmVhc2UgdGhlIGlzb2xhdGlvbiBvZiB0aGUgY29tcHV0ZWQgdmFsdWVzXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWigwKSdcbiAgfVxufTtcbnZhciBUZXh0YXJlYUF1dG9zaXplID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUZXh0YXJlYUF1dG9zaXplKHByb3BzLCByZWYpIHtcbiAgdmFyIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICByb3dzID0gcHJvcHMucm93cyxcbiAgICAgIHJvd3NNYXggPSBwcm9wcy5yb3dzTWF4LFxuICAgICAgX3Byb3BzJHJvd3NNaW4gPSBwcm9wcy5yb3dzTWluLFxuICAgICAgcm93c01pblByb3AgPSBfcHJvcHMkcm93c01pbiA9PT0gdm9pZCAwID8gMSA6IF9wcm9wcyRyb3dzTWluLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wib25DaGFuZ2VcIiwgXCJyb3dzXCIsIFwicm93c01heFwiLCBcInJvd3NNaW5cIiwgXCJzdHlsZVwiLCBcInZhbHVlXCJdKTtcblxuICB2YXIgcm93c01pbiA9IHJvd3MgfHwgcm93c01pblByb3A7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYodmFsdWUgIT0gbnVsbCksXG4gICAgICBpc0NvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIGlucHV0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGlucHV0UmVmKTtcbiAgdmFyIHNoYWRvd1JlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIHJlbmRlcnMgPSBSZWFjdC51c2VSZWYoMCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKHt9KSxcbiAgICAgIHN0YXRlID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0U3RhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIHN5bmNIZWlnaHQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlucHV0ID0gaW5wdXRSZWYuY3VycmVudDtcbiAgICB2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGlucHV0KTtcbiAgICB2YXIgaW5wdXRTaGFsbG93ID0gc2hhZG93UmVmLmN1cnJlbnQ7XG4gICAgaW5wdXRTaGFsbG93LnN0eWxlLndpZHRoID0gY29tcHV0ZWRTdHlsZS53aWR0aDtcbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSBpbnB1dC52YWx1ZSB8fCBwcm9wcy5wbGFjZWhvbGRlciB8fCAneCc7XG5cbiAgICBpZiAoaW5wdXRTaGFsbG93LnZhbHVlLnNsaWNlKC0xKSA9PT0gJ1xcbicpIHtcbiAgICAgIC8vIENlcnRhaW4gZm9udHMgd2hpY2ggb3ZlcmZsb3cgdGhlIGxpbmUgaGVpZ2h0IHdpbGwgY2F1c2UgdGhlIHRleHRhcmVhXG4gICAgICAvLyB0byByZXBvcnQgYSBkaWZmZXJlbnQgc2Nyb2xsSGVpZ2h0IGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBsYXN0IGxpbmVcbiAgICAgIC8vIGlzIGVtcHR5LiBNYWtlIGl0IG5vbi1lbXB0eSB0byBhdm9pZCB0aGlzIGlzc3VlLlxuICAgICAgaW5wdXRTaGFsbG93LnZhbHVlICs9ICcgJztcbiAgICB9XG5cbiAgICB2YXIgYm94U2l6aW5nID0gY29tcHV0ZWRTdHlsZVsnYm94LXNpemluZyddO1xuICAgIHZhciBwYWRkaW5nID0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAncGFkZGluZy1ib3R0b20nKSArIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ3BhZGRpbmctdG9wJyk7XG4gICAgdmFyIGJvcmRlciA9IGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ2JvcmRlci1ib3R0b20td2lkdGgnKSArIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ2JvcmRlci10b3Atd2lkdGgnKTsgLy8gVGhlIGhlaWdodCBvZiB0aGUgaW5uZXIgY29udGVudFxuXG4gICAgdmFyIGlubmVySGVpZ2h0ID0gaW5wdXRTaGFsbG93LnNjcm9sbEhlaWdodCAtIHBhZGRpbmc7IC8vIE1lYXN1cmUgaGVpZ2h0IG9mIGEgdGV4dGFyZWEgd2l0aCBhIHNpbmdsZSByb3dcblxuICAgIGlucHV0U2hhbGxvdy52YWx1ZSA9ICd4JztcbiAgICB2YXIgc2luZ2xlUm93SGVpZ2h0ID0gaW5wdXRTaGFsbG93LnNjcm9sbEhlaWdodCAtIHBhZGRpbmc7IC8vIFRoZSBoZWlnaHQgb2YgdGhlIG91dGVyIGNvbnRlbnRcblxuICAgIHZhciBvdXRlckhlaWdodCA9IGlubmVySGVpZ2h0O1xuXG4gICAgaWYgKHJvd3NNaW4pIHtcbiAgICAgIG91dGVySGVpZ2h0ID0gTWF0aC5tYXgoTnVtYmVyKHJvd3NNaW4pICogc2luZ2xlUm93SGVpZ2h0LCBvdXRlckhlaWdodCk7XG4gICAgfVxuXG4gICAgaWYgKHJvd3NNYXgpIHtcbiAgICAgIG91dGVySGVpZ2h0ID0gTWF0aC5taW4oTnVtYmVyKHJvd3NNYXgpICogc2luZ2xlUm93SGVpZ2h0LCBvdXRlckhlaWdodCk7XG4gICAgfVxuXG4gICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1heChvdXRlckhlaWdodCwgc2luZ2xlUm93SGVpZ2h0KTsgLy8gVGFrZSB0aGUgYm94IHNpemluZyBpbnRvIGFjY291bnQgZm9yIGFwcGx5aW5nIHRoaXMgdmFsdWUgYXMgYSBzdHlsZS5cblxuICAgIHZhciBvdXRlckhlaWdodFN0eWxlID0gb3V0ZXJIZWlnaHQgKyAoYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcgPyBwYWRkaW5nICsgYm9yZGVyIDogMCk7XG4gICAgdmFyIG92ZXJmbG93ID0gTWF0aC5hYnMob3V0ZXJIZWlnaHQgLSBpbm5lckhlaWdodCkgPD0gMTtcbiAgICBzZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAvLyBOZWVkIGEgbGFyZ2UgZW5vdWdoIGRpZmZlcmVuY2UgdG8gdXBkYXRlIHRoZSBoZWlnaHQuXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIGluZmluaXRlIHJlbmRlcmluZyBsb29wLlxuICAgICAgaWYgKHJlbmRlcnMuY3VycmVudCA8IDIwICYmIChvdXRlckhlaWdodFN0eWxlID4gMCAmJiBNYXRoLmFicygocHJldlN0YXRlLm91dGVySGVpZ2h0U3R5bGUgfHwgMCkgLSBvdXRlckhlaWdodFN0eWxlKSA+IDEgfHwgcHJldlN0YXRlLm92ZXJmbG93ICE9PSBvdmVyZmxvdykpIHtcbiAgICAgICAgcmVuZGVycy5jdXJyZW50ICs9IDE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb3ZlcmZsb3c6IG92ZXJmbG93LFxuICAgICAgICAgIG91dGVySGVpZ2h0U3R5bGU6IG91dGVySGVpZ2h0U3R5bGVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHJlbmRlcnMuY3VycmVudCA9PT0gMjApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRvbyBtYW55IHJlLXJlbmRlcnMuIFRoZSBsYXlvdXQgaXMgdW5zdGFibGUuJywgJ1RleHRhcmVhQXV0b3NpemUgbGltaXRzIHRoZSBudW1iZXIgb2YgcmVuZGVycyB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3AuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgfSk7XG4gIH0sIFtyb3dzTWF4LCByb3dzTWluLCBwcm9wcy5wbGFjZWhvbGRlcl0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVSZXNpemUgPSBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuICAgICAgc3luY0hlaWdodCgpO1xuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG4gIH0sIFtzeW5jSGVpZ2h0XSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzeW5jSGVpZ2h0KCk7XG4gIH0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlbmRlcnMuY3VycmVudCA9IDA7XG4gIH0sIFt2YWx1ZV0pO1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuXG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIsIF9leHRlbmRzKHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICByZWY6IGhhbmRsZVJlZiAvLyBBcHBseSB0aGUgcm93cyBwcm9wIHRvIGdldCBhIFwiY29ycmVjdFwiIGZpcnN0IFNTUiBwYWludFxuICAgICxcbiAgICByb3dzOiByb3dzTWluLFxuICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICBoZWlnaHQ6IHN0YXRlLm91dGVySGVpZ2h0U3R5bGUsXG4gICAgICAvLyBOZWVkIGEgbGFyZ2UgZW5vdWdoIGRpZmZlcmVuY2UgdG8gYWxsb3cgc2Nyb2xsaW5nLlxuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBpbmZpbml0ZSByZW5kZXJpbmcgbG9vcC5cbiAgICAgIG92ZXJmbG93OiBzdGF0ZS5vdmVyZmxvdyA/ICdoaWRkZW4nIDogbnVsbFxuICAgIH0sIHN0eWxlKVxuICB9LCBvdGhlcikpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIsIHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgY2xhc3NOYW1lOiBwcm9wcy5jbGFzc05hbWUsXG4gICAgcmVhZE9ubHk6IHRydWUsXG4gICAgcmVmOiBzaGFkb3dSZWYsXG4gICAgdGFiSW5kZXg6IC0xLFxuICAgIHN0eWxlOiBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgc3R5bGVzLnNoYWRvdyksIHN0eWxlKVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRhcmVhQXV0b3NpemUucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBVc2UgYHJvd3NNaW5gIGluc3RlYWQuIFRoZSBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkuXG4gICAqL1xuICByb3dzTWluOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRleHRhcmVhQXV0b3NpemU7IiwiLy8gU3VwcG9ydHMgZGV0ZXJtaW5hdGlvbiBvZiBpc0NvbnRyb2xsZWQoKS5cbi8vIENvbnRyb2xsZWQgaW5wdXQgYWNjZXB0cyBpdHMgY3VycmVudCB2YWx1ZSBhcyBhIHByb3AuXG4vL1xuLy8gQHNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Zvcm1zLmh0bWwjY29udHJvbGxlZC1jb21wb25lbnRzXG4vLyBAcGFyYW0gdmFsdWVcbi8vIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHN0cmluZyAoaW5jbHVkaW5nICcnKSBvciBudW1iZXIgKGluY2x1ZGluZyB6ZXJvKVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1ZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICEoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKTtcbn0gLy8gRGV0ZXJtaW5lIGlmIGZpZWxkIGlzIGVtcHR5IG9yIGZpbGxlZC5cbi8vIFJlc3BvbnNlIGRldGVybWluZXMgaWYgbGFiZWwgaXMgcHJlc2VudGVkIGFib3ZlIGZpZWxkIG9yIGFzIHBsYWNlaG9sZGVyLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEBwYXJhbSBTU1Jcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vdCBwcmVzZW50IG9yIGVtcHR5IHN0cmluZy5cbi8vICAgICAgICAgICAgICAgICAgICBUcnVlIHdoZW4gYW55IG51bWJlciBvciBzdHJpbmcgd2l0aCBsZW5ndGguXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGxlZChvYmopIHtcbiAgdmFyIFNTUiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gIHJldHVybiBvYmogJiYgKGhhc1ZhbHVlKG9iai52YWx1ZSkgJiYgb2JqLnZhbHVlICE9PSAnJyB8fCBTU1IgJiYgaGFzVmFsdWUob2JqLmRlZmF1bHRWYWx1ZSkgJiYgb2JqLmRlZmF1bHRWYWx1ZSAhPT0gJycpO1xufSAvLyBEZXRlcm1pbmUgaWYgYW4gSW5wdXQgaXMgYWRvcm5lZCBvbiBzdGFydC5cbi8vIEl0J3MgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCB3aXRoIExUUi5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBubyBhZG9ybm1lbnRzLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhZG9ybmVkIGF0IHRoZSBzdGFydC5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRvcm5lZFN0YXJ0KG9iaikge1xuICByZXR1cm4gb2JqLnN0YXJ0QWRvcm5tZW50O1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcblxuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvY2xpY2stZXZlbnRzLWhhdmUta2V5LWV2ZW50cywganN4LWExMXkvbm8tc3RhdGljLWVsZW1lbnQtaW50ZXJhY3Rpb25zICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCwgeyB1c2VGb3JtQ29udHJvbCB9IGZyb20gJy4uL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IFRleHRhcmVhQXV0b3NpemUgZnJvbSAnLi4vVGV4dGFyZWFBdXRvc2l6ZSc7XG5pbXBvcnQgeyBpc0ZpbGxlZCB9IGZyb20gJy4vdXRpbHMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnO1xuICB2YXIgcGxhY2Vob2xkZXIgPSB7XG4gICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgIH0pXG4gIH07XG4gIHZhciBwbGFjZWhvbGRlckhpZGRlbiA9IHtcbiAgICBvcGFjaXR5OiAnMCAhaW1wb3J0YW50J1xuICB9O1xuICB2YXIgcGxhY2Vob2xkZXJWaXNpYmxlID0ge1xuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNVxuICB9O1xuICByZXR1cm4ge1xuICAgICdAZ2xvYmFsJzoge1xuICAgICAgJ0BrZXlmcmFtZXMgbXVpLWF1dG8tZmlsbCc6IHtcbiAgICAgICAgZnJvbToge31cbiAgICAgIH0sXG4gICAgICAnQGtleWZyYW1lcyBtdWktYXV0by1maWxsLWNhbmNlbCc6IHtcbiAgICAgICAgZnJvbToge31cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5MSksIHt9LCB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICBsaW5lSGVpZ2h0OiAnMS4xODc2ZW0nLFxuICAgICAgLy8gUmVzZXQgKDE5cHgpLCBtYXRjaCB0aGUgbmF0aXZlIGlucHV0IGxpbmUtaGVpZ2h0XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIGZ1bGxXaWR0aC5cbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgY3Vyc29yOiAndGV4dCcsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZCxcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBhIGRlc2NlbmRhbnQgb2YgYEZvcm1Db250cm9sYC4gKi9cbiAgICBmb3JtQ29udHJvbDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc3RhcnRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRTdGFydDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRFbmQ6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBtdWx0aWxpbmU6IHtcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KDggLSAyLCBcInB4IDAgXCIpLmNvbmNhdCg4IC0gMSwgXCJweFwiKSxcbiAgICAgICcmJG1hcmdpbkRlbnNlJzoge1xuICAgICAgICBwYWRkaW5nVG9wOiA0IC0gMVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb2xvciBpcyBzZWNvbmRhcnkuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZnVsbFdpZHRoPXt0cnVlfWAuICovXG4gICAgZnVsbFdpZHRoOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuICovXG4gICAgaW5wdXQ6IHtcbiAgICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICAgIGxldHRlclNwYWNpbmc6ICdpbmhlcml0JyxcbiAgICAgIGNvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KDggLSAyLCBcInB4IDAgXCIpLmNvbmNhdCg4IC0gMSwgXCJweFwiKSxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGJveFNpemluZzogJ2NvbnRlbnQtYm94JyxcbiAgICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICAgIGhlaWdodDogJzEuMTg3NmVtJyxcbiAgICAgIC8vIFJlc2V0ICgxOXB4KSwgbWF0Y2ggdGhlIG5hdGl2ZSBpbnB1dCBsaW5lLWhlaWdodFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgLy8gUmVzZXQgZm9yIFNhZmFyaVxuICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgLy8gTWFrZSB0aGUgZmxleCBpdGVtIHNocmluayB3aXRoIEZpcmVmb3hcbiAgICAgIG1pbldpZHRoOiAwLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIC8vIEZpeCBJRSAxMSB3aWR0aCBpc3N1ZVxuICAgICAgYW5pbWF0aW9uTmFtZTogJ211aS1hdXRvLWZpbGwtY2FuY2VsJyxcbiAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgLy8gSUUgMTFcbiAgICAgICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIEVkZ2VcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBvdXRsaW5lOiAwXG4gICAgICB9LFxuICAgICAgLy8gUmVzZXQgRmlyZWZveCBpbnZhbGlkIHJlcXVpcmVkIGlucHV0IHN0eWxlXG4gICAgICAnJjppbnZhbGlkJzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uJzoge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgd2hlbiB0eXBlPXNlYXJjaC5cbiAgICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIC8vIFNob3cgYW5kIGhpZGUgdGhlIHBsYWNlaG9sZGVyIGxvZ2ljXG4gICAgICAnbGFiZWxbZGF0YS1zaHJpbms9ZmFsc2VdICsgJGZvcm1Db250cm9sICYnOiB7XG4gICAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBJRSAxMVxuICAgICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgIC8vIEVkZ2VcbiAgICAgICAgJyY6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAgICcmOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgICAnJjpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAgIC8vIElFIDExXG4gICAgICAgICcmOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUgLy8gRWRnZVxuXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIG9wYWNpdHk6IDEgLy8gUmVzZXQgaU9TIG9wYWNpdHlcblxuICAgICAgfSxcbiAgICAgICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnNTAwMHMnLFxuICAgICAgICBhbmltYXRpb25OYW1lOiAnbXVpLWF1dG8tZmlsbCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgaW5wdXRNYXJnaW5EZW5zZToge1xuICAgICAgcGFkZGluZ1RvcDogNCAtIDFcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgaW5wdXRNdWx0aWxpbmU6IHtcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgcmVzaXplOiAnbm9uZScsXG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHR5cGU9XCJzZWFyY2hcImAuICovXG4gICAgaW5wdXRUeXBlU2VhcmNoOiB7XG4gICAgICAvLyBJbXByb3ZlIHR5cGUgc2VhcmNoIHN0eWxlLlxuICAgICAgJy1tb3otYXBwZWFyYW5jZSc6ICd0ZXh0ZmllbGQnLFxuICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICd0ZXh0ZmllbGQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRTdGFydDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGlucHV0QWRvcm5lZEVuZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBoaWRkZW5MYWJlbD17dHJ1ZX1gLiAqL1xuICAgIGlucHV0SGlkZGVuTGFiZWw6IHt9XG4gIH07XG59O1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VFZmZlY3QgOiBSZWFjdC51c2VMYXlvdXRFZmZlY3Q7XG4vKipcbiAqIGBJbnB1dEJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhbiBpbnB1dC5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBzdGF0ZSBsb2dpYy5cbiAqL1xuXG52YXIgSW5wdXRCYXNlID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dEJhc2UocHJvcHMsIHJlZikge1xuICB2YXIgYXJpYURlc2NyaWJlZGJ5ID0gcHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXSxcbiAgICAgIGF1dG9Db21wbGV0ZSA9IHByb3BzLmF1dG9Db21wbGV0ZSxcbiAgICAgIGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBlbmRBZG9ybm1lbnQgPSBwcm9wcy5lbmRBZG9ybm1lbnQsXG4gICAgICBlcnJvciA9IHByb3BzLmVycm9yLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIGlkID0gcHJvcHMuaWQsXG4gICAgICBfcHJvcHMkaW5wdXRDb21wb25lbnQgPSBwcm9wcy5pbnB1dENvbXBvbmVudCxcbiAgICAgIGlucHV0Q29tcG9uZW50ID0gX3Byb3BzJGlucHV0Q29tcG9uZW50ID09PSB2b2lkIDAgPyAnaW5wdXQnIDogX3Byb3BzJGlucHV0Q29tcG9uZW50LFxuICAgICAgX3Byb3BzJGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgaW5wdXRQcm9wc1Byb3AgPSBfcHJvcHMkaW5wdXRQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkaW5wdXRQcm9wcyxcbiAgICAgIGlucHV0UmVmUHJvcCA9IHByb3BzLmlucHV0UmVmLFxuICAgICAgbWFyZ2luID0gcHJvcHMubWFyZ2luLFxuICAgICAgX3Byb3BzJG11bHRpbGluZSA9IHByb3BzLm11bHRpbGluZSxcbiAgICAgIG11bHRpbGluZSA9IF9wcm9wcyRtdWx0aWxpbmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG11bHRpbGluZSxcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBvbktleURvd24gPSBwcm9wcy5vbktleURvd24sXG4gICAgICBvbktleVVwID0gcHJvcHMub25LZXlVcCxcbiAgICAgIHBsYWNlaG9sZGVyID0gcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICByZWFkT25seSA9IHByb3BzLnJlYWRPbmx5LFxuICAgICAgcmVuZGVyU3VmZml4ID0gcHJvcHMucmVuZGVyU3VmZml4LFxuICAgICAgcm93cyA9IHByb3BzLnJvd3MsXG4gICAgICByb3dzTWF4ID0gcHJvcHMucm93c01heCxcbiAgICAgIHJvd3NNaW4gPSBwcm9wcy5yb3dzTWluLFxuICAgICAgc3RhcnRBZG9ybm1lbnQgPSBwcm9wcy5zdGFydEFkb3JubWVudCxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ3RleHQnIDogX3Byb3BzJHR5cGUsXG4gICAgICB2YWx1ZVByb3AgPSBwcm9wcy52YWx1ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIFwiYXV0b0NvbXBsZXRlXCIsIFwiYXV0b0ZvY3VzXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJlbmRBZG9ybm1lbnRcIiwgXCJlcnJvclwiLCBcImZ1bGxXaWR0aFwiLCBcImlkXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJpbnB1dFByb3BzXCIsIFwiaW5wdXRSZWZcIiwgXCJtYXJnaW5cIiwgXCJtdWx0aWxpbmVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkNsaWNrXCIsIFwib25Gb2N1c1wiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJwbGFjZWhvbGRlclwiLCBcInJlYWRPbmx5XCIsIFwicmVuZGVyU3VmZml4XCIsIFwicm93c1wiLCBcInJvd3NNYXhcIiwgXCJyb3dzTWluXCIsIFwic3RhcnRBZG9ybm1lbnRcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIl0pO1xuXG4gIHZhciB2YWx1ZSA9IGlucHV0UHJvcHNQcm9wLnZhbHVlICE9IG51bGwgPyBpbnB1dFByb3BzUHJvcC52YWx1ZSA6IHZhbHVlUHJvcDtcblxuICB2YXIgX1JlYWN0JHVzZVJlZiA9IFJlYWN0LnVzZVJlZih2YWx1ZSAhPSBudWxsKSxcbiAgICAgIGlzQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGhhbmRsZUlucHV0UmVmV2FybmluZyA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2Uubm9kZU5hbWUgIT09ICdJTlBVVCcgJiYgIWluc3RhbmNlLmZvY3VzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogWW91IGhhdmUgcHJvdmlkZWQgYSBgaW5wdXRDb21wb25lbnRgIHRvIHRoZSBpbnB1dCBjb21wb25lbnQnLCAndGhhdCBkb2VzIG5vdCBjb3JyZWN0bHkgaGFuZGxlIHRoZSBgaW5wdXRSZWZgIHByb3AuJywgJ01ha2Ugc3VyZSB0aGUgYGlucHV0UmVmYCBwcm9wIGlzIGNhbGxlZCB3aXRoIGEgSFRNTElucHV0RWxlbWVudC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbXSk7XG4gIHZhciBoYW5kbGVJbnB1dFByb3BzUmVmUHJvcCA9IHVzZUZvcmtSZWYoaW5wdXRQcm9wc1Byb3AucmVmLCBoYW5kbGVJbnB1dFJlZldhcm5pbmcpO1xuICB2YXIgaGFuZGxlSW5wdXRSZWZQcm9wID0gdXNlRm9ya1JlZihpbnB1dFJlZlByb3AsIGhhbmRsZUlucHV0UHJvcHNSZWZQcm9wKTtcbiAgdmFyIGhhbmRsZUlucHV0UmVmID0gdXNlRm9ya1JlZihpbnB1dFJlZiwgaGFuZGxlSW5wdXRSZWZQcm9wKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgZm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldEZvY3VzZWQgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgICAgcmV0dXJuIG11aUZvcm1Db250cm9sLnJlZ2lzdGVyRWZmZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSwgW211aUZvcm1Db250cm9sXSk7XG4gIH1cblxuICB2YXIgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnY29sb3InLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnaGlkZGVuTGFiZWwnLCAnbWFyZ2luJywgJ3JlcXVpcmVkJywgJ2ZpbGxlZCddXG4gIH0pO1xuICBmY3MuZm9jdXNlZCA9IG11aUZvcm1Db250cm9sID8gbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCA6IGZvY3VzZWQ7IC8vIFRoZSBibHVyIHdvbid0IGZpcmUgd2hlbiB0aGUgZGlzYWJsZWQgc3RhdGUgaXMgc2V0IG9uIGEgZm9jdXNlZCBpbnB1dC5cbiAgLy8gV2UgbmVlZCB0byBib29rIGtlZXAgdGhlIGZvY3VzZWQgc3RhdGUgbWFudWFsbHkuXG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIW11aUZvcm1Db250cm9sICYmIGRpc2FibGVkICYmIGZvY3VzZWQpIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuXG4gICAgICBpZiAob25CbHVyKSB7XG4gICAgICAgIG9uQmx1cigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW211aUZvcm1Db250cm9sLCBkaXNhYmxlZCwgZm9jdXNlZCwgb25CbHVyXSk7XG4gIHZhciBvbkZpbGxlZCA9IG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRmlsbGVkO1xuICB2YXIgb25FbXB0eSA9IG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRW1wdHk7XG4gIHZhciBjaGVja0RpcnR5ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChpc0ZpbGxlZChvYmopKSB7XG4gICAgICBpZiAob25GaWxsZWQpIHtcbiAgICAgICAgb25GaWxsZWQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9uRW1wdHkpIHtcbiAgICAgIG9uRW1wdHkoKTtcbiAgICB9XG4gIH0sIFtvbkZpbGxlZCwgb25FbXB0eV0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzQ29udHJvbGxlZCkge1xuICAgICAgY2hlY2tEaXJ0eSh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbdmFsdWUsIGNoZWNrRGlydHksIGlzQ29udHJvbGxlZF0pO1xuXG4gIHZhciBoYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKGV2ZW50KSB7XG4gICAgLy8gRml4IGEgYnVnIHdpdGggSUUgMTEgd2hlcmUgdGhlIGZvY3VzL2JsdXIgZXZlbnRzIGFyZSB0cmlnZ2VyZWRcbiAgICAvLyB3aGlsZSB0aGUgaW5wdXQgaXMgZGlzYWJsZWQuXG4gICAgaWYgKGZjcy5kaXNhYmxlZCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkZvY3VzKSB7XG4gICAgICBpbnB1dFByb3BzUHJvcC5vbkZvY3VzKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25Gb2N1cykge1xuICAgICAgbXVpRm9ybUNvbnRyb2wub25Gb2N1cyhldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEZvY3VzZWQodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVCbHVyID0gZnVuY3Rpb24gaGFuZGxlQmx1cihldmVudCkge1xuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uQmx1cikge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25CbHVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25CbHVyKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkJsdXIoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IGV2ZW50LnRhcmdldCB8fCBpbnB1dFJlZi5jdXJyZW50O1xuXG4gICAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01hdGVyaWFsLVVJOiBFeHBlY3RlZCB2YWxpZCBpbnB1dCB0YXJnZXQuICcgKyAnRGlkIHlvdSB1c2UgYSBjdXN0b20gYGlucHV0Q29tcG9uZW50YCBhbmQgZm9yZ2V0IHRvIGZvcndhcmQgcmVmcz8gJyArICdTZWUgaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vci9pbnB1dC1jb21wb25lbnQtcmVmLWludGVyZmFjZSBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgfVxuXG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWU6IGVsZW1lbnQudmFsdWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkNoYW5nZSkge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25DaGFuZ2UuYXBwbHkoaW5wdXRQcm9wc1Byb3AsIFtldmVudF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9IC8vIFBlcmZvcm0gaW4gdGhlIHdpbGxVcGRhdGVcblxuXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZS5hcHBseSh2b2lkIDAsIFtldmVudF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07IC8vIENoZWNrIHRoZSBpbnB1dCBzdGF0ZSBvbiBtb3VudCwgaW4gY2FzZSBpdCB3YXMgZmlsbGVkIGJ5IHRoZSB1c2VyXG4gIC8vIG9yIGF1dG8gZmlsbGVkIGJ5IHRoZSBicm93c2VyIGJlZm9yZSB0aGUgaHlkcmF0aW9uIChmb3IgU1NSKS5cblxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgY2hlY2tEaXJ0eShpbnB1dFJlZi5jdXJyZW50KTtcbiAgfSwgW10pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuXG4gIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKGlucHV0UmVmLmN1cnJlbnQgJiYgZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICBpbnB1dFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuXG4gICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgSW5wdXRDb21wb25lbnQgPSBpbnB1dENvbXBvbmVudDtcblxuICB2YXIgaW5wdXRQcm9wcyA9IF9leHRlbmRzKF9leHRlbmRzKHt9LCBpbnB1dFByb3BzUHJvcCksIHt9LCB7XG4gICAgcmVmOiBoYW5kbGVJbnB1dFJlZlxuICB9KTtcblxuICBpZiAodHlwZW9mIElucHV0Q29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7XG4gICAgICAvLyBSZW5hbWUgcmVmIHRvIGlucHV0UmVmIGFzIHdlIGRvbid0IGtub3cgdGhlXG4gICAgICAvLyBwcm92aWRlZCBgaW5wdXRDb21wb25lbnRgIHN0cnVjdHVyZS5cbiAgICAgIGlucHV0UmVmOiBoYW5kbGVJbnB1dFJlZixcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9LCBpbnB1dFByb3BzKSwge30sIHtcbiAgICAgIHJlZjogbnVsbFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKG11bHRpbGluZSkge1xuICAgIGlmIChyb3dzICYmICFyb3dzTWF4ICYmICFyb3dzTWluKSB7XG4gICAgICBJbnB1dENvbXBvbmVudCA9ICd0ZXh0YXJlYSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHJvd3M6IHJvd3MsXG4gICAgICAgIHJvd3NNYXg6IHJvd3NNYXhcbiAgICAgIH0sIGlucHV0UHJvcHMpO1xuICAgICAgSW5wdXRDb21wb25lbnQgPSBUZXh0YXJlYUF1dG9zaXplO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgdHlwZTogdHlwZVxuICAgIH0sIGlucHV0UHJvcHMpO1xuICB9XG5cbiAgdmFyIGhhbmRsZUF1dG9GaWxsID0gZnVuY3Rpb24gaGFuZGxlQXV0b0ZpbGwoZXZlbnQpIHtcbiAgICAvLyBQcm92aWRlIGEgZmFrZSB2YWx1ZSBhcyBDaHJvbWUgbWlnaHQgbm90IGxldCB5b3UgYWNjZXNzIGl0IGZvciBzZWN1cml0eSByZWFzb25zLlxuICAgIGNoZWNrRGlydHkoZXZlbnQuYW5pbWF0aW9uTmFtZSA9PT0gJ211aS1hdXRvLWZpbGwtY2FuY2VsJyA/IGlucHV0UmVmLmN1cnJlbnQgOiB7XG4gICAgICB2YWx1ZTogJ3gnXG4gICAgfSk7XG4gIH07XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLnNldEFkb3JuZWRTdGFydChCb29sZWFuKHN0YXJ0QWRvcm5tZW50KSk7XG4gICAgfVxuICB9LCBbbXVpRm9ybUNvbnRyb2wsIHN0YXJ0QWRvcm5tZW50XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoZmNzLmNvbG9yIHx8ICdwcmltYXJ5JykpXSwgY2xhc3NOYW1lLCBmY3MuZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IsIGZ1bGxXaWR0aCAmJiBjbGFzc2VzLmZ1bGxXaWR0aCwgZmNzLmZvY3VzZWQgJiYgY2xhc3Nlcy5mb2N1c2VkLCBtdWlGb3JtQ29udHJvbCAmJiBjbGFzc2VzLmZvcm1Db250cm9sLCBtdWx0aWxpbmUgJiYgY2xhc3Nlcy5tdWx0aWxpbmUsIHN0YXJ0QWRvcm5tZW50ICYmIGNsYXNzZXMuYWRvcm5lZFN0YXJ0LCBlbmRBZG9ybm1lbnQgJiYgY2xhc3Nlcy5hZG9ybmVkRW5kLCBmY3MubWFyZ2luID09PSAnZGVuc2UnICYmIGNsYXNzZXMubWFyZ2luRGVuc2UpLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgc3RhcnRBZG9ybm1lbnQsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Db250cm9sQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBudWxsXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KElucHV0Q29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWludmFsaWRcIjogZmNzLmVycm9yLFxuICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgYXV0b0NvbXBsZXRlOiBhdXRvQ29tcGxldGUsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICBpZDogaWQsXG4gICAgb25BbmltYXRpb25TdGFydDogaGFuZGxlQXV0b0ZpbGwsXG4gICAgbmFtZTogbmFtZSxcbiAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgIHJlcXVpcmVkOiBmY3MucmVxdWlyZWQsXG4gICAgcm93czogcm93cyxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgb25LZXlEb3duOiBvbktleURvd24sXG4gICAgb25LZXlVcDogb25LZXlVcFxuICB9LCBpbnB1dFByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuaW5wdXQsIGlucHV0UHJvcHNQcm9wLmNsYXNzTmFtZSwgZmNzLmRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIG11bHRpbGluZSAmJiBjbGFzc2VzLmlucHV0TXVsdGlsaW5lLCBmY3MuaGlkZGVuTGFiZWwgJiYgY2xhc3Nlcy5pbnB1dEhpZGRlbkxhYmVsLCBzdGFydEFkb3JubWVudCAmJiBjbGFzc2VzLmlucHV0QWRvcm5lZFN0YXJ0LCBlbmRBZG9ybm1lbnQgJiYgY2xhc3Nlcy5pbnB1dEFkb3JuZWRFbmQsIHR5cGUgPT09ICdzZWFyY2gnICYmIGNsYXNzZXMuaW5wdXRUeXBlU2VhcmNoLCBmY3MubWFyZ2luID09PSAnZGVuc2UnICYmIGNsYXNzZXMuaW5wdXRNYXJnaW5EZW5zZSksXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNcbiAgfSkpKSwgZW5kQWRvcm5tZW50LCByZW5kZXJTdWZmaXggPyByZW5kZXJTdWZmaXgoX2V4dGVuZHMoX2V4dGVuZHMoe30sIGZjcyksIHt9LCB7XG4gICAgc3RhcnRBZG9ybm1lbnQ6IHN0YXJ0QWRvcm5tZW50XG4gIH0pKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dEJhc2UucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgJ2FyaWEtZGVzY3JpYmVkYnknOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBgaW5wdXRgIGVsZW1lbnQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIGluZGljYXRlIGFuIGVycm9yLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdGV4dGFyZWEgZWxlbWVudCB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGlucHV0IGlzIGJsdXJyZWQuXG4gICAqXG4gICAqIE5vdGljZSB0aGF0IHRoZSBmaXJzdCBhcmd1bWVudCAoZXZlbnQpIG1pZ2h0IGJlIHVuZGVmaW5lZC5cbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBpbnB1dCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlbmRlclN1ZmZpeDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNaW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogU3RhcnQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBzdGFydEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUlucHV0QmFzZSdcbn0pKElucHV0QmFzZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgSW5wdXRCYXNlIGZyb20gJy4uL0lucHV0QmFzZSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgbGlnaHQgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCc7XG4gIHZhciBib3R0b21MaW5lQ29sb3IgPSBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuNDIpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknO1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBgRm9ybUNvbnRyb2xgLiAqL1xuICAgIGZvcm1Db250cm9sOiB7XG4gICAgICAnbGFiZWwgKyAmJzoge1xuICAgICAgICBtYXJnaW5Ub3A6IDE2XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGNvbG9yIHNlY29uZGFyeS4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkdW5kZXJsaW5lOmFmdGVyJzoge1xuICAgICAgICBib3JkZXJCb3R0b21Db2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlVW5kZXJsaW5lPXtmYWxzZX1gLiAqL1xuICAgIHVuZGVybGluZToge1xuICAgICAgJyY6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIycHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluKSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRSAxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgwKScsXG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgICAgfSksXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c2VkOmFmdGVyJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3I6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW4sXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKScgLy8gZXJyb3IgaXMgYWx3YXlzIHVuZGVybGluZWQgaW4gcmVkXG5cbiAgICAgIH0sXG4gICAgICAnJjpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KGJvdHRvbUxpbmVDb2xvciksXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUgMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICAgIGNvbnRlbnQ6ICdcIlxcXFwwMGEwXCInLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm9yZGVyLWJvdHRvbS1jb2xvcicsIHtcbiAgICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgICB9KSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgICAgfSxcbiAgICAgICcmOmhvdmVyOm5vdCgkZGlzYWJsZWQpOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjJweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoYm90dG9tTGluZUNvbG9yKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQ6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b21TdHlsZTogJ2RvdHRlZCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBtdWx0aWxpbmU6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZnVsbFdpZHRoPXt0cnVlfWAuICovXG4gICAgZnVsbFdpZHRoOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuICovXG4gICAgaW5wdXQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgaW5wdXRNYXJnaW5EZW5zZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBpbnB1dE11bHRpbGluZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGB0eXBlPVwic2VhcmNoXCJgLiAqL1xuICAgIGlucHV0VHlwZVNlYXJjaDoge31cbiAgfTtcbn07XG52YXIgSW5wdXQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0KHByb3BzLCByZWYpIHtcbiAgdmFyIGRpc2FibGVVbmRlcmxpbmUgPSBwcm9wcy5kaXNhYmxlVW5kZXJsaW5lLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR0eXBlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImRpc2FibGVVbmRlcmxpbmVcIiwgXCJjbGFzc2VzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJtdWx0aWxpbmVcIiwgXCJ0eXBlXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NlczogX2V4dGVuZHMoX2V4dGVuZHMoe30sIGNsYXNzZXMpLCB7fSwge1xuICAgICAgcm9vdDogY2xzeChjbGFzc2VzLnJvb3QsICFkaXNhYmxlVW5kZXJsaW5lICYmIGNsYXNzZXMudW5kZXJsaW5lKSxcbiAgICAgIHVuZGVybGluZTogbnVsbFxuICAgIH0pLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmU6IG11bHRpbGluZSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBgaW5wdXRgIGVsZW1lbnQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIG5vdCBoYXZlIGFuIHVuZGVybGluZS5cbiAgICovXG4gIGRpc2FibGVVbmRlcmxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIGluZGljYXRlIGFuIGVycm9yLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdGV4dGFyZWEgZWxlbWVudCB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBpbnB1dCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogU3RhcnQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBzdGFydEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuSW5wdXQubXVpTmFtZSA9ICdJbnB1dCc7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSW5wdXQnXG59KShJbnB1dCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgSW5wdXRCYXNlIGZyb20gJy4uL0lucHV0QmFzZSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgbGlnaHQgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCc7XG4gIHZhciBib3R0b21MaW5lQ29sb3IgPSBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuNDIpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknO1xuICB2YXIgYmFja2dyb3VuZENvbG9yID0gbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjA5KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA5KSc7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLFxuICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjEzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEzKScsXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvclxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNlZCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMDkpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDkpJ1xuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4xMiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgY29sb3Igc2Vjb25kYXJ5LiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICAnJiR1bmRlcmxpbmU6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVVbmRlcmxpbmU9e2ZhbHNlfWAuICovXG4gICAgdW5kZXJsaW5lOiB7XG4gICAgICAnJjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjJweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4pLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFIDExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgICB9KSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgICAgfSxcbiAgICAgICcmJGZvY3VzZWQ6YWZ0ZXInOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSdcbiAgICAgIH0sXG4gICAgICAnJiRlcnJvcjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDEpJyAvLyBlcnJvciBpcyBhbHdheXMgdW5kZXJsaW5lZCBpbiByZWRcblxuICAgICAgfSxcbiAgICAgICcmOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoYm90dG9tTGluZUNvbG9yKSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRSAxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICAgIH0pLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuXG4gICAgICB9LFxuICAgICAgJyY6aG92ZXI6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSlcbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZDpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc3RhcnRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRTdGFydDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDEyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZEVuZDoge1xuICAgICAgcGFkZGluZ1JpZ2h0OiAxMlxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIG1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogJzI3cHggMTJweCAxMHB4JyxcbiAgICAgICcmJG1hcmdpbkRlbnNlJzoge1xuICAgICAgICBwYWRkaW5nVG9wOiAyMyxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogNlxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LiAqL1xuICAgIGlucHV0OiB7XG4gICAgICBwYWRkaW5nOiAnMjdweCAxMnB4IDEwcHgnLFxuICAgICAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICAgICAgV2Via2l0Qm94U2hhZG93OiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdkYXJrJyA/ICcwIDAgMCAxMDBweCAjMjY2Nzk4IGluc2V0JyA6IG51bGwsXG4gICAgICAgIFdlYmtpdFRleHRGaWxsQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2RhcmsnID8gJyNmZmYnIDogbnVsbCxcbiAgICAgICAgY2FyZXRDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnZGFyaycgPyAnI2ZmZicgOiBudWxsLFxuICAgICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiAnaW5oZXJpdCcsXG4gICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAnaW5oZXJpdCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgaW5wdXRNYXJnaW5EZW5zZToge1xuICAgICAgcGFkZGluZ1RvcDogMjMsXG4gICAgICBwYWRkaW5nQm90dG9tOiA2XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGlmIGluIGA8Rm9ybUNvbnRyb2wgaGlkZGVuTGFiZWwgLz5gLiAqL1xuICAgIGlucHV0SGlkZGVuTGFiZWw6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDE4LFxuICAgICAgcGFkZGluZ0JvdHRvbTogMTksXG4gICAgICAnJiRpbnB1dE1hcmdpbkRlbnNlJzoge1xuICAgICAgICBwYWRkaW5nVG9wOiAxMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogMTFcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgaW5wdXRNdWx0aWxpbmU6IHtcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgc3RhcnRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGlucHV0QWRvcm5lZFN0YXJ0OiB7XG4gICAgICBwYWRkaW5nTGVmdDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGlucHV0QWRvcm5lZEVuZDoge1xuICAgICAgcGFkZGluZ1JpZ2h0OiAwXG4gICAgfVxuICB9O1xufTtcbnZhciBGaWxsZWRJbnB1dCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRmlsbGVkSW5wdXQocHJvcHMsIHJlZikge1xuICB2YXIgZGlzYWJsZVVuZGVybGluZSA9IHByb3BzLmRpc2FibGVVbmRlcmxpbmUsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICBfcHJvcHMkaW5wdXRDb21wb25lbnQgPSBwcm9wcy5pbnB1dENvbXBvbmVudCxcbiAgICAgIGlucHV0Q29tcG9uZW50ID0gX3Byb3BzJGlucHV0Q29tcG9uZW50ID09PSB2b2lkIDAgPyAnaW5wdXQnIDogX3Byb3BzJGlucHV0Q29tcG9uZW50LFxuICAgICAgX3Byb3BzJG11bHRpbGluZSA9IHByb3BzLm11bHRpbGluZSxcbiAgICAgIG11bHRpbGluZSA9IF9wcm9wcyRtdWx0aWxpbmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG11bHRpbGluZSxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ3RleHQnIDogX3Byb3BzJHR5cGUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiZGlzYWJsZVVuZGVybGluZVwiLCBcImNsYXNzZXNcIiwgXCJmdWxsV2lkdGhcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcIm11bHRpbGluZVwiLCBcInR5cGVcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dEJhc2UsIF9leHRlbmRzKHtcbiAgICBjbGFzc2VzOiBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgY2xhc3NlcyksIHt9LCB7XG4gICAgICByb290OiBjbHN4KGNsYXNzZXMucm9vdCwgIWRpc2FibGVVbmRlcmxpbmUgJiYgY2xhc3Nlcy51bmRlcmxpbmUpLFxuICAgICAgdW5kZXJsaW5lOiBudWxsXG4gICAgfSksXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmlsbGVkSW5wdXQucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5GaWxsZWRJbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGaWxsZWRJbnB1dCdcbn0pKEZpbGxlZElucHV0KTsiLCJpbXBvcnQgeyB1c2VUaGVtZSBhcyB1c2VUaGVtZVdpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgdmFyIHRoZW1lID0gdXNlVGhlbWVXaXRob3V0RGVmYXVsdCgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IC01LFxuICAgICAgbGVmdDogMCxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmc6ICcwIDhweCcsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxlZ2VuZCBlbGVtZW50IHdoZW4gYGxhYmVsV2lkdGhgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGxlZ2VuZDoge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbGluZUhlaWdodDogJzExcHgnLFxuICAgICAgLy8gc3luYyB3aXRoIGBoZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd3aWR0aCcsIHtcbiAgICAgICAgZHVyYXRpb246IDE1MCxcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxlZ2VuZCBlbGVtZW50LiAqL1xuICAgIGxlZ2VuZExhYmVsbGVkOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIGhlaWdodDogMTEsXG4gICAgICAvLyBzeW5jIHdpdGggYGxpbmVIZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICAgICAgZm9udFNpemU6ICcwLjc1ZW0nLFxuICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgICBtYXhXaWR0aDogMC4wMSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgICAgICBkdXJhdGlvbjogNTAsXG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgIH0pLFxuICAgICAgJyYgPiBzcGFuJzoge1xuICAgICAgICBwYWRkaW5nTGVmdDogNSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiA1LFxuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgbGVnZW5kIGVsZW1lbnQgaXMgbm90Y2hlZC4gKi9cbiAgICBsZWdlbmROb3RjaGVkOiB7XG4gICAgICBtYXhXaWR0aDogMTAwMCxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0LFxuICAgICAgICBkZWxheTogNTBcbiAgICAgIH0pXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgTm90Y2hlZE91dGxpbmUgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5vdGNoZWRPdXRsaW5lKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICBsYWJlbFdpZHRoUHJvcCA9IHByb3BzLmxhYmVsV2lkdGgsXG4gICAgICBub3RjaGVkID0gcHJvcHMubm90Y2hlZCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwibGFiZWxcIiwgXCJsYWJlbFdpZHRoXCIsIFwibm90Y2hlZFwiLCBcInN0eWxlXCJdKTtcblxuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICB2YXIgYWxpZ24gPSB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gJ3JpZ2h0JyA6ICdsZWZ0JztcblxuICBpZiAobGFiZWwgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIsIF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgICByZWY6IHJlZixcbiAgICAgIHN0eWxlOiBzdHlsZVxuICAgIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsZWdlbmRcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMubGVnZW5kTGFiZWxsZWQsIG5vdGNoZWQgJiYgY2xhc3Nlcy5sZWdlbmROb3RjaGVkKVxuICAgIH0sIGxhYmVsID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIGxhYmVsKSA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgICBfX2h0bWw6ICcmIzgyMDM7J1xuICAgICAgfVxuICAgIH0pKSk7XG4gIH1cblxuICB2YXIgbGFiZWxXaWR0aCA9IGxhYmVsV2lkdGhQcm9wID4gMCA/IGxhYmVsV2lkdGhQcm9wICogMC43NSArIDggOiAwLjAxO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiLCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIHN0eWxlOiBfZXh0ZW5kcyhfZGVmaW5lUHJvcGVydHkoe30sIFwicGFkZGluZ1wiLmNvbmNhdChjYXBpdGFsaXplKGFsaWduKSksIDgpLCBzdHlsZSksXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwibGVnZW5kXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGVnZW5kLFxuICAgIHN0eWxlOiB7XG4gICAgICAvLyBJRSAxMTogZmllbGRzZXQgd2l0aCBsZWdlbmQgZG9lcyBub3QgcmVuZGVyXG4gICAgICAvLyBhIGJvcmRlciByYWRpdXMuIFRoaXMgbWFpbnRhaW5zIGNvbnNpc3RlbmN5XG4gICAgICAvLyBieSBhbHdheXMgaGF2aW5nIGEgbGVnZW5kIHJlbmRlcmVkXG4gICAgICB3aWR0aDogbm90Y2hlZCA/IGxhYmVsV2lkdGggOiAwLjAxXG4gICAgfVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICBfX2h0bWw6ICcmIzgyMDM7J1xuICAgIH1cbiAgfSkpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTm90Y2hlZE91dGxpbmUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBsYWJlbC5cbiAgICovXG4gIGxhYmVsV2lkdGg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgb3V0bGluZSBpcyBub3RjaGVkIHRvIGFjY29tbW9kYXRlIHRoZSBsYWJlbC5cbiAgICovXG4gIG5vdGNoZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ1ByaXZhdGVOb3RjaGVkT3V0bGluZSdcbn0pKE5vdGNoZWRPdXRsaW5lKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCBOb3RjaGVkT3V0bGluZSBmcm9tICcuL05vdGNoZWRPdXRsaW5lJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBib3JkZXJDb2xvciA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMjMpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjMpJztcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICAnJjpob3ZlciAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeVxuICAgICAgfSxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICcmOmhvdmVyICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgICBib3JkZXJDb2xvcjogYm9yZGVyQ29sb3JcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGZvY3VzZWQgJG5vdGNoZWRPdXRsaW5lJzoge1xuICAgICAgICBib3JkZXJDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAgIGJvcmRlcldpZHRoOiAyXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3IgJG5vdGNoZWRPdXRsaW5lJzoge1xuICAgICAgICBib3JkZXJDb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQgJG5vdGNoZWRPdXRsaW5lJzoge1xuICAgICAgICBib3JkZXJDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29sb3IgaXMgc2Vjb25kYXJ5LiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICAnJiRmb2N1c2VkICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBhZG9ybmVkU3RhcnQ6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAxNFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRFbmQ6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMTRcbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBtdWx0aWxpbmU6IHtcbiAgICAgIHBhZGRpbmc6ICcxOC41cHggMTRweCcsXG4gICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogMTAuNSxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogMTAuNVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYE5vdGNoZWRPdXRsaW5lYCBlbGVtZW50LiAqL1xuICAgIG5vdGNoZWRPdXRsaW5lOiB7XG4gICAgICBib3JkZXJDb2xvcjogYm9yZGVyQ29sb3JcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge1xuICAgICAgcGFkZGluZzogJzE4LjVweCAxNHB4JyxcbiAgICAgICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgICAgIFdlYmtpdEJveFNoYWRvdzogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnZGFyaycgPyAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcgOiBudWxsLFxuICAgICAgICBXZWJraXRUZXh0RmlsbENvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdkYXJrJyA/ICcjZmZmJyA6IG51bGwsXG4gICAgICAgIGNhcmV0Q29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2RhcmsnID8gJyNmZmYnIDogbnVsbCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgaW5wdXRNYXJnaW5EZW5zZToge1xuICAgICAgcGFkZGluZ1RvcDogMTAuNSxcbiAgICAgIHBhZGRpbmdCb3R0b206IDEwLjVcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgaW5wdXRNdWx0aWxpbmU6IHtcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgc3RhcnRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGlucHV0QWRvcm5lZFN0YXJ0OiB7XG4gICAgICBwYWRkaW5nTGVmdDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGlucHV0QWRvcm5lZEVuZDoge1xuICAgICAgcGFkZGluZ1JpZ2h0OiAwXG4gICAgfVxuICB9O1xufTtcbnZhciBPdXRsaW5lZElucHV0ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBPdXRsaW5lZElucHV0KHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIF9wcm9wcyRpbnB1dENvbXBvbmVudCA9IHByb3BzLmlucHV0Q29tcG9uZW50LFxuICAgICAgaW5wdXRDb21wb25lbnQgPSBfcHJvcHMkaW5wdXRDb21wb25lbnQgPT09IHZvaWQgMCA/ICdpbnB1dCcgOiBfcHJvcHMkaW5wdXRDb21wb25lbnQsXG4gICAgICBsYWJlbCA9IHByb3BzLmxhYmVsLFxuICAgICAgX3Byb3BzJGxhYmVsV2lkdGggPSBwcm9wcy5sYWJlbFdpZHRoLFxuICAgICAgbGFiZWxXaWR0aCA9IF9wcm9wcyRsYWJlbFdpZHRoID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGxhYmVsV2lkdGgsXG4gICAgICBfcHJvcHMkbXVsdGlsaW5lID0gcHJvcHMubXVsdGlsaW5lLFxuICAgICAgbXVsdGlsaW5lID0gX3Byb3BzJG11bHRpbGluZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbXVsdGlsaW5lLFxuICAgICAgbm90Y2hlZCA9IHByb3BzLm5vdGNoZWQsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR0eXBlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJmdWxsV2lkdGhcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImxhYmVsXCIsIFwibGFiZWxXaWR0aFwiLCBcIm11bHRpbGluZVwiLCBcIm5vdGNoZWRcIiwgXCJ0eXBlXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgcmVuZGVyU3VmZml4OiBmdW5jdGlvbiByZW5kZXJTdWZmaXgoc3RhdGUpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOb3RjaGVkT3V0bGluZSwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMubm90Y2hlZE91dGxpbmUsXG4gICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgbGFiZWxXaWR0aDogbGFiZWxXaWR0aCxcbiAgICAgICAgbm90Y2hlZDogdHlwZW9mIG5vdGNoZWQgIT09ICd1bmRlZmluZWQnID8gbm90Y2hlZCA6IEJvb2xlYW4oc3RhdGUuc3RhcnRBZG9ybm1lbnQgfHwgc3RhdGUuZmlsbGVkIHx8IHN0YXRlLmZvY3VzZWQpXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNsYXNzZXM6IF9leHRlbmRzKF9leHRlbmRzKHt9LCBjbGFzc2VzKSwge30sIHtcbiAgICAgIHJvb3Q6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzLnVuZGVybGluZSksXG4gICAgICBub3RjaGVkT3V0bGluZTogbnVsbFxuICAgIH0pLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmU6IG11bHRpbGluZSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE91dGxpbmVkSW5wdXQucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgb2YgdGhlIGlucHV0LiBJdCBpcyBvbmx5IHVzZWQgZm9yIGxheW91dC4gVGhlIGFjdHVhbCBsYWJlbGxpbmdcbiAgICogaXMgaGFuZGxlZCBieSBgSW5wdXRMYWJlbGAuIElmIHNwZWNpZmllZCBgbGFiZWxXaWR0aGAgaXMgaWdub3JlZC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBsYWJlbC4gSXMgaWdub3JlZCBpZiBgbGFiZWxgIGlzIHByb3ZpZGVkLiBQcmVmZXIgYGxhYmVsYFxuICAgKiBpZiB0aGUgaW5wdXQgbGFiZWwgYXBwZWFycyB3aXRoIGEgc3RyaWtlIHRocm91Z2guXG4gICAqL1xuICBsYWJlbFdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgb3V0bGluZSBpcyBub3RjaGVkIHRvIGFjY29tbW9kYXRlIHRoZSBsYWJlbC5cbiAgICovXG4gIG5vdGNoZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgaW5wdXQgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbk91dGxpbmVkSW5wdXQubXVpTmFtZSA9ICdJbnB1dCc7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpT3V0bGluZWRJbnB1dCdcbn0pKE91dGxpbmVkSW5wdXQpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ybUNvbnRyb2woKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KEZvcm1Db250cm9sQ29udGV4dCk7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoX2V4dGVuZHMoe1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxKSwge30sIHtcbiAgICAgIGxpbmVIZWlnaHQ6IDEsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgJyYkZm9jdXNlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgICAgIH0sXG4gICAgICAnJiRlcnJvcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgICAgfVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29sb3IgaXMgc2Vjb25kYXJ5LiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICAnJiRmb2N1c2VkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb2N1c2VkPXt0cnVlfWAuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZmlsbGVkPXt0cnVlfWAuICovXG4gICAgZmlsbGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHJlcXVpcmVkPXt0cnVlfWAuICovXG4gICAgcmVxdWlyZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGFzdGVyaXNrIGVsZW1lbnQuICovXG4gICAgYXN0ZXJpc2s6IHtcbiAgICAgICcmJGVycm9yJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbnZhciBGb3JtTGFiZWwgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1MYWJlbChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdsYWJlbCcgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGVycm9yID0gcHJvcHMuZXJyb3IsXG4gICAgICBmaWxsZWQgPSBwcm9wcy5maWxsZWQsXG4gICAgICBmb2N1c2VkID0gcHJvcHMuZm9jdXNlZCxcbiAgICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZmlsbGVkXCIsIFwiZm9jdXNlZFwiLCBcInJlcXVpcmVkXCJdKTtcblxuICB2YXIgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICB2YXIgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnY29sb3InLCAncmVxdWlyZWQnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmaWxsZWQnXVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGZjcy5jb2xvciB8fCAncHJpbWFyeScpKV0sIGNsYXNzTmFtZSwgZmNzLmRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGZjcy5lcnJvciAmJiBjbGFzc2VzLmVycm9yLCBmY3MuZmlsbGVkICYmIGNsYXNzZXMuZmlsbGVkLCBmY3MuZm9jdXNlZCAmJiBjbGFzc2VzLmZvY3VzZWQsIGZjcy5yZXF1aXJlZCAmJiBjbGFzc2VzLnJlcXVpcmVkKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuLCBmY3MucmVxdWlyZWQgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuYXN0ZXJpc2ssIGZjcy5lcnJvciAmJiBjbGFzc2VzLmVycm9yKVxuICB9LCBcIlxcdTIwMDlcIiwgJyonKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1MYWJlbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHNob3VsZCB1c2UgZmlsbGVkIGNsYXNzZXMga2V5LlxuICAgKi9cbiAgZmlsbGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgb2YgdGhpcyBsYWJlbCBpcyBmb2N1c2VkICh1c2VkIGJ5IGBGb3JtR3JvdXBgIGNvbXBvbmVudHMpLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgaW5wdXQgaXMgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRm9ybUxhYmVsJ1xufSkoRm9ybUxhYmVsKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgRm9ybUxhYmVsIGZyb20gJy4uL0Zvcm1MYWJlbCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCBsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb2N1c2VkPXt0cnVlfWAuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcmVxdWlyZWQ9e3RydWV9YC4gKi9cbiAgICByZXF1aXJlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgYXN0ZXJpc2sgZWxlbWVudC4gKi9cbiAgICBhc3Rlcmlzazoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGBGb3JtQ29udHJvbGAuICovXG4gICAgZm9ybUNvbnRyb2w6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIC8vIHNsaWdodCBhbHRlcmF0aW9uIHRvIHNwZWMgc3BhY2luZyB0byBtYXRjaCB2aXN1YWwgc3BlYyByZXN1bHRcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAyNHB4KSBzY2FsZSgxKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgbWFyZ2luRGVuc2U6IHtcbiAgICAgIC8vIENvbXBlbnNhdGlvbiBmb3IgdGhlIGBJbnB1dC5pbnB1dERlbnNlYCBzdHlsZS5cbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAyMXB4KSBzY2FsZSgxKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgc2hyaW5rPXt0cnVlfWAuICovXG4gICAgc2hyaW5rOiB7XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMCwgMS41cHgpIHNjYWxlKDAuNzUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCBsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBkaXNhYmxlQW5pbWF0aW9uPXtmYWxzZX1gLiAqL1xuICAgIGFuaW1hdGVkOiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydjb2xvcicsICd0cmFuc2Zvcm0nXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImZpbGxlZFwiYC4gKi9cbiAgICBmaWxsZWQ6IHtcbiAgICAgIC8vIENocm9tZSdzIGF1dG9maWxsIGZlYXR1cmUgZ2l2ZXMgdGhlIGlucHV0IGZpZWxkIGEgeWVsbG93IGJhY2tncm91bmQuXG4gICAgICAvLyBTaW5jZSB0aGUgaW5wdXQgZmllbGQgaXMgYmVoaW5kIHRoZSBsYWJlbCBpbiB0aGUgSFRNTCB0cmVlLFxuICAgICAgLy8gdGhlIGlucHV0IGZpZWxkIGlzIGRyYXduIGxhc3QgYW5kIGhpZGVzIHRoZSBsYWJlbCB3aXRoIGFuIG9wYXF1ZSBiYWNrZ3JvdW5kIGNvbG9yLlxuICAgICAgLy8gekluZGV4OiAxIHdpbGwgcmFpc2UgdGhlIGxhYmVsIGFib3ZlIG9wYXF1ZSBiYWNrZ3JvdW5kLWNvbG9ycyBvZiBpbnB1dC5cbiAgICAgIHpJbmRleDogMSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxMnB4LCAyMHB4KSBzY2FsZSgxKScsXG4gICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDE3cHgpIHNjYWxlKDEpJ1xuICAgICAgfSxcbiAgICAgICcmJHNocmluayc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDEwcHgpIHNjYWxlKDAuNzUpJyxcbiAgICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDdweCkgc2NhbGUoMC43NSknXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICAvLyBzZWUgY29tbWVudCBhYm92ZSBvbiBmaWxsZWQuekluZGV4XG4gICAgICB6SW5kZXg6IDEsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTRweCwgMjBweCkgc2NhbGUoMSknLFxuICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAxMnB4KSBzY2FsZSgxKSdcbiAgICAgIH0sXG4gICAgICAnJiRzaHJpbmsnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAtNnB4KSBzY2FsZSgwLjc1KSdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xudmFyIElucHV0TGFiZWwgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0TGFiZWwocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZGlzYWJsZUFuaW1hdGkgPSBwcm9wcy5kaXNhYmxlQW5pbWF0aW9uLFxuICAgICAgZGlzYWJsZUFuaW1hdGlvbiA9IF9wcm9wcyRkaXNhYmxlQW5pbWF0aSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUFuaW1hdGksXG4gICAgICBtYXJnaW4gPSBwcm9wcy5tYXJnaW4sXG4gICAgICBzaHJpbmtQcm9wID0gcHJvcHMuc2hyaW5rLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVBbmltYXRpb25cIiwgXCJtYXJnaW5cIiwgXCJzaHJpbmtcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICB2YXIgc2hyaW5rID0gc2hyaW5rUHJvcDtcblxuICBpZiAodHlwZW9mIHNocmluayA9PT0gJ3VuZGVmaW5lZCcgJiYgbXVpRm9ybUNvbnRyb2wpIHtcbiAgICBzaHJpbmsgPSBtdWlGb3JtQ29udHJvbC5maWxsZWQgfHwgbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCB8fCBtdWlGb3JtQ29udHJvbC5hZG9ybmVkU3RhcnQ7XG4gIH1cblxuICB2YXIgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnbWFyZ2luJywgJ3ZhcmlhbnQnXVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1MYWJlbCwgX2V4dGVuZHMoe1xuICAgIFwiZGF0YS1zaHJpbmtcIjogc2hyaW5rLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgbXVpRm9ybUNvbnRyb2wgJiYgY2xhc3Nlcy5mb3JtQ29udHJvbCwgIWRpc2FibGVBbmltYXRpb24gJiYgY2xhc3Nlcy5hbmltYXRlZCwgc2hyaW5rICYmIGNsYXNzZXMuc2hyaW5rLCBmY3MubWFyZ2luID09PSAnZGVuc2UnICYmIGNsYXNzZXMubWFyZ2luRGVuc2UsIHtcbiAgICAgICdmaWxsZWQnOiBjbGFzc2VzLmZpbGxlZCxcbiAgICAgICdvdXRsaW5lZCc6IGNsYXNzZXMub3V0bGluZWRcbiAgICB9W2Zjcy52YXJpYW50XSksXG4gICAgY2xhc3Nlczoge1xuICAgICAgZm9jdXNlZDogY2xhc3Nlcy5mb2N1c2VkLFxuICAgICAgZGlzYWJsZWQ6IGNsYXNzZXMuZGlzYWJsZWQsXG4gICAgICBlcnJvcjogY2xhc3Nlcy5lcnJvcixcbiAgICAgIHJlcXVpcmVkOiBjbGFzc2VzLnJlcXVpcmVkLFxuICAgICAgYXN0ZXJpc2s6IGNsYXNzZXMuYXN0ZXJpc2tcbiAgICB9LFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0TGFiZWwucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSBgSW5wdXRMYWJlbGAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRyYW5zaXRpb24gYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZUFuaW1hdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYXBwbHkgZGlzYWJsZWQgY2xhc3MuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCBvZiB0aGlzIGxhYmVsIGlzIGZvY3VzZWQuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZSddKSxcblxuICAvKipcbiAgICogaWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBpbnB1dCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgc2hydW5rLlxuICAgKi9cbiAgc2hyaW5rOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUlucHV0TGFiZWwnXG59KShJbnB1dExhYmVsKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc011aUVsZW1lbnQoZWxlbWVudCwgbXVpTmFtZXMpIHtcbiAgcmV0dXJuIFJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpICYmIG11aU5hbWVzLmluZGV4T2YoZWxlbWVudC50eXBlLm11aU5hbWUpICE9PSAtMTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBpc0ZpbGxlZCwgaXNBZG9ybmVkU3RhcnQgfSBmcm9tICcuLi9JbnB1dEJhc2UvdXRpbHMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgaXNNdWlFbGVtZW50IGZyb20gJy4uL3V0aWxzL2lzTXVpRWxlbWVudCc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4vRm9ybUNvbnRyb2xDb250ZXh0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAvLyBSZXNldCBmaWVsZHNldCBkZWZhdWx0IHN0eWxlLlxuICAgIG1pbldpZHRoOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgbWFyZ2luOiAwLFxuICAgIGJvcmRlcjogMCxcbiAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJyAvLyBGaXggYWxpZ25tZW50IGlzc3VlIG9uIFNhZmFyaS5cblxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1hcmdpbj1cIm5vcm1hbFwiYC4gKi9cbiAgbWFyZ2luTm9ybWFsOiB7XG4gICAgbWFyZ2luVG9wOiAxNixcbiAgICBtYXJnaW5Cb3R0b206IDhcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgbWFyZ2luRGVuc2U6IHtcbiAgICBtYXJnaW5Ub3A6IDgsXG4gICAgbWFyZ2luQm90dG9tOiA0XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZnVsbFdpZHRoPXt0cnVlfWAuICovXG4gIGZ1bGxXaWR0aDoge1xuICAgIHdpZHRoOiAnMTAwJSdcbiAgfVxufTtcbi8qKlxuICogUHJvdmlkZXMgY29udGV4dCBzdWNoIGFzIGZpbGxlZC9mb2N1c2VkL2Vycm9yL3JlcXVpcmVkIGZvciBmb3JtIGlucHV0cy5cbiAqIFJlbHlpbmcgb24gdGhlIGNvbnRleHQgcHJvdmlkZXMgaGlnaCBmbGV4aWJpbGl0eSBhbmQgZW5zdXJlcyB0aGF0IHRoZSBzdGF0ZSBhbHdheXMgc3RheXNcbiAqIGNvbnNpc3RlbnQgYWNyb3NzIHRoZSBjaGlsZHJlbiBvZiB0aGUgYEZvcm1Db250cm9sYC5cbiAqIFRoaXMgY29udGV4dCBpcyB1c2VkIGJ5IHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAgLSBGb3JtTGFiZWxcbiAqICAtIEZvcm1IZWxwZXJUZXh0XG4gKiAgLSBJbnB1dFxuICogIC0gSW5wdXRMYWJlbFxuICpcbiAqIFlvdSBjYW4gZmluZCBvbmUgY29tcG9zaXRpb24gZXhhbXBsZSBiZWxvdyBhbmQgbW9yZSBnb2luZyB0byBbdGhlIGRlbW9zXSgvY29tcG9uZW50cy90ZXh0LWZpZWxkcy8jY29tcG9uZW50cykuXG4gKlxuICogYGBganN4XG4gKiA8Rm9ybUNvbnRyb2w+XG4gKiAgIDxJbnB1dExhYmVsIGh0bWxGb3I9XCJteS1pbnB1dFwiPkVtYWlsIGFkZHJlc3M8L0lucHV0TGFiZWw+XG4gKiAgIDxJbnB1dCBpZD1cIm15LWlucHV0XCIgYXJpYS1kZXNjcmliZWRieT1cIm15LWhlbHBlci10ZXh0XCIgLz5cbiAqICAgPEZvcm1IZWxwZXJUZXh0IGlkPVwibXktaGVscGVyLXRleHRcIj5XZSdsbCBuZXZlciBzaGFyZSB5b3VyIGVtYWlsLjwvRm9ybUhlbHBlclRleHQ+XG4gKiA8L0Zvcm1Db250cm9sPlxuICogYGBgXG4gKlxuICog4pqg77iPT25seSBvbmUgaW5wdXQgY2FuIGJlIHVzZWQgd2l0aGluIGEgRm9ybUNvbnRyb2wuXG4gKi9cblxudmFyIEZvcm1Db250cm9sID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGb3JtQ29udHJvbChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAncHJpbWFyeScgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIGVycm9yID0gX3Byb3BzJGVycm9yID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRlcnJvcixcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICB2aXN1YWxseUZvY3VzZWQgPSBwcm9wcy5mb2N1c2VkLFxuICAgICAgX3Byb3BzJGhpZGRlbkxhYmVsID0gcHJvcHMuaGlkZGVuTGFiZWwsXG4gICAgICBoaWRkZW5MYWJlbCA9IF9wcm9wcyRoaWRkZW5MYWJlbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaGlkZGVuTGFiZWwsXG4gICAgICBfcHJvcHMkbWFyZ2luID0gcHJvcHMubWFyZ2luLFxuICAgICAgbWFyZ2luID0gX3Byb3BzJG1hcmdpbiA9PT0gdm9pZCAwID8gJ25vbmUnIDogX3Byb3BzJG1hcmdpbixcbiAgICAgIF9wcm9wcyRyZXF1aXJlZCA9IHByb3BzLnJlcXVpcmVkLFxuICAgICAgcmVxdWlyZWQgPSBfcHJvcHMkcmVxdWlyZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHJlcXVpcmVkLFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmdWxsV2lkdGhcIiwgXCJmb2N1c2VkXCIsIFwiaGlkZGVuTGFiZWxcIiwgXCJtYXJnaW5cIiwgXCJyZXF1aXJlZFwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgIC8vIFdlIG5lZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIHRoZSBjaGlsZHJlbiBhbmQgZmluZCB0aGUgSW5wdXQgaW4gb3JkZXJcbiAgICAvLyB0byBmdWxseSBzdXBwb3J0IHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICB2YXIgaW5pdGlhbEFkb3JuZWRTdGFydCA9IGZhbHNlO1xuXG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKCFpc011aUVsZW1lbnQoY2hpbGQsIFsnSW5wdXQnLCAnU2VsZWN0J10pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlucHV0ID0gaXNNdWlFbGVtZW50KGNoaWxkLCBbJ1NlbGVjdCddKSA/IGNoaWxkLnByb3BzLmlucHV0IDogY2hpbGQ7XG5cbiAgICAgICAgaWYgKGlucHV0ICYmIGlzQWRvcm5lZFN0YXJ0KGlucHV0LnByb3BzKSkge1xuICAgICAgICAgIGluaXRpYWxBZG9ybmVkU3RhcnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5pdGlhbEFkb3JuZWRTdGFydDtcbiAgfSksXG4gICAgICBhZG9ybmVkU3RhcnQgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRBZG9ybmVkU3RhcnQgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTIgPSBSZWFjdC51c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIHZhciBpbml0aWFsRmlsbGVkID0gZmFsc2U7XG5cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoIWlzTXVpRWxlbWVudChjaGlsZCwgWydJbnB1dCcsICdTZWxlY3QnXSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGaWxsZWQoY2hpbGQucHJvcHMsIHRydWUpKSB7XG4gICAgICAgICAgaW5pdGlhbEZpbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBpbml0aWFsRmlsbGVkO1xuICB9KSxcbiAgICAgIGZpbGxlZCA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRGaWxsZWQgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUzID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX2ZvY3VzZWQgPSBfUmVhY3QkdXNlU3RhdGUzWzBdLFxuICAgICAgc2V0Rm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZTNbMV07XG5cbiAgdmFyIGZvY3VzZWQgPSB2aXN1YWxseUZvY3VzZWQgIT09IHVuZGVmaW5lZCA/IHZpc3VhbGx5Rm9jdXNlZCA6IF9mb2N1c2VkO1xuXG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c2VkKSB7XG4gICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gIH1cblxuICB2YXIgcmVnaXN0ZXJFZmZlY3Q7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICB2YXIgcmVnaXN0ZXJlZElucHV0ID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICAgIHJlZ2lzdGVyRWZmZWN0ID0gZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QoKSB7XG4gICAgICBpZiAocmVnaXN0ZXJlZElucHV0LmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGVyZSBhcmUgbXVsdGlwbGUgSW5wdXRCYXNlIGNvbXBvbmVudHMgaW5zaWRlIGEgRm9ybUNvbnRyb2wuJywgJ1RoaXMgaXMgbm90IHN1cHBvcnRlZC4gSXQgbWlnaHQgY2F1c2UgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3BzLicsICdPbmx5IHVzZSBvbmUgSW5wdXRCYXNlLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cblxuICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHZhciBvbkZpbGxlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBzZXRGaWxsZWQodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgdmFyIG9uRW1wdHkgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc2V0RmlsbGVkKGZhbHNlKTtcbiAgfSwgW10pO1xuICB2YXIgY2hpbGRDb250ZXh0ID0ge1xuICAgIGFkb3JuZWRTdGFydDogYWRvcm5lZFN0YXJ0LFxuICAgIHNldEFkb3JuZWRTdGFydDogc2V0QWRvcm5lZFN0YXJ0LFxuICAgIGNvbG9yOiBjb2xvcixcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZXJyb3I6IGVycm9yLFxuICAgIGZpbGxlZDogZmlsbGVkLFxuICAgIGZvY3VzZWQ6IGZvY3VzZWQsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWw6IGhpZGRlbkxhYmVsLFxuICAgIG1hcmdpbjogKHNpemUgPT09ICdzbWFsbCcgPyAnZGVuc2UnIDogdW5kZWZpbmVkKSB8fCBtYXJnaW4sXG4gICAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9LFxuICAgIG9uRW1wdHk6IG9uRW1wdHksXG4gICAgb25GaWxsZWQ6IG9uRmlsbGVkLFxuICAgIG9uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgICBzZXRGb2N1c2VkKHRydWUpO1xuICAgIH0sXG4gICAgcmVnaXN0ZXJFZmZlY3Q6IHJlZ2lzdGVyRWZmZWN0LFxuICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICB2YXJpYW50OiB2YXJpYW50XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgbWFyZ2luICE9PSAnbm9uZScgJiYgY2xhc3Nlc1tcIm1hcmdpblwiLmNvbmNhdChjYXBpdGFsaXplKG1hcmdpbikpXSwgZnVsbFdpZHRoICYmIGNsYXNzZXMuZnVsbFdpZHRoKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1Db250cm9sLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgZm9ybSBjb250cm9sLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCwgaW5wdXQgYW5kIGhlbHBlciB0ZXh0IHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYSBkaXNhYmxlZCBzdGF0ZS5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgYmUgZGlzcGxheWVkIGluIGZvY3VzZWQgc3RhdGUuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBiZSBoaWRkZW4uXG4gICAqIFRoaXMgaXMgdXNlZCB0byBpbmNyZWFzZSBkZW5zaXR5IGZvciBhIGBGaWxsZWRJbnB1dGAuXG4gICAqIEJlIHN1cmUgdG8gYWRkIGBhcmlhLWxhYmVsYCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaGlkZGVuTGFiZWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgIG9yIGBub3JtYWxgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nIG9mIHRoaXMgYW5kIGNvbnRhaW5lZCBjb21wb25lbnRzLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydub25lJywgJ2RlbnNlJywgJ25vcm1hbCddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBpbnB1dCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIHRleHQgZmllbGQuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydzbWFsbCcsICdtZWRpdW0nXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGb3JtQ29udHJvbCdcbn0pKEZvcm1Db250cm9sKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoX2V4dGVuZHMoe1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LCB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb24pLCB7fSwge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBtYXJnaW5Ub3A6IDMsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZFxuICAgICAgfSxcbiAgICAgICcmJGVycm9yJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfSksXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgbWFyZ2luRGVuc2U6IHtcbiAgICAgIG1hcmdpblRvcDogNFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZmlsbGVkXCJgIG9yIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgY29udGFpbmVkOiB7XG4gICAgICBtYXJnaW5MZWZ0OiAxNCxcbiAgICAgIG1hcmdpblJpZ2h0OiAxNFxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb2N1c2VkPXt0cnVlfWAuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmaWxsZWQ9e3RydWV9YC4gKi9cbiAgICBmaWxsZWQ6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcmVxdWlyZWQ9e3RydWV9YC4gKi9cbiAgICByZXF1aXJlZDoge31cbiAgfTtcbn07XG52YXIgRm9ybUhlbHBlclRleHQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1IZWxwZXJUZXh0KHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAncCcgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGVycm9yID0gcHJvcHMuZXJyb3IsXG4gICAgICBmaWxsZWQgPSBwcm9wcy5maWxsZWQsXG4gICAgICBmb2N1c2VkID0gcHJvcHMuZm9jdXNlZCxcbiAgICAgIG1hcmdpbiA9IHByb3BzLm1hcmdpbixcbiAgICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZmlsbGVkXCIsIFwiZm9jdXNlZFwiLCBcIm1hcmdpblwiLCBcInJlcXVpcmVkXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgdmFyIGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnLCAnbWFyZ2luJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZpbGxlZCcsICdmb2N1c2VkJywgJ3JlcXVpcmVkJ11cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCAoZmNzLnZhcmlhbnQgPT09ICdmaWxsZWQnIHx8IGZjcy52YXJpYW50ID09PSAnb3V0bGluZWQnKSAmJiBjbGFzc2VzLmNvbnRhaW5lZCwgY2xhc3NOYW1lLCBmY3MuZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IsIGZjcy5maWxsZWQgJiYgY2xhc3Nlcy5maWxsZWQsIGZjcy5mb2N1c2VkICYmIGNsYXNzZXMuZm9jdXNlZCwgZmNzLnJlcXVpcmVkICYmIGNsYXNzZXMucmVxdWlyZWQsIGZjcy5tYXJnaW4gPT09ICdkZW5zZScgJiYgY2xhc3Nlcy5tYXJnaW5EZW5zZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbiA9PT0gJyAnID9cbiAgLyojX19QVVJFX18qL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGFuZ2VyXG4gIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICB9XG4gIH0pIDogY2hpbGRyZW4pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtSGVscGVyVGV4dC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBJZiBgJyAnYCBpcyBwcm92aWRlZCwgdGhlIGNvbXBvbmVudCByZXNlcnZlcyBvbmUgbGluZSBoZWlnaHQgZm9yIGRpc3BsYXlpbmcgYSBmdXR1cmUgbWVzc2FnZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlbHBlciB0ZXh0IHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYSBkaXNhYmxlZCBzdGF0ZS5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgdXNlIGZpbGxlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZpbGxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlbHBlciB0ZXh0IHNob3VsZCB1c2UgZm9jdXNlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZvY3VzZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgdXNlIHJlcXVpcmVkIGNsYXNzZXMga2V5LlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRm9ybUhlbHBlclRleHQnXG59KShGb3JtSGVscGVyVGV4dCk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJEb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbn0iLCJpbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuL293bmVyRG9jdW1lbnQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJXaW5kb3cobm9kZSkge1xuICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChub2RlKTtcbiAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG59IiwiLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb25cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jdGlvbnMgdG8gY2hhaW5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxudWxsfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZnVuYykge1xuICAgIGlmIChmdW5jID09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogSW52YWxpZCBBcmd1bWVudCBUeXBlLCBtdXN0IG9ubHkgcHJvdmlkZSBmdW5jdGlvbnMsIHVuZGVmaW5lZCwgb3IgbnVsbC4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgYWNjLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9LCBmdW5jdGlvbiAoKSB7fSk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AsIEhUTUxFbGVtZW50VHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4uL3V0aWxzL3NldFJlZic7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICBjb250YWluZXIgPSB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7IC8vICNTdHJpY3RNb2RlIHJlYWR5XG5cbiAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKGNvbnRhaW5lcik7XG59XG5cbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuLyoqXG4gKiBQb3J0YWxzIHByb3ZpZGUgYSBmaXJzdC1jbGFzcyB3YXkgdG8gcmVuZGVyIGNoaWxkcmVuIGludG8gYSBET00gbm9kZVxuICogdGhhdCBleGlzdHMgb3V0c2lkZSB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUG9ydGFsID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3J0YWwocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNvbnRhaW5lciA9IHByb3BzLmNvbnRhaW5lcixcbiAgICAgIF9wcm9wcyRkaXNhYmxlUG9ydGFsID0gcHJvcHMuZGlzYWJsZVBvcnRhbCxcbiAgICAgIGRpc2FibGVQb3J0YWwgPSBfcHJvcHMkZGlzYWJsZVBvcnRhbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVBvcnRhbCxcbiAgICAgIG9uUmVuZGVyZWQgPSBwcm9wcy5vblJlbmRlcmVkO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShudWxsKSxcbiAgICAgIG1vdW50Tm9kZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldE1vdW50Tm9kZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbi5yZWYgOiBudWxsLCByZWYpO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRNb3VudE5vZGUoZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikgfHwgZG9jdW1lbnQuYm9keSk7XG4gICAgfVxuICB9LCBbY29udGFpbmVyLCBkaXNhYmxlUG9ydGFsXSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobW91bnROb2RlICYmICFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRSZWYocmVmLCBtb3VudE5vZGUpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0UmVmKHJlZiwgbnVsbCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtyZWYsIG1vdW50Tm9kZSwgZGlzYWJsZVBvcnRhbF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG9uUmVuZGVyZWQgJiYgKG1vdW50Tm9kZSB8fCBkaXNhYmxlUG9ydGFsKSkge1xuICAgICAgb25SZW5kZXJlZCgpO1xuICAgIH1cbiAgfSwgW29uUmVuZGVyZWQsIG1vdW50Tm9kZSwgZGlzYWJsZVBvcnRhbF0pO1xuXG4gIGlmIChkaXNhYmxlUG9ydGFsKSB7XG4gICAgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgICByZWY6IGhhbmRsZVJlZlxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG5cbiAgcmV0dXJuIG1vdW50Tm9kZSA/IFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChjaGlsZHJlbiwgbW91bnROb2RlKSA6IG1vdW50Tm9kZTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUG9ydGFsLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjaGlsZHJlbiB0byByZW5kZXIgaW50byB0aGUgYGNvbnRhaW5lcmAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEEgSFRNTCBlbGVtZW50LCBjb21wb25lbnQgaW5zdGFuY2UsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmluc3RhbmNlT2YoUmVhY3QuQ29tcG9uZW50KSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgcG9ydGFsIGJlaGF2aW9yLlxuICAgKiBUaGUgY2hpbGRyZW4gc3RheSB3aXRoaW4gaXQncyBwYXJlbnQgRE9NIGhpZXJhcmNoeS5cbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBvbmNlIHRoZSBjaGlsZHJlbiBoYXMgYmVlbiBtb3VudGVkIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKlxuICAgKiBUaGlzIHByb3Agd2lsbCBiZSBkZXByZWNhdGVkIGFuZCByZW1vdmVkIGluIHY1LCB0aGUgcmVmIGNhbiBiZSB1c2VkIGluc3RlYWQuXG4gICAqL1xuICBvblJlbmRlcmVkOiBQcm9wVHlwZXMuZnVuY1xufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIFBvcnRhbFsncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChQb3J0YWwucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9ydGFsOyIsIi8vIEEgY2hhbmdlIG9mIHRoZSBicm93c2VyIHpvb20gY2hhbmdlIHRoZSBzY3JvbGxiYXIgc2l6ZS5cbi8vIENyZWRpdCBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8zZmZlM2E1ZDgyZjZmNTYxYjgyZmY3OGQ4MmIzMmE3ZDE0YWVkNTU4L2pzL3NyYy9tb2RhbC5qcyNMNTEyLUw1MTlcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNjcm9sbGJhclNpemUoKSB7XG4gIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgc2Nyb2xsRGl2LnN0eWxlLndpZHRoID0gJzk5cHgnO1xuICBzY3JvbGxEaXYuc3R5bGUuaGVpZ2h0ID0gJzk5cHgnO1xuICBzY3JvbGxEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICBzY3JvbGxEaXYuc3R5bGUudG9wID0gJy05OTk5cHgnO1xuICBzY3JvbGxEaXYuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuICB2YXIgc2Nyb2xsYmFyU2l6ZSA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICByZXR1cm4gc2Nyb2xsYmFyU2l6ZTtcbn0iLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgZ2V0U2Nyb2xsYmFyU2l6ZSBmcm9tICcuLi91dGlscy9nZXRTY3JvbGxiYXJTaXplJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IG93bmVyV2luZG93IGZyb20gJy4uL3V0aWxzL293bmVyV2luZG93JzsgLy8gSXMgYSB2ZXJ0aWNhbCBzY3JvbGxiYXIgZGlzcGxheWVkP1xuXG5mdW5jdGlvbiBpc092ZXJmbG93aW5nKGNvbnRhaW5lcikge1xuICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChjb250YWluZXIpO1xuXG4gIGlmIChkb2MuYm9keSA9PT0gY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIG93bmVyV2luZG93KGRvYykuaW5uZXJXaWR0aCA+IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIH1cblxuICByZXR1cm4gY29udGFpbmVyLnNjcm9sbEhlaWdodCA+IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcmlhSGlkZGVuKG5vZGUsIHNob3cpIHtcbiAgaWYgKHNob3cpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICB9IGVsc2Uge1xuICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFBhZGRpbmdSaWdodChub2RlKSB7XG4gIHJldHVybiBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKVsncGFkZGluZy1yaWdodCddLCAxMCkgfHwgMDtcbn1cblxuZnVuY3Rpb24gYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnROb2RlLCBjdXJyZW50Tm9kZSkge1xuICB2YXIgbm9kZXNUb0V4Y2x1ZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IFtdO1xuICB2YXIgc2hvdyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ID8gYXJndW1lbnRzWzRdIDogdW5kZWZpbmVkO1xuICB2YXIgYmxhY2tsaXN0ID0gW21vdW50Tm9kZSwgY3VycmVudE5vZGVdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobm9kZXNUb0V4Y2x1ZGUpKTtcbiAgdmFyIGJsYWNrbGlzdFRhZ05hbWVzID0gWydURU1QTEFURScsICdTQ1JJUFQnLCAnU1RZTEUnXTtcbiAgW10uZm9yRWFjaC5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBibGFja2xpc3QuaW5kZXhPZihub2RlKSA9PT0gLTEgJiYgYmxhY2tsaXN0VGFnTmFtZXMuaW5kZXhPZihub2RlLnRhZ05hbWUpID09PSAtMSkge1xuICAgICAgYXJpYUhpZGRlbihub2RlLCBzaG93KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXhPZihjb250YWluZXJJbmZvLCBjYWxsYmFjaykge1xuICB2YXIgaWR4ID0gLTE7XG4gIGNvbnRhaW5lckluZm8uc29tZShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoY2FsbGJhY2soaXRlbSkpIHtcbiAgICAgIGlkeCA9IGluZGV4O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbiAgcmV0dXJuIGlkeDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQ29udGFpbmVyKGNvbnRhaW5lckluZm8sIHByb3BzKSB7XG4gIHZhciByZXN0b3JlU3R5bGUgPSBbXTtcbiAgdmFyIHJlc3RvcmVQYWRkaW5ncyA9IFtdO1xuICB2YXIgY29udGFpbmVyID0gY29udGFpbmVySW5mby5jb250YWluZXI7XG4gIHZhciBmaXhlZE5vZGVzO1xuXG4gIGlmICghcHJvcHMuZGlzYWJsZVNjcm9sbExvY2spIHtcbiAgICBpZiAoaXNPdmVyZmxvd2luZyhjb250YWluZXIpKSB7XG4gICAgICAvLyBDb21wdXRlIHRoZSBzaXplIGJlZm9yZSBhcHBseWluZyBvdmVyZmxvdyBoaWRkZW4gdG8gYXZvaWQgYW55IHNjcm9sbCBqdW1wcy5cbiAgICAgIHZhciBzY3JvbGxiYXJTaXplID0gZ2V0U2Nyb2xsYmFyU2l6ZSgpO1xuICAgICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgICB2YWx1ZTogY29udGFpbmVyLnN0eWxlLnBhZGRpbmdSaWdodCxcbiAgICAgICAga2V5OiAncGFkZGluZy1yaWdodCcsXG4gICAgICAgIGVsOiBjb250YWluZXJcbiAgICAgIH0pOyAvLyBVc2UgY29tcHV0ZWQgc3R5bGUsIGhlcmUgdG8gZ2V0IHRoZSByZWFsIHBhZGRpbmcgdG8gYWRkIG91ciBzY3JvbGxiYXIgd2lkdGguXG5cbiAgICAgIGNvbnRhaW5lci5zdHlsZVsncGFkZGluZy1yaWdodCddID0gXCJcIi5jb25jYXQoZ2V0UGFkZGluZ1JpZ2h0KGNvbnRhaW5lcikgKyBzY3JvbGxiYXJTaXplLCBcInB4XCIpOyAvLyAubXVpLWZpeGVkIGlzIGEgZ2xvYmFsIGhlbHBlci5cblxuICAgICAgZml4ZWROb2RlcyA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yQWxsKCcubXVpLWZpeGVkJyk7XG4gICAgICBbXS5mb3JFYWNoLmNhbGwoZml4ZWROb2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmVzdG9yZVBhZGRpbmdzLnB1c2gobm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQpO1xuICAgICAgICBub2RlLnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiXCIuY29uY2F0KGdldFBhZGRpbmdSaWdodChub2RlKSArIHNjcm9sbGJhclNpemUsIFwicHhcIik7XG4gICAgICB9KTtcbiAgICB9IC8vIEltcHJvdmUgR2F0c2J5IHN1cHBvcnRcbiAgICAvLyBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2Nzcy9mb3JjZS12ZXJ0aWNhbC1zY3JvbGxiYXIvXG5cblxuICAgIHZhciBwYXJlbnQgPSBjb250YWluZXIucGFyZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsQ29udGFpbmVyID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KVsnb3ZlcmZsb3cteSddID09PSAnc2Nyb2xsJyA/IHBhcmVudCA6IGNvbnRhaW5lcjsgLy8gQmxvY2sgdGhlIHNjcm9sbCBldmVuIGlmIG5vIHNjcm9sbGJhciBpcyB2aXNpYmxlIHRvIGFjY291bnQgZm9yIG1vYmlsZSBrZXlib2FyZFxuICAgIC8vIHNjcmVlbnNpemUgc2hyaW5rLlxuXG4gICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgdmFsdWU6IHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyxcbiAgICAgIGtleTogJ292ZXJmbG93JyxcbiAgICAgIGVsOiBzY3JvbGxDb250YWluZXJcbiAgICB9KTtcbiAgICBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgfVxuXG4gIHZhciByZXN0b3JlID0gZnVuY3Rpb24gcmVzdG9yZSgpIHtcbiAgICBpZiAoZml4ZWROb2Rlcykge1xuICAgICAgW10uZm9yRWFjaC5jYWxsKGZpeGVkTm9kZXMsIGZ1bmN0aW9uIChub2RlLCBpKSB7XG4gICAgICAgIGlmIChyZXN0b3JlUGFkZGluZ3NbaV0pIHtcbiAgICAgICAgICBub2RlLnN0eWxlLnBhZGRpbmdSaWdodCA9IHJlc3RvcmVQYWRkaW5nc1tpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlc3RvcmVTdHlsZS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgICAgIGVsID0gX3JlZi5lbCxcbiAgICAgICAgICBrZXkgPSBfcmVmLmtleTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoa2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gcmVzdG9yZTtcbn1cblxuZnVuY3Rpb24gZ2V0SGlkZGVuU2libGluZ3MoY29udGFpbmVyKSB7XG4gIHZhciBoaWRkZW5TaWJsaW5ncyA9IFtdO1xuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKSA9PT0gJ3RydWUnKSB7XG4gICAgICBoaWRkZW5TaWJsaW5ncy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBoaWRkZW5TaWJsaW5ncztcbn1cbi8qKlxuICogQGlnbm9yZSAtIGRvIG5vdCBkb2N1bWVudC5cbiAqXG4gKiBQcm9wZXIgc3RhdGUgbWFuYWdlbWVudCBmb3IgY29udGFpbmVycyBhbmQgdGhlIG1vZGFscyBpbiB0aG9zZSBjb250YWluZXJzLlxuICogU2ltcGxpZmllZCwgYnV0IGluc3BpcmVkIGJ5IHJlYWN0LW92ZXJsYXkncyBNb2RhbE1hbmFnZXIgY2xhc3MuXG4gKiBVc2VkIGJ5IHRoZSBNb2RhbCB0byBlbnN1cmUgcHJvcGVyIHN0eWxpbmcgb2YgY29udGFpbmVycy5cbiAqL1xuXG5cbnZhciBNb2RhbE1hbmFnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNb2RhbE1hbmFnZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsTWFuYWdlcik7XG5cbiAgICAvLyB0aGlzLm1vZGFsc1ttb2RhbEluZGV4XSA9IG1vZGFsXG4gICAgdGhpcy5tb2RhbHMgPSBbXTsgLy8gdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XSA9IHtcbiAgICAvLyAgIG1vZGFsczogW10sXG4gICAgLy8gICBjb250YWluZXIsXG4gICAgLy8gICByZXN0b3JlOiBudWxsLFxuICAgIC8vIH1cblxuICAgIHRoaXMuY29udGFpbmVycyA9IFtdO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1vZGFsTWFuYWdlciwgW3tcbiAgICBrZXk6IFwiYWRkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChtb2RhbCwgY29udGFpbmVyKSB7XG4gICAgICB2YXIgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgICBpZiAobW9kYWxJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgICB9XG5cbiAgICAgIG1vZGFsSW5kZXggPSB0aGlzLm1vZGFscy5sZW5ndGg7XG4gICAgICB0aGlzLm1vZGFscy5wdXNoKG1vZGFsKTsgLy8gSWYgdGhlIG1vZGFsIHdlIGFyZSBhZGRpbmcgaXMgYWxyZWFkeSBpbiB0aGUgRE9NLlxuXG4gICAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgICAgYXJpYUhpZGRlbihtb2RhbC5tb2RhbFJlZiwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGlkZGVuU2libGluZ05vZGVzID0gZ2V0SGlkZGVuU2libGluZ3MoY29udGFpbmVyKTtcbiAgICAgIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXIsIG1vZGFsLm1vdW50Tm9kZSwgbW9kYWwubW9kYWxSZWYsIGhpZGRlblNpYmxpbmdOb2RlcywgdHJ1ZSk7XG4gICAgICB2YXIgY29udGFpbmVySW5kZXggPSBmaW5kSW5kZXhPZih0aGlzLmNvbnRhaW5lcnMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmNvbnRhaW5lciA9PT0gY29udGFpbmVyO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjb250YWluZXJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XS5tb2RhbHMucHVzaChtb2RhbCk7XG4gICAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lcnMucHVzaCh7XG4gICAgICAgIG1vZGFsczogW21vZGFsXSxcbiAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICAgIHJlc3RvcmU6IG51bGwsXG4gICAgICAgIGhpZGRlblNpYmxpbmdOb2RlczogaGlkZGVuU2libGluZ05vZGVzXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VudChtb2RhbCwgcHJvcHMpIHtcbiAgICAgIHZhciBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbnRhaW5lckluZm8gPSB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdO1xuXG4gICAgICBpZiAoIWNvbnRhaW5lckluZm8ucmVzdG9yZSkge1xuICAgICAgICBjb250YWluZXJJbmZvLnJlc3RvcmUgPSBoYW5kbGVDb250YWluZXIoY29udGFpbmVySW5mbywgcHJvcHMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKG1vZGFsKSB7XG4gICAgICB2YXIgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgICBpZiAobW9kYWxJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbnRhaW5lckluZm8gPSB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdO1xuICAgICAgY29udGFpbmVySW5mby5tb2RhbHMuc3BsaWNlKGNvbnRhaW5lckluZm8ubW9kYWxzLmluZGV4T2YobW9kYWwpLCAxKTtcbiAgICAgIHRoaXMubW9kYWxzLnNwbGljZShtb2RhbEluZGV4LCAxKTsgLy8gSWYgdGhhdCB3YXMgdGhlIGxhc3QgbW9kYWwgaW4gYSBjb250YWluZXIsIGNsZWFuIHVwIHRoZSBjb250YWluZXIuXG5cbiAgICAgIGlmIChjb250YWluZXJJbmZvLm1vZGFscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gVGhlIG1vZGFsIG1pZ2h0IGJlIGNsb3NlZCBiZWZvcmUgaXQgaGFkIHRoZSBjaGFuY2UgdG8gYmUgbW91bnRlZCBpbiB0aGUgRE9NLlxuICAgICAgICBpZiAoY29udGFpbmVySW5mby5yZXN0b3JlKSB7XG4gICAgICAgICAgY29udGFpbmVySW5mby5yZXN0b3JlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgICAgICAvLyBJbiBjYXNlIHRoZSBtb2RhbCB3YXNuJ3QgaW4gdGhlIERPTSB5ZXQuXG4gICAgICAgICAgYXJpYUhpZGRlbihtb2RhbC5tb2RhbFJlZiwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVySW5mby5jb250YWluZXIsIG1vZGFsLm1vdW50Tm9kZSwgbW9kYWwubW9kYWxSZWYsIGNvbnRhaW5lckluZm8uaGlkZGVuU2libGluZ05vZGVzLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVycy5zcGxpY2UoY29udGFpbmVySW5kZXgsIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIG1ha2Ugc3VyZSB0aGUgbmV4dCB0b3AgbW9kYWwgaXMgdmlzaWJsZSB0byBhIHNjcmVlbiByZWFkZXIuXG4gICAgICAgIHZhciBuZXh0VG9wID0gY29udGFpbmVySW5mby5tb2RhbHNbY29udGFpbmVySW5mby5tb2RhbHMubGVuZ3RoIC0gMV07IC8vIGFzIHNvb24gYXMgYSBtb2RhbCBpcyBhZGRpbmcgaXRzIG1vZGFsUmVmIGlzIHVuZGVmaW5lZC4gaXQgY2FuJ3Qgc2V0XG4gICAgICAgIC8vIGFyaWEtaGlkZGVuIGJlY2F1c2UgdGhlIGRvbSBlbGVtZW50IGRvZXNuJ3QgZXhpc3QgZWl0aGVyXG4gICAgICAgIC8vIHdoZW4gbW9kYWwgd2FzIHVubW91bnRlZCBiZWZvcmUgbW9kYWxSZWYgZ2V0cyBudWxsXG5cbiAgICAgICAgaWYgKG5leHRUb3AubW9kYWxSZWYpIHtcbiAgICAgICAgICBhcmlhSGlkZGVuKG5leHRUb3AubW9kYWxSZWYsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNUb3BNb2RhbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1RvcE1vZGFsKG1vZGFsKSB7XG4gICAgICByZXR1cm4gdGhpcy5tb2RhbHMubGVuZ3RoID4gMCAmJiB0aGlzLm1vZGFsc1t0aGlzLm1vZGFscy5sZW5ndGggLSAxXSA9PT0gbW9kYWw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1vZGFsTWFuYWdlcjtcbn0oKTtcblxuZXhwb3J0IHsgTW9kYWxNYW5hZ2VyIGFzIGRlZmF1bHQgfTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSIsIi8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuLCBqc3gtYTExeS9uby1ub25pbnRlcmFjdGl2ZS10YWJpbmRleCAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFRyYXBGb2N1cyhwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9IHByb3BzLmRpc2FibGVBdXRvRm9jdXMsXG4gICAgICBkaXNhYmxlQXV0b0ZvY3VzID0gX3Byb3BzJGRpc2FibGVBdXRvRm9jID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRW5mb3JjZSA9IHByb3BzLmRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gX3Byb3BzJGRpc2FibGVFbmZvcmNlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRW5mb3JjZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUmVzdG9yZSA9IHByb3BzLmRpc2FibGVSZXN0b3JlRm9jdXMsXG4gICAgICBkaXNhYmxlUmVzdG9yZUZvY3VzID0gX3Byb3BzJGRpc2FibGVSZXN0b3JlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUmVzdG9yZSxcbiAgICAgIGdldERvYyA9IHByb3BzLmdldERvYyxcbiAgICAgIGlzRW5hYmxlZCA9IHByb3BzLmlzRW5hYmxlZCxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuO1xuICB2YXIgaWdub3JlTmV4dEVuZm9yY2VGb2N1cyA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgc2VudGluZWxTdGFydCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIHNlbnRpbmVsRW5kID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgbm9kZVRvUmVzdG9yZSA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgcm9vdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTsgLy8gY2FuIGJlIHJlbW92ZWQgb25jZSB3ZSBkcm9wIHN1cHBvcnQgZm9yIG5vbiByZWYgZm9yd2FyZGluZyBjbGFzcyBjb21wb25lbnRzXG5cbiAgdmFyIGhhbmRsZU93blJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgcm9vdFJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICB9LCBbXSk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgaGFuZGxlT3duUmVmKTtcbiAgdmFyIHByZXZPcGVuUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcHJldk9wZW5SZWYuY3VycmVudCA9IG9wZW47XG4gIH0sIFtvcGVuXSk7XG5cbiAgaWYgKCFwcmV2T3BlblJlZi5jdXJyZW50ICYmIG9wZW4gJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBXQVJOSU5HOiBQb3RlbnRpYWxseSB1bnNhZmUgaW4gY29uY3VycmVudCBtb2RlLlxuICAgIC8vIFRoZSB3YXkgdGhlIHJlYWQgb24gYG5vZGVUb1Jlc3RvcmVgIGlzIHNldHVwIGNvdWxkIG1ha2UgdGhpcyBhY3R1YWxseSBzYWZlLlxuICAgIC8vIFNheSB3ZSByZW5kZXIgYG9wZW49e2ZhbHNlfWAgLT4gYG9wZW49e3RydWV9YCBidXQgbmV2ZXIgY29tbWl0LlxuICAgIC8vIFdlIGhhdmUgbm93IHdyaXR0ZW4gYSBzdGF0ZSB0aGF0IHdhc24ndCBjb21taXR0ZWQuIEJ1dCBubyBjb21taXR0ZWQgZWZmZWN0XG4gICAgLy8gd2lsbCByZWFkIHRoaXMgd3JvbmcgdmFsdWUuIFdlIG9ubHkgcmVhZCBmcm9tIGBub2RlVG9SZXN0b3JlYCBpbiBlZmZlY3RzXG4gICAgLy8gdGhhdCB3ZXJlIGNvbW1pdHRlZCBvbiBgb3Blbj17dHJ1ZX1gXG4gICAgLy8gV0FSTklORzogUHJldmVudHMgdGhlIGluc3RhbmNlIGZyb20gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWQuIFNob3VsZCBvbmx5XG4gICAgLy8gaG9sZCBhIHdlYWsgcmVmLlxuICAgIG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9IGdldERvYygpLmFjdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkb2MgPSBvd25lckRvY3VtZW50KHJvb3RSZWYuY3VycmVudCk7IC8vIFdlIG1pZ2h0IHJlbmRlciBhbiBlbXB0eSBjaGlsZC5cblxuICAgIGlmICghZGlzYWJsZUF1dG9Gb2N1cyAmJiByb290UmVmLmN1cnJlbnQgJiYgIXJvb3RSZWYuY3VycmVudC5jb250YWlucyhkb2MuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIGlmICghcm9vdFJlZi5jdXJyZW50Lmhhc0F0dHJpYnV0ZSgndGFiSW5kZXgnKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIG1vZGFsIGNvbnRlbnQgbm9kZSBkb2VzIG5vdCBhY2NlcHQgZm9jdXMuJywgJ0ZvciB0aGUgYmVuZWZpdCBvZiBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCAnICsgJ3RoZSB0YWJJbmRleCBvZiB0aGUgbm9kZSBpcyBiZWluZyBzZXQgdG8gXCItMVwiLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgLTEpO1xuICAgICAgfVxuXG4gICAgICByb290UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG5cbiAgICB2YXIgY29udGFpbiA9IGZ1bmN0aW9uIGNvbnRhaW4oKSB7XG4gICAgICBpZiAoIWRvYy5oYXNGb2N1cygpIHx8IGRpc2FibGVFbmZvcmNlRm9jdXMgfHwgIWlzRW5hYmxlZCgpIHx8IGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCkge1xuICAgICAgICBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocm9vdFJlZi5jdXJyZW50ICYmICFyb290UmVmLmN1cnJlbnQuY29udGFpbnMoZG9jLmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbG9vcEZvY3VzID0gZnVuY3Rpb24gbG9vcEZvY3VzKGV2ZW50KSB7XG4gICAgICAvLyA5ID0gVGFiXG4gICAgICBpZiAoZGlzYWJsZUVuZm9yY2VGb2N1cyB8fCAhaXNFbmFibGVkKCkgfHwgZXZlbnQua2V5Q29kZSAhPT0gOSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIE1ha2Ugc3VyZSB0aGUgbmV4dCB0YWIgc3RhcnRzIGZyb20gdGhlIHJpZ2h0IHBsYWNlLlxuXG5cbiAgICAgIGlmIChkb2MuYWN0aXZlRWxlbWVudCA9PT0gcm9vdFJlZi5jdXJyZW50KSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gaWdub3JlIHRoZSBuZXh0IGNvbnRhaW4gYXNcbiAgICAgICAgLy8gaXQgd2lsbCB0cnkgdG8gbW92ZSB0aGUgZm9jdXMgYmFjayB0byB0aGUgcm9vdFJlZiBlbGVtZW50LlxuICAgICAgICBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgIHNlbnRpbmVsRW5kLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZW50aW5lbFN0YXJ0LmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBjb250YWluLCB0cnVlKTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGxvb3BGb2N1cywgdHJ1ZSk7IC8vIFdpdGggRWRnZSwgU2FmYXJpIGFuZCBGaXJlZm94LCBubyBmb2N1cyByZWxhdGVkIGV2ZW50cyBhcmUgZmlyZWQgd2hlbiB0aGUgZm9jdXNlZCBhcmVhIHN0b3BzIGJlaW5nIGEgZm9jdXNlZCBhcmVhXG4gICAgLy8gZS5nLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NTk1NjEuXG4gICAgLy9cbiAgICAvLyBUaGUgd2hhdHdnIHNwZWMgZGVmaW5lcyBob3cgdGhlIGJyb3dzZXIgc2hvdWxkIGJlaGF2ZSBidXQgZG9lcyBub3QgZXhwbGljaXRseSBtZW50aW9uIGFueSBldmVudHM6XG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW50ZXJhY3Rpb24uaHRtbCNmb2N1cy1maXh1cC1ydWxlLlxuXG4gICAgdmFyIGludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgY29udGFpbigpO1xuICAgIH0sIDUwKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBjb250YWluLCB0cnVlKTtcbiAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgbG9vcEZvY3VzLCB0cnVlKTsgLy8gcmVzdG9yZUxhc3RGb2N1cygpXG5cbiAgICAgIGlmICghZGlzYWJsZVJlc3RvcmVGb2N1cykge1xuICAgICAgICAvLyBJbiBJRSAxMSBpdCBpcyBwb3NzaWJsZSBmb3IgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCB0byBiZSBudWxsIHJlc3VsdGluZ1xuICAgICAgICAvLyBpbiBub2RlVG9SZXN0b3JlLmN1cnJlbnQgYmVpbmcgbnVsbC5cbiAgICAgICAgLy8gTm90IGFsbCBlbGVtZW50cyBpbiBJRSAxMSBoYXZlIGEgZm9jdXMgbWV0aG9kLlxuICAgICAgICAvLyBPbmNlIElFIDExIHN1cHBvcnQgaXMgZHJvcHBlZCB0aGUgZm9jdXMoKSBjYWxsIGNhbiBiZSB1bmNvbmRpdGlvbmFsLlxuICAgICAgICBpZiAobm9kZVRvUmVzdG9yZS5jdXJyZW50ICYmIG5vZGVUb1Jlc3RvcmUuY3VycmVudC5mb2N1cykge1xuICAgICAgICAgIG5vZGVUb1Jlc3RvcmUuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbZGlzYWJsZUF1dG9Gb2N1cywgZGlzYWJsZUVuZm9yY2VGb2N1cywgZGlzYWJsZVJlc3RvcmVGb2N1cywgaXNFbmFibGVkLCBvcGVuXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHRhYkluZGV4OiAwLFxuICAgIHJlZjogc2VudGluZWxTdGFydCxcbiAgICBcImRhdGEtdGVzdFwiOiBcInNlbnRpbmVsU3RhcnRcIlxuICB9KSwgUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgcmVmOiBoYW5kbGVSZWZcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICB0YWJJbmRleDogMCxcbiAgICByZWY6IHNlbnRpbmVsRW5kLFxuICAgIFwiZGF0YS10ZXN0XCI6IFwic2VudGluZWxFbmRcIlxuICB9KSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRyYXBGb2N1cy5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IG1vZGFsIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgbW9kYWwgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIG1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW4uXG4gICAqL1xuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBkb2N1bWVudCB0byBjb25zaWRlci5cbiAgICogV2UgdXNlIGl0IHRvIGltcGxlbWVudCB0aGUgcmVzdG9yZSBmb2N1cyBiZXR3ZWVuIGRpZmZlcmVudCBicm93c2VyIGRvY3VtZW50cy5cbiAgICovXG4gIGdldERvYzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogRG8gd2Ugc3RpbGwgd2FudCB0byBlbmZvcmNlIHRoZSBmb2N1cz9cbiAgICogVGhpcyBwcm9wIGhlbHBzIG5lc3RpbmcgVHJhcEZvY3VzIGVsZW1lbnRzLlxuICAgKi9cbiAgaXNFbmFibGVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbi8qXG5cbkluIHRoZSBmdXR1cmUsIHdlIHNob3VsZCBiZSBhYmxlIHRvIHJlcGxhY2UgVHJhcEZvY3VzIHdpdGg6XG5odHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9tYXN0ZXIvcGFja2FnZXMvcmVhY3QtZXZlbnRzL2RvY3MvRm9jdXNTY29wZS5tZFxuXG5gYGBqc3hcbmltcG9ydCBGb2N1c1Njb3BlIGZyb20gJ3JlYWN0LWRvbS9Gb2N1c1Njb3BlJztcblxuZnVuY3Rpb24gVHJhcEZvY3VzKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlblxuICAgIGRpc2FibGVBdXRvRm9jdXMgPSBmYWxzZSxcbiAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IGZhbHNlLFxuICAgIG9wZW4sXG4gIH0gPSBwcm9wcztcblxuICBpZiAoIW9wZW4pIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxGb2N1c1Njb3BlXG4gICAgICBhdXRvRm9jdXM9eyFkaXNhYmxlQXV0b0ZvY3VzfVxuICAgICAgY29udGFpbj17IWRpc2FibGVFbmZvcmNlRm9jdXN9XG4gICAgICByZXN0b3JlRm9jdXM9eyFkaXNhYmxlUmVzdG9yZUZvY3VzfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0ZvY3VzU2NvcGU+XG4gICk7XG59XG5gYGBcblxuKi9cblxuZXhwb3J0IGRlZmF1bHQgVHJhcEZvY3VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIHpJbmRleDogLTEsXG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC41KScsXG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCdcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBpbnZpc2libGU9e3RydWV9YC4gKi9cbiAgaW52aXNpYmxlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gIH1cbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIFNpbXBsZUJhY2tkcm9wID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTaW1wbGVCYWNrZHJvcChwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkaW52aXNpYmxlID0gcHJvcHMuaW52aXNpYmxlLFxuICAgICAgaW52aXNpYmxlID0gX3Byb3BzJGludmlzaWJsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaW52aXNpYmxlLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW4sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiaW52aXNpYmxlXCIsIFwib3BlblwiXSk7XG5cbiAgcmV0dXJuIG9wZW4gPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgc3R5bGU6IF9leHRlbmRzKF9leHRlbmRzKF9leHRlbmRzKHt9LCBzdHlsZXMucm9vdCksIGludmlzaWJsZSA/IHN0eWxlcy5pbnZpc2libGUgOiB7fSksIG90aGVyLnN0eWxlKVxuICB9KSkgOiBudWxsO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTaW1wbGVCYWNrZHJvcC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBpbnZpc2libGUuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIGEgcG9wb3ZlciBvciBhIGN1c3RvbSBzZWxlY3QgY29tcG9uZW50LlxuICAgKi9cbiAgaW52aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTaW1wbGVCYWNrZHJvcDsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGdldFRoZW1lUHJvcHMsIHVzZVRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgUG9ydGFsIGZyb20gJy4uL1BvcnRhbCc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4uL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHpJbmRleCBmcm9tICcuLi9zdHlsZXMvekluZGV4JztcbmltcG9ydCBNb2RhbE1hbmFnZXIsIHsgYXJpYUhpZGRlbiB9IGZyb20gJy4vTW9kYWxNYW5hZ2VyJztcbmltcG9ydCBUcmFwRm9jdXMgZnJvbSAnLi9UcmFwRm9jdXMnO1xuaW1wb3J0IFNpbXBsZUJhY2tkcm9wIGZyb20gJy4vU2ltcGxlQmFja2Ryb3AnO1xuXG5mdW5jdGlvbiBnZXRDb250YWluZXIoY29udGFpbmVyKSB7XG4gIGNvbnRhaW5lciA9IHR5cGVvZiBjb250YWluZXIgPT09ICdmdW5jdGlvbicgPyBjb250YWluZXIoKSA6IGNvbnRhaW5lcjtcbiAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKGNvbnRhaW5lcik7XG59XG5cbmZ1bmN0aW9uIGdldEhhc1RyYW5zaXRpb24ocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzLmNoaWxkcmVuID8gcHJvcHMuY2hpbGRyZW4ucHJvcHMuaGFzT3duUHJvcGVydHkoJ2luJykgOiBmYWxzZTtcbn0gLy8gQSBtb2RhbCBtYW5hZ2VyIHVzZWQgdG8gdHJhY2sgYW5kIG1hbmFnZSB0aGUgc3RhdGUgb2Ygb3BlbiBNb2RhbHMuXG4vLyBNb2RhbHMgZG9uJ3Qgb3BlbiBvbiB0aGUgc2VydmVyIHNvIHRoaXMgd29uJ3QgY29uZmxpY3Qgd2l0aCBjb25jdXJyZW50IHJlcXVlc3RzLlxuXG5cbnZhciBkZWZhdWx0TWFuYWdlciA9IG5ldyBNb2RhbE1hbmFnZXIoKTtcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHpJbmRleDogdGhlbWUuekluZGV4Lm1vZGFsLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGBNb2RhbGAgaGFzIGV4aXRlZC4gKi9cbiAgICBoaWRkZW46IHtcbiAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogTW9kYWwgaXMgYSBsb3dlci1sZXZlbCBjb25zdHJ1Y3QgdGhhdCBpcyBsZXZlcmFnZWQgYnkgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqIC0gW0RpYWxvZ10oL2FwaS9kaWFsb2cvKVxuICogLSBbRHJhd2VyXSgvYXBpL2RyYXdlci8pXG4gKiAtIFtNZW51XSgvYXBpL21lbnUvKVxuICogLSBbUG9wb3Zlcl0oL2FwaS9wb3BvdmVyLylcbiAqXG4gKiBJZiB5b3UgYXJlIGNyZWF0aW5nIGEgbW9kYWwgZGlhbG9nLCB5b3UgcHJvYmFibHkgd2FudCB0byB1c2UgdGhlIFtEaWFsb2ddKC9hcGkvZGlhbG9nLykgY29tcG9uZW50XG4gKiByYXRoZXIgdGhhbiBkaXJlY3RseSB1c2luZyBNb2RhbC5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBzaGFyZXMgbWFueSBjb25jZXB0cyB3aXRoIFtyZWFjdC1vdmVybGF5c10oaHR0cHM6Ly9yZWFjdC1ib290c3RyYXAuZ2l0aHViLmlvL3JlYWN0LW92ZXJsYXlzLyNtb2RhbHMpLlxuICovXG5cbnZhciBNb2RhbCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTW9kYWwoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIHZhciBwcm9wcyA9IGdldFRoZW1lUHJvcHMoe1xuICAgIG5hbWU6ICdNdWlNb2RhbCcsXG4gICAgcHJvcHM6IF9leHRlbmRzKHt9LCBpblByb3BzKSxcbiAgICB0aGVtZTogdGhlbWVcbiAgfSk7XG5cbiAgdmFyIF9wcm9wcyRCYWNrZHJvcENvbXBvbiA9IHByb3BzLkJhY2tkcm9wQ29tcG9uZW50LFxuICAgICAgQmFja2Ryb3BDb21wb25lbnQgPSBfcHJvcHMkQmFja2Ryb3BDb21wb24gPT09IHZvaWQgMCA/IFNpbXBsZUJhY2tkcm9wIDogX3Byb3BzJEJhY2tkcm9wQ29tcG9uLFxuICAgICAgQmFja2Ryb3BQcm9wcyA9IHByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgX3Byb3BzJGNsb3NlQWZ0ZXJUcmFuID0gcHJvcHMuY2xvc2VBZnRlclRyYW5zaXRpb24sXG4gICAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbiA9IF9wcm9wcyRjbG9zZUFmdGVyVHJhbiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkY2xvc2VBZnRlclRyYW4sXG4gICAgICBjb250YWluZXIgPSBwcm9wcy5jb250YWluZXIsXG4gICAgICBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MgPSBwcm9wcy5kaXNhYmxlQXV0b0ZvY3VzLFxuICAgICAgZGlzYWJsZUF1dG9Gb2N1cyA9IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MsXG4gICAgICBfcHJvcHMkZGlzYWJsZUJhY2tkcm8gPSBwcm9wcy5kaXNhYmxlQmFja2Ryb3BDbGljayxcbiAgICAgIGRpc2FibGVCYWNrZHJvcENsaWNrID0gX3Byb3BzJGRpc2FibGVCYWNrZHJvID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlQmFja2RybyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRW5mb3JjZSA9IHByb3BzLmRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gX3Byb3BzJGRpc2FibGVFbmZvcmNlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRW5mb3JjZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRXNjYXBlSyA9IHByb3BzLmRpc2FibGVFc2NhcGVLZXlEb3duLFxuICAgICAgZGlzYWJsZUVzY2FwZUtleURvd24gPSBfcHJvcHMkZGlzYWJsZUVzY2FwZUsgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVFc2NhcGVLLFxuICAgICAgX3Byb3BzJGRpc2FibGVQb3J0YWwgPSBwcm9wcy5kaXNhYmxlUG9ydGFsLFxuICAgICAgZGlzYWJsZVBvcnRhbCA9IF9wcm9wcyRkaXNhYmxlUG9ydGFsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUG9ydGFsLFxuICAgICAgX3Byb3BzJGRpc2FibGVSZXN0b3JlID0gcHJvcHMuZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICAgIGRpc2FibGVSZXN0b3JlRm9jdXMgPSBfcHJvcHMkZGlzYWJsZVJlc3RvcmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVSZXN0b3JlLFxuICAgICAgX3Byb3BzJGRpc2FibGVTY3JvbGxMID0gcHJvcHMuZGlzYWJsZVNjcm9sbExvY2ssXG4gICAgICBkaXNhYmxlU2Nyb2xsTG9jayA9IF9wcm9wcyRkaXNhYmxlU2Nyb2xsTCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVNjcm9sbEwsXG4gICAgICBfcHJvcHMkaGlkZUJhY2tkcm9wID0gcHJvcHMuaGlkZUJhY2tkcm9wLFxuICAgICAgaGlkZUJhY2tkcm9wID0gX3Byb3BzJGhpZGVCYWNrZHJvcCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaGlkZUJhY2tkcm9wLFxuICAgICAgX3Byb3BzJGtlZXBNb3VudGVkID0gcHJvcHMua2VlcE1vdW50ZWQsXG4gICAgICBrZWVwTW91bnRlZCA9IF9wcm9wcyRrZWVwTW91bnRlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMka2VlcE1vdW50ZWQsXG4gICAgICBfcHJvcHMkbWFuYWdlciA9IHByb3BzLm1hbmFnZXIsXG4gICAgICBtYW5hZ2VyID0gX3Byb3BzJG1hbmFnZXIgPT09IHZvaWQgMCA/IGRlZmF1bHRNYW5hZ2VyIDogX3Byb3BzJG1hbmFnZXIsXG4gICAgICBvbkJhY2tkcm9wQ2xpY2sgPSBwcm9wcy5vbkJhY2tkcm9wQ2xpY2ssXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIG9uRXNjYXBlS2V5RG93biA9IHByb3BzLm9uRXNjYXBlS2V5RG93bixcbiAgICAgIG9uUmVuZGVyZWQgPSBwcm9wcy5vblJlbmRlcmVkLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW4sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiQmFja2Ryb3BDb21wb25lbnRcIiwgXCJCYWNrZHJvcFByb3BzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbG9zZUFmdGVyVHJhbnNpdGlvblwiLCBcImNvbnRhaW5lclwiLCBcImRpc2FibGVBdXRvRm9jdXNcIiwgXCJkaXNhYmxlQmFja2Ryb3BDbGlja1wiLCBcImRpc2FibGVFbmZvcmNlRm9jdXNcIiwgXCJkaXNhYmxlRXNjYXBlS2V5RG93blwiLCBcImRpc2FibGVQb3J0YWxcIiwgXCJkaXNhYmxlUmVzdG9yZUZvY3VzXCIsIFwiZGlzYWJsZVNjcm9sbExvY2tcIiwgXCJoaWRlQmFja2Ryb3BcIiwgXCJrZWVwTW91bnRlZFwiLCBcIm1hbmFnZXJcIiwgXCJvbkJhY2tkcm9wQ2xpY2tcIiwgXCJvbkNsb3NlXCIsIFwib25Fc2NhcGVLZXlEb3duXCIsIFwib25SZW5kZXJlZFwiLCBcIm9wZW5cIl0pO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh0cnVlKSxcbiAgICAgIGV4aXRlZCA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldEV4aXRlZCA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgbW9kYWwgPSBSZWFjdC51c2VSZWYoe30pO1xuICB2YXIgbW91bnROb2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgbW9kYWxSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKG1vZGFsUmVmLCByZWYpO1xuICB2YXIgaGFzVHJhbnNpdGlvbiA9IGdldEhhc1RyYW5zaXRpb24ocHJvcHMpO1xuXG4gIHZhciBnZXREb2MgPSBmdW5jdGlvbiBnZXREb2MoKSB7XG4gICAgcmV0dXJuIG93bmVyRG9jdW1lbnQobW91bnROb2RlUmVmLmN1cnJlbnQpO1xuICB9O1xuXG4gIHZhciBnZXRNb2RhbCA9IGZ1bmN0aW9uIGdldE1vZGFsKCkge1xuICAgIG1vZGFsLmN1cnJlbnQubW9kYWxSZWYgPSBtb2RhbFJlZi5jdXJyZW50O1xuICAgIG1vZGFsLmN1cnJlbnQubW91bnROb2RlID0gbW91bnROb2RlUmVmLmN1cnJlbnQ7XG4gICAgcmV0dXJuIG1vZGFsLmN1cnJlbnQ7XG4gIH07XG5cbiAgdmFyIGhhbmRsZU1vdW50ZWQgPSBmdW5jdGlvbiBoYW5kbGVNb3VudGVkKCkge1xuICAgIG1hbmFnZXIubW91bnQoZ2V0TW9kYWwoKSwge1xuICAgICAgZGlzYWJsZVNjcm9sbExvY2s6IGRpc2FibGVTY3JvbGxMb2NrXG4gICAgfSk7IC8vIEZpeCBhIGJ1ZyBvbiBDaHJvbWUgd2hlcmUgdGhlIHNjcm9sbCBpc24ndCBpbml0aWFsbHkgMC5cblxuICAgIG1vZGFsUmVmLmN1cnJlbnQuc2Nyb2xsVG9wID0gMDtcbiAgfTtcblxuICB2YXIgaGFuZGxlT3BlbiA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXNvbHZlZENvbnRhaW5lciA9IGdldENvbnRhaW5lcihjb250YWluZXIpIHx8IGdldERvYygpLmJvZHk7XG4gICAgbWFuYWdlci5hZGQoZ2V0TW9kYWwoKSwgcmVzb2x2ZWRDb250YWluZXIpOyAvLyBUaGUgZWxlbWVudCB3YXMgYWxyZWFkeSBtb3VudGVkLlxuXG4gICAgaWYgKG1vZGFsUmVmLmN1cnJlbnQpIHtcbiAgICAgIGhhbmRsZU1vdW50ZWQoKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaXNUb3BNb2RhbCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbWFuYWdlci5pc1RvcE1vZGFsKGdldE1vZGFsKCkpO1xuICB9LCBbbWFuYWdlcl0pO1xuICB2YXIgaGFuZGxlUG9ydGFsUmVmID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgIG1vdW50Tm9kZVJlZi5jdXJyZW50ID0gbm9kZTtcblxuICAgIGlmICghbm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvblJlbmRlcmVkKSB7XG4gICAgICBvblJlbmRlcmVkKCk7XG4gICAgfVxuXG4gICAgaWYgKG9wZW4gJiYgaXNUb3BNb2RhbCgpKSB7XG4gICAgICBoYW5kbGVNb3VudGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyaWFIaWRkZW4obW9kYWxSZWYuY3VycmVudCwgdHJ1ZSk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUNsb3NlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIG1hbmFnZXIucmVtb3ZlKGdldE1vZGFsKCkpO1xuICB9LCBbbWFuYWdlcl0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH07XG4gIH0sIFtoYW5kbGVDbG9zZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBoYW5kbGVPcGVuKCk7XG4gICAgfSBlbHNlIGlmICghaGFzVHJhbnNpdGlvbiB8fCAhY2xvc2VBZnRlclRyYW5zaXRpb24pIHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfVxuICB9LCBbb3BlbiwgaGFuZGxlQ2xvc2UsIGhhc1RyYW5zaXRpb24sIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uLCBoYW5kbGVPcGVuXSk7XG5cbiAgaWYgKCFrZWVwTW91bnRlZCAmJiAhb3BlbiAmJiAoIWhhc1RyYW5zaXRpb24gfHwgZXhpdGVkKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlRW50ZXIoKSB7XG4gICAgc2V0RXhpdGVkKGZhbHNlKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlRXhpdGVkKCkge1xuICAgIHNldEV4aXRlZCh0cnVlKTtcblxuICAgIGlmIChjbG9zZUFmdGVyVHJhbnNpdGlvbikge1xuICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUJhY2tkcm9wQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVCYWNrZHJvcENsaWNrKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkJhY2tkcm9wQ2xpY2spIHtcbiAgICAgIG9uQmFja2Ryb3BDbGljayhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKCFkaXNhYmxlQmFja2Ryb3BDbGljayAmJiBvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50LCAnYmFja2Ryb3BDbGljaycpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICAvLyBUaGUgaGFuZGxlciBkb2Vzbid0IHRha2UgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCBpbnRvIGFjY291bnQ6XG4gICAgLy9cbiAgICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpIGlzIG1lYW50IHRvIHN0b3AgZGVmYXVsdCBiZWhhdmlvdXJzIGxpa2VcbiAgICAvLyBjbGlja2luZyBhIGNoZWNrYm94IHRvIGNoZWNrIGl0LCBoaXR0aW5nIGEgYnV0dG9uIHRvIHN1Ym1pdCBhIGZvcm0sXG4gICAgLy8gYW5kIGhpdHRpbmcgbGVmdCBhcnJvdyB0byBtb3ZlIHRoZSBjdXJzb3IgaW4gYSB0ZXh0IGlucHV0IGV0Yy5cbiAgICAvLyBPbmx5IHNwZWNpYWwgSFRNTCBlbGVtZW50cyBoYXZlIHRoZXNlIGRlZmF1bHQgYmVoYXZpb3JzLlxuICAgIGlmIChldmVudC5rZXkgIT09ICdFc2NhcGUnIHx8ICFpc1RvcE1vZGFsKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25Fc2NhcGVLZXlEb3duKSB7XG4gICAgICBvbkVzY2FwZUtleURvd24oZXZlbnQpO1xuICAgIH1cblxuICAgIGlmICghZGlzYWJsZUVzY2FwZUtleURvd24pIHtcbiAgICAgIC8vIFN3YWxsb3cgdGhlIGV2ZW50LCBpbiBjYXNlIHNvbWVvbmUgaXMgbGlzdGVuaW5nIGZvciB0aGUgZXNjYXBlIGtleSBvbiB0aGUgYm9keS5cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBpZiAob25DbG9zZSkge1xuICAgICAgICBvbkNsb3NlKGV2ZW50LCAnZXNjYXBlS2V5RG93bicpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgaW5saW5lU3R5bGUgPSBzdHlsZXModGhlbWUgfHwge1xuICAgIHpJbmRleDogekluZGV4XG4gIH0pO1xuICB2YXIgY2hpbGRQcm9wcyA9IHt9O1xuXG4gIGlmIChjaGlsZHJlbi5wcm9wcy50YWJJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2hpbGRQcm9wcy50YWJJbmRleCA9IGNoaWxkcmVuLnByb3BzLnRhYkluZGV4IHx8ICctMSc7XG4gIH0gLy8gSXQncyBhIFRyYW5zaXRpb24gbGlrZSBjb21wb25lbnRcblxuXG4gIGlmIChoYXNUcmFuc2l0aW9uKSB7XG4gICAgY2hpbGRQcm9wcy5vbkVudGVyID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUVudGVyLCBjaGlsZHJlbi5wcm9wcy5vbkVudGVyKTtcbiAgICBjaGlsZFByb3BzLm9uRXhpdGVkID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUV4aXRlZCwgY2hpbGRyZW4ucHJvcHMub25FeGl0ZWQpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBvcnRhbCwge1xuICAgIHJlZjogaGFuZGxlUG9ydGFsUmVmLFxuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIGRpc2FibGVQb3J0YWw6IGRpc2FibGVQb3J0YWxcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICByb2xlOiBcInByZXNlbnRhdGlvblwiXG4gIH0sIG90aGVyLCB7XG4gICAgc3R5bGU6IF9leHRlbmRzKF9leHRlbmRzKF9leHRlbmRzKHt9LCBpbmxpbmVTdHlsZS5yb290KSwgIW9wZW4gJiYgZXhpdGVkID8gaW5saW5lU3R5bGUuaGlkZGVuIDoge30pLCBvdGhlci5zdHlsZSlcbiAgfSksIGhpZGVCYWNrZHJvcCA/IG51bGwgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChCYWNrZHJvcENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIG9wZW46IG9wZW4sXG4gICAgb25DbGljazogaGFuZGxlQmFja2Ryb3BDbGlja1xuICB9LCBCYWNrZHJvcFByb3BzKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYXBGb2N1cywge1xuICAgIGRpc2FibGVFbmZvcmNlRm9jdXM6IGRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgZGlzYWJsZUF1dG9Gb2N1czogZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBkaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgIGdldERvYzogZ2V0RG9jLFxuICAgIGlzRW5hYmxlZDogaXNUb3BNb2RhbCxcbiAgICBvcGVuOiBvcGVuXG4gIH0sIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgY2hpbGRQcm9wcykpKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1vZGFsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgYmFja2Ryb3AgY29tcG9uZW50LiBUaGlzIHByb3AgZW5hYmxlcyBjdXN0b20gYmFja2Ryb3AgcmVuZGVyaW5nLlxuICAgKi9cbiAgQmFja2Ryb3BDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BCYWNrZHJvcGBdKC9hcGkvYmFja2Ryb3AvKSBlbGVtZW50LlxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogV2hlbiBzZXQgdG8gdHJ1ZSB0aGUgTW9kYWwgd2FpdHMgdW50aWwgYSBuZXN0ZWQgVHJhbnNpdGlvbiBpcyBjb21wbGV0ZWQgYmVmb3JlIGNsb3NpbmcuXG4gICAqL1xuICBjbG9zZUFmdGVyVHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgSFRNTCBlbGVtZW50LCBjb21wb25lbnQgaW5zdGFuY2UsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmluc3RhbmNlT2YoUmVhY3QuQ29tcG9uZW50KSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IG1vZGFsIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNsaWNraW5nIHRoZSBiYWNrZHJvcCB3aWxsIG5vdCBmaXJlIGBvbkNsb3NlYC5cbiAgICovXG4gIGRpc2FibGVCYWNrZHJvcENsaWNrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgcHJldmVudCBmb2N1cyBmcm9tIGxlYXZpbmcgdGhlIG1vZGFsIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGRpc2FibGVFbmZvcmNlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGhpdHRpbmcgZXNjYXBlIHdpbGwgbm90IGZpcmUgYG9uQ2xvc2VgLlxuICAgKi9cbiAgZGlzYWJsZUVzY2FwZUtleURvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBwb3J0YWwgYmVoYXZpb3IuXG4gICAqIFRoZSBjaGlsZHJlbiBzdGF5IHdpdGhpbiBpdCdzIHBhcmVudCBET00gaGllcmFyY2h5LlxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW4uXG4gICAqL1xuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgc2Nyb2xsIGxvY2sgYmVoYXZpb3IuXG4gICAqL1xuICBkaXNhYmxlU2Nyb2xsTG9jazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG5vdCByZW5kZXJlZC5cbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFsd2F5cyBrZWVwIHRoZSBjaGlsZHJlbiBpbiB0aGUgRE9NLlxuICAgKiBUaGlzIHByb3AgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yXG4gICAqIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBNb2RhbC5cbiAgICovXG4gIGtlZXBNb3VudGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLFxuICAgKiBgZGlzYWJsZUVzY2FwZUtleURvd25gIGlzIGZhbHNlIGFuZCB0aGUgbW9kYWwgaXMgaW4gZm9jdXMuXG4gICAqL1xuICBvbkVzY2FwZUtleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBvbmNlIHRoZSBjaGlsZHJlbiBoYXMgYmVlbiBtb3VudGVkIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKiBJdCBzaWduYWxzIHRoYXQgdGhlIGBvcGVuPXt0cnVlfWAgcHJvcCB0b29rIGVmZmVjdC5cbiAgICpcbiAgICogVGhpcyBwcm9wIHdpbGwgYmUgZGVwcmVjYXRlZCBhbmQgcmVtb3ZlZCBpbiB2NSwgdGhlIHJlZiBjYW4gYmUgdXNlZCBpbnN0ZWFkLlxuICAgKi9cbiAgb25SZW5kZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTW9kYWw7IiwiZXhwb3J0IGRlZmF1bHQge1xuICBkaXNhYmxlZDogZmFsc2Vcbn07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuZXhwb3J0IHZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydCB2YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnQgdmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydCB2YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydCB2YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZXhpdGluZzogIHsgb3BhY2l0eTogMCB9LFxuICogICBleGl0ZWQ6ICB7IG9wYWNpdHk6IDAgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbnZhciBUcmFuc2l0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0OyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG4gIDtcblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG5cbiAgICB2YXIgX3JlZjIgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbYXBwZWFyaW5nXSA6IFtSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgYXBwZWFyaW5nXSxcbiAgICAgICAgbWF5YmVOb2RlID0gX3JlZjJbMF0sXG4gICAgICAgIG1heWJlQXBwZWFyaW5nID0gX3JlZjJbMV07XG5cbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyIHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkVudGVyKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBtYXliZU5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB1bmRlZmluZWQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTsgLy8gbm8gZXhpdCBhbmltYXRpb24gc2tpcCByaWdodCB0byBFWElURURcblxuICAgIGlmICghZXhpdCB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChtYXliZU5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobWF5YmVOb2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobWF5YmVOb2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgbm9kZSA9IHRoaXMucHJvcHMubm9kZVJlZiA/IHRoaXMucHJvcHMubm9kZVJlZi5jdXJyZW50IDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHZhciBfcmVmMyA9IHRoaXMucHJvcHMubm9kZVJlZiA/IFt0aGlzLm5leHRDYWxsYmFja10gOiBbbm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2tdLFxuICAgICAgICAgIG1heWJlTm9kZSA9IF9yZWYzWzBdLFxuICAgICAgICAgIG1heWJlTmV4dENhbGxiYWNrID0gX3JlZjNbMV07XG5cbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobWF5YmVOb2RlLCBtYXliZU5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfaW4gPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgX21vdW50T25FbnRlciA9IF90aGlzJHByb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgX3VubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBfYXBwZWFyID0gX3RoaXMkcHJvcHMuYXBwZWFyLFxuICAgICAgICBfZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgX2V4aXQgPSBfdGhpcyRwcm9wcy5leGl0LFxuICAgICAgICBfdGltZW91dCA9IF90aGlzJHByb3BzLnRpbWVvdXQsXG4gICAgICAgIF9hZGRFbmRMaXN0ZW5lciA9IF90aGlzJHByb3BzLmFkZEVuZExpc3RlbmVyLFxuICAgICAgICBfb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIF9vbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgX29uRW50ZXJlZCA9IF90aGlzJHByb3BzLm9uRW50ZXJlZCxcbiAgICAgICAgX29uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgX29uRXhpdGluZyA9IF90aGlzJHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgX29uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIF9ub2RlUmVmID0gX3RoaXMkcHJvcHMubm9kZVJlZixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwibW91bnRPbkVudGVyXCIsIFwidW5tb3VudE9uRXhpdFwiLCBcImFwcGVhclwiLCBcImVudGVyXCIsIFwiZXhpdFwiLCBcInRpbWVvdXRcIiwgXCJhZGRFbmRMaXN0ZW5lclwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJub2RlUmVmXCJdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpIDogUmVhY3QuY2xvbmVFbGVtZW50KFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pLCBjaGlsZFByb3BzKSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlID0gVHJhbnNpdGlvbkdyb3VwQ29udGV4dDtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBSZWFjdCByZWZlcmVuY2UgdG8gRE9NIGVsZW1lbnQgdGhhdCBuZWVkIHRvIHRyYW5zaXRpb246XG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MTEyNzEzMC80NjcxOTMyXG4gICAqXG4gICAqICAgLSBXaGVuIGBub2RlUmVmYCBwcm9wIGlzIHVzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkIHRvIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICAgKiAgICAgIChlLmcuIGBvbkVudGVyYCkgYmVjYXVzZSB1c2VyIGFscmVhZHkgaGFzIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5vZGUuXG4gICAqICAgLSBXaGVuIGNoYW5naW5nIGBrZXlgIHByb3Agb2YgYFRyYW5zaXRpb25gIGluIGEgYFRyYW5zaXRpb25Hcm91cGAgYSBuZXdcbiAgICogICAgIGBub2RlUmVmYCBuZWVkIHRvIGJlIHByb3ZpZGVkIHRvIGBUcmFuc2l0aW9uYCB3aXRoIGNoYW5nZWQgYGtleWAgcHJvcFxuICAgKiAgICAgKHNlZVxuICAgKiAgICAgW3Rlc3QvQ1NTVHJhbnNpdGlvbi10ZXN0LmpzXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Jsb2IvMTM0MzVmODk3YjNhYjcxZjZlMTlkNzI0ZjE0NTU5NmY1OTEwNTgxYy90ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qcyNMMzYyLUw0MzcpKS5cbiAgICovXG4gIG5vZGVSZWY6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogdHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gUHJvcFR5cGVzLmFueSA6IFByb3BUeXBlcy5pbnN0YW5jZU9mKEVsZW1lbnQpXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGRvZXMgbm90IHBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlblxuICAgKiBpdCBmaXJzdCBtb3VudHMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIGBpbmAuIElmIHlvdSB3YW50IHRoaXNcbiAgICogYmVoYXZpb3IsIHNldCBib3RoIGBhcHBlYXJgIGFuZCBgaW5gIHRvIGB0cnVlYC5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogdGhlcmUgYXJlIG5vIHNwZWNpYWwgYXBwZWFyIHN0YXRlcyBsaWtlIGBhcHBlYXJpbmdgL2BhcHBlYXJlZGAsIHRoaXMgcHJvcFxuICAgKiA+IG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGVudGVyIHRyYW5zaXRpb24uIEhvd2V2ZXIsIGluIHRoZVxuICAgKiA+IGA8Q1NTVHJhbnNpdGlvbj5gIGNvbXBvbmVudCB0aGF0IGZpcnN0IGVudGVyIHRyYW5zaXRpb24gZG9lcyByZXN1bHQgaW5cbiAgICogPiBhZGRpdGlvbmFsIGAuYXBwZWFyLSpgIGNsYXNzZXMsIHRoYXQgd2F5IHlvdSBjYW4gY2hvb3NlIHRvIHN0eWxlIGl0XG4gICAqID4gZGlmZmVyZW50bHkuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSB0aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59IDoge307IC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IFVOTU9VTlRFRDtcblRyYW5zaXRpb24uRVhJVEVEID0gRVhJVEVEO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IEVOVEVSSU5HO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gRU5URVJFRDtcblRyYW5zaXRpb24uRVhJVElORyA9IEVYSVRJTkc7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uOyIsImV4cG9ydCB2YXIgcmVmbG93ID0gZnVuY3Rpb24gcmVmbG93KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuc2Nyb2xsVG9wO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcHMocHJvcHMsIG9wdGlvbnMpIHtcbiAgdmFyIHRpbWVvdXQgPSBwcm9wcy50aW1lb3V0LFxuICAgICAgX3Byb3BzJHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBzdHlsZSA9IF9wcm9wcyRzdHlsZSA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkc3R5bGU7XG4gIHJldHVybiB7XG4gICAgZHVyYXRpb246IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiB8fCB0eXBlb2YgdGltZW91dCA9PT0gJ251bWJlcicgPyB0aW1lb3V0IDogdGltZW91dFtvcHRpb25zLm1vZGVdIHx8IDAsXG4gICAgZGVsYXk6IHN0eWxlLnRyYW5zaXRpb25EZWxheVxuICB9O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgcmVmbG93LCBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcblxuZnVuY3Rpb24gZ2V0U2NhbGUodmFsdWUpIHtcbiAgcmV0dXJuIFwic2NhbGUoXCIuY29uY2F0KHZhbHVlLCBcIiwgXCIpLmNvbmNhdChNYXRoLnBvdyh2YWx1ZSwgMiksIFwiKVwiKTtcbn1cblxudmFyIHN0eWxlcyA9IHtcbiAgZW50ZXJpbmc6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogZ2V0U2NhbGUoMSlcbiAgfSxcbiAgZW50ZXJlZDoge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNmb3JtOiAnbm9uZSdcbiAgfVxufTtcbi8qKlxuICogVGhlIEdyb3cgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbVG9vbHRpcF0oL2NvbXBvbmVudHMvdG9vbHRpcHMvKSBhbmRcbiAqIFtQb3BvdmVyXSgvY29tcG9uZW50cy9wb3BvdmVyLykgY29tcG9uZW50cy5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cblxudmFyIEdyb3cgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEdyb3cocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkaXNhYmxlU3RyaWN0TSA9IHByb3BzLmRpc2FibGVTdHJpY3RNb2RlQ29tcGF0LFxuICAgICAgZGlzYWJsZVN0cmljdE1vZGVDb21wYXQgPSBfcHJvcHMkZGlzYWJsZVN0cmljdE0gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVTdHJpY3RNLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBfcHJvcHMkdGltZW91dCA9IHByb3BzLnRpbWVvdXQsXG4gICAgICB0aW1lb3V0ID0gX3Byb3BzJHRpbWVvdXQgPT09IHZvaWQgMCA/ICdhdXRvJyA6IF9wcm9wcyR0aW1lb3V0LFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Db21wID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPT09IHZvaWQgMCA/IFRyYW5zaXRpb24gOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdFwiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcInN0eWxlXCIsIFwidGltZW91dFwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl0pO1xuXG4gIHZhciB0aW1lciA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgYXV0b1RpbWVvdXQgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPSB0aGVtZS51bnN0YWJsZV9zdHJpY3RNb2RlICYmICFkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdDtcbiAgdmFyIG5vZGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBmb3JlaWduUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJlZik7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkLCBmb3JlaWduUmVmKTtcblxuICB2YXIgbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uIG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmcpIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3JlZiA9IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBbbm9kZVJlZi5jdXJyZW50LCBub2RlT3JBcHBlYXJpbmddIDogW25vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmddLFxuICAgICAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICAgIG5vZGUgPSBfcmVmMlswXSxcbiAgICAgICAgICAgIGlzQXBwZWFyaW5nID0gX3JlZjJbMV07XG5cbiAgICAgICAgdmFyIGlzRXhpdENhbGxiYWNrID0gaXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoaXNFeGl0Q2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlcmluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmluZyk7XG4gIHZhciBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUsIGlzQXBwZWFyaW5nKSB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIHZhciBfZ2V0VHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSksXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9nZXRUcmFuc2l0aW9uUHJvcHMuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX2dldFRyYW5zaXRpb25Qcm9wcy5kZWxheTtcblxuICAgIHZhciBkdXJhdGlvbjtcblxuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIGR1cmF0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKG5vZGUuY2xpZW50SGVpZ2h0KTtcbiAgICAgIGF1dG9UaW1lb3V0LmN1cnJlbnQgPSBkdXJhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG4gICAgfVxuXG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gW3RoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgIGRlbGF5OiBkZWxheVxuICAgIH0pLCB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAqIDAuNjY2LFxuICAgICAgZGVsYXk6IGRlbGF5XG4gICAgfSldLmpvaW4oJywnKTtcblxuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlRW50ZXJlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmVkKTtcbiAgdmFyIGhhbmRsZUV4aXRpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRXhpdGluZyk7XG4gIHZhciBoYW5kbGVFeGl0ID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgIHZhciBfZ2V0VHJhbnNpdGlvblByb3BzMiA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0aW1lb3V0OiB0aW1lb3V0XG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSksXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9nZXRUcmFuc2l0aW9uUHJvcHMyLmR1cmF0aW9uLFxuICAgICAgICBkZWxheSA9IF9nZXRUcmFuc2l0aW9uUHJvcHMyLmRlbGF5O1xuXG4gICAgdmFyIGR1cmF0aW9uO1xuXG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgZHVyYXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24obm9kZS5jbGllbnRIZWlnaHQpO1xuICAgICAgYXV0b1RpbWVvdXQuY3VycmVudCA9IGR1cmF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSBbdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgZGVsYXk6IGRlbGF5XG4gICAgfSksIHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uICogMC42NjYsXG4gICAgICBkZWxheTogZGVsYXkgfHwgZHVyYXRpb24gKiAwLjMzM1xuICAgIH0pXS5qb2luKCcsJyk7XG4gICAgbm9kZS5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gZ2V0U2NhbGUoMC43NSk7XG5cbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUV4aXRlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0ZWQpO1xuXG4gIHZhciBhZGRFbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEVuZExpc3RlbmVyKG5vZGVPck5leHQsIG1heWJlTmV4dCkge1xuICAgIHZhciBuZXh0ID0gZW5hYmxlU3RyaWN0TW9kZUNvbXBhdCA/IG5vZGVPck5leHQgOiBtYXliZU5leHQ7XG5cbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICB0aW1lci5jdXJyZW50ID0gc2V0VGltZW91dChuZXh0LCBhdXRvVGltZW91dC5jdXJyZW50IHx8IDApO1xuICAgIH1cbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogdHJ1ZSxcbiAgICBpbjogaW5Qcm9wLFxuICAgIG5vZGVSZWY6IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRW50ZXJlZDogaGFuZGxlRW50ZXJlZCxcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICBvbkV4aXRpbmc6IGhhbmRsZUV4aXRpbmcsXG4gICAgYWRkRW5kTGlzdGVuZXI6IGFkZEVuZExpc3RlbmVyLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQgPT09ICdhdXRvJyA/IG51bGwgOiB0aW1lb3V0XG4gIH0sIG90aGVyKSwgZnVuY3Rpb24gKHN0YXRlLCBjaGlsZFByb3BzKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe1xuICAgICAgc3R5bGU6IF9leHRlbmRzKF9leHRlbmRzKF9leHRlbmRzKHtcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdHJhbnNmb3JtOiBnZXRTY2FsZSgwLjc1KSxcbiAgICAgICAgdmlzaWJpbGl0eTogc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgfSwgc3R5bGVzW3N0YXRlXSksIHN0eWxlKSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUpLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9LCBjaGlsZFByb3BzKSk7XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHcm93LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogRW5hYmxlIHRoaXMgcHJvcCBpZiB5b3UgZW5jb3VudGVyICdGdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzJyxcbiAgICogdXNlIGB1bnN0YWJsZV9jcmVhdGVTdHJpY3RNb2RlVGhlbWVgLFxuICAgKiBhbmQgY2FuJ3QgZm9yd2FyZCB0aGUgcmVmIGluIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBhbmltYXRpb24uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbkdyb3cubXVpU3VwcG9ydEF1dG8gPSB0cnVlO1xuZXhwb3J0IGRlZmF1bHQgR3JvdzsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgZWxldmF0aW9ucyA9IHt9O1xuICB0aGVtZS5zaGFkb3dzLmZvckVhY2goZnVuY3Rpb24gKHNoYWRvdywgaW5kZXgpIHtcbiAgICBlbGV2YXRpb25zW1wiZWxldmF0aW9uXCIuY29uY2F0KGluZGV4KV0gPSB7XG4gICAgICBib3hTaGFkb3c6IHNoYWRvd1xuICAgIH07XG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQucGFwZXIsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JveC1zaGFkb3cnKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzcXVhcmU9e2ZhbHNlfWAuICovXG4gICAgcm91bmRlZDoge1xuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXNcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfVxuICB9LCBlbGV2YXRpb25zKTtcbn07XG52YXIgUGFwZXIgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBhcGVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRzcXVhcmUgPSBwcm9wcy5zcXVhcmUsXG4gICAgICBzcXVhcmUgPSBfcHJvcHMkc3F1YXJlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzcXVhcmUsXG4gICAgICBfcHJvcHMkZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uLFxuICAgICAgZWxldmF0aW9uID0gX3Byb3BzJGVsZXZhdGlvbiA9PT0gdm9pZCAwID8gMSA6IF9wcm9wcyRlbGV2YXRpb24sXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdlbGV2YXRpb24nIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcInNxdWFyZVwiLCBcImVsZXZhdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgPyBjbGFzc2VzLm91dGxpbmVkIDogY2xhc3Nlc1tcImVsZXZhdGlvblwiLmNvbmNhdChlbGV2YXRpb24pXSwgIXNxdWFyZSAmJiBjbGFzc2VzLnJvdW5kZWQpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBhcGVyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogU2hhZG93IGRlcHRoLCBjb3JyZXNwb25kcyB0byBgZHBgIGluIHRoZSBzcGVjLlxuICAgKiBJdCBhY2NlcHRzIHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDI0IGluY2x1c2l2ZS5cbiAgICovXG4gIGVsZXZhdGlvbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm51bWJlciwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgICBlbGV2YXRpb24gPSBwcm9wcy5lbGV2YXRpb247IC8vIGluIGNhc2UgYHdpdGhTdHlsZXNgIGZhaWxzIHRvIGluamVjdCB3ZSBkb24ndCBuZWVkIHRoaXMgd2FybmluZ1xuXG4gICAgaWYgKGNsYXNzZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGVsZXZhdGlvbiAhPSBudWxsICYmIGNsYXNzZXNbXCJlbGV2YXRpb25cIi5jb25jYXQoZWxldmF0aW9uKV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIk1hdGVyaWFsLVVJOiBUaGlzIGVsZXZhdGlvbiBgXCIuY29uY2F0KGVsZXZhdGlvbiwgXCJgIGlzIG5vdCBpbXBsZW1lbnRlZC5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZGVkIGNvcm5lcnMgYXJlIGRpc2FibGVkLlxuICAgKi9cbiAgc3F1YXJlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZWxldmF0aW9uJywgJ291dGxpbmVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVBhcGVyJ1xufSkoUGFwZXIpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLCByZWZUeXBlLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4uL3V0aWxzL2RlYm91bmNlJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgb3duZXJXaW5kb3cgZnJvbSAnLi4vdXRpbHMvb3duZXJXaW5kb3cnO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL01vZGFsJztcbmltcG9ydCBHcm93IGZyb20gJy4uL0dyb3cnO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRPZmZzZXRUb3AocmVjdCwgdmVydGljYWwpIHtcbiAgdmFyIG9mZnNldCA9IDA7XG5cbiAgaWYgKHR5cGVvZiB2ZXJ0aWNhbCA9PT0gJ251bWJlcicpIHtcbiAgICBvZmZzZXQgPSB2ZXJ0aWNhbDtcbiAgfSBlbHNlIGlmICh2ZXJ0aWNhbCA9PT0gJ2NlbnRlcicpIHtcbiAgICBvZmZzZXQgPSByZWN0LmhlaWdodCAvIDI7XG4gIH0gZWxzZSBpZiAodmVydGljYWwgPT09ICdib3R0b20nKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE9mZnNldExlZnQocmVjdCwgaG9yaXpvbnRhbCkge1xuICB2YXIgb2Zmc2V0ID0gMDtcblxuICBpZiAodHlwZW9mIGhvcml6b250YWwgPT09ICdudW1iZXInKSB7XG4gICAgb2Zmc2V0ID0gaG9yaXpvbnRhbDtcbiAgfSBlbHNlIGlmIChob3Jpem9udGFsID09PSAnY2VudGVyJykge1xuICAgIG9mZnNldCA9IHJlY3Qud2lkdGggLyAyO1xuICB9IGVsc2UgaWYgKGhvcml6b250YWwgPT09ICdyaWdodCcpIHtcbiAgICBvZmZzZXQgPSByZWN0LndpZHRoO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUodHJhbnNmb3JtT3JpZ2luKSB7XG4gIHJldHVybiBbdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwsIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbF0ubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09PSAnbnVtYmVyJyA/IFwiXCIuY29uY2F0KG4sIFwicHhcIikgOiBuO1xuICB9KS5qb2luKCcgJyk7XG59IC8vIFN1bSB0aGUgc2Nyb2xsVG9wIGJldHdlZW4gdHdvIGVsZW1lbnRzLlxuXG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciBlbGVtZW50ID0gY2hpbGQ7XG4gIHZhciBzY3JvbGxUb3AgPSAwO1xuXG4gIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQgIT09IHBhcmVudCkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgc2Nyb2xsVG9wICs9IGVsZW1lbnQuc2Nyb2xsVG9wO1xuICB9XG5cbiAgcmV0dXJuIHNjcm9sbFRvcDtcbn1cblxuZnVuY3Rpb24gZ2V0QW5jaG9yRWwoYW5jaG9yRWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBhbmNob3JFbCA9PT0gJ2Z1bmN0aW9uJyA/IGFuY2hvckVsKCkgOiBhbmNob3JFbDtcbn1cblxuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudC4gKi9cbiAgcGFwZXI6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgIC8vIFNvIHdlIHNlZSB0aGUgcG9wb3ZlciB3aGVuIGl0J3MgZW1wdHkuXG4gICAgLy8gSXQncyBtb3N0IGxpa2VseSBvbiBpc3N1ZSBvbiB1c2VybGFuZC5cbiAgICBtaW5XaWR0aDogMTYsXG4gICAgbWluSGVpZ2h0OiAxNixcbiAgICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDMycHgpJyxcbiAgICBtYXhIZWlnaHQ6ICdjYWxjKDEwMCUgLSAzMnB4KScsXG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAwXG4gIH1cbn07XG52YXIgUG9wb3ZlciA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9wb3Zlcihwcm9wcywgcmVmKSB7XG4gIHZhciBhY3Rpb24gPSBwcm9wcy5hY3Rpb24sXG4gICAgICBhbmNob3JFbCA9IHByb3BzLmFuY2hvckVsLFxuICAgICAgX3Byb3BzJGFuY2hvck9yaWdpbiA9IHByb3BzLmFuY2hvck9yaWdpbixcbiAgICAgIGFuY2hvck9yaWdpbiA9IF9wcm9wcyRhbmNob3JPcmlnaW4gPT09IHZvaWQgMCA/IHtcbiAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gIH0gOiBfcHJvcHMkYW5jaG9yT3JpZ2luLFxuICAgICAgYW5jaG9yUG9zaXRpb24gPSBwcm9wcy5hbmNob3JQb3NpdGlvbixcbiAgICAgIF9wcm9wcyRhbmNob3JSZWZlcmVuYyA9IHByb3BzLmFuY2hvclJlZmVyZW5jZSxcbiAgICAgIGFuY2hvclJlZmVyZW5jZSA9IF9wcm9wcyRhbmNob3JSZWZlcmVuYyA9PT0gdm9pZCAwID8gJ2FuY2hvckVsJyA6IF9wcm9wcyRhbmNob3JSZWZlcmVuYyxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbnRhaW5lclByb3AgPSBwcm9wcy5jb250YWluZXIsXG4gICAgICBfcHJvcHMkZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uLFxuICAgICAgZWxldmF0aW9uID0gX3Byb3BzJGVsZXZhdGlvbiA9PT0gdm9pZCAwID8gOCA6IF9wcm9wcyRlbGV2YXRpb24sXG4gICAgICBnZXRDb250ZW50QW5jaG9yRWwgPSBwcm9wcy5nZXRDb250ZW50QW5jaG9yRWwsXG4gICAgICBfcHJvcHMkbWFyZ2luVGhyZXNob2wgPSBwcm9wcy5tYXJnaW5UaHJlc2hvbGQsXG4gICAgICBtYXJnaW5UaHJlc2hvbGQgPSBfcHJvcHMkbWFyZ2luVGhyZXNob2wgPT09IHZvaWQgMCA/IDE2IDogX3Byb3BzJG1hcmdpblRocmVzaG9sLFxuICAgICAgb25FbnRlciA9IHByb3BzLm9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQgPSBwcm9wcy5vbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nID0gcHJvcHMub25FbnRlcmluZyxcbiAgICAgIG9uRXhpdCA9IHByb3BzLm9uRXhpdCxcbiAgICAgIG9uRXhpdGVkID0gcHJvcHMub25FeGl0ZWQsXG4gICAgICBvbkV4aXRpbmcgPSBwcm9wcy5vbkV4aXRpbmcsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIF9wcm9wcyRQYXBlclByb3BzID0gcHJvcHMuUGFwZXJQcm9wcyxcbiAgICAgIFBhcGVyUHJvcHMgPSBfcHJvcHMkUGFwZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkUGFwZXJQcm9wcyxcbiAgICAgIF9wcm9wcyR0cmFuc2Zvcm1PcmlnaSA9IHByb3BzLnRyYW5zZm9ybU9yaWdpbixcbiAgICAgIHRyYW5zZm9ybU9yaWdpbiA9IF9wcm9wcyR0cmFuc2Zvcm1PcmlnaSA9PT0gdm9pZCAwID8ge1xuICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgfSA6IF9wcm9wcyR0cmFuc2Zvcm1PcmlnaSxcbiAgICAgIF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9IHByb3BzLlRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gX3Byb3BzJFRyYW5zaXRpb25Db21wID09PSB2b2lkIDAgPyBHcm93IDogX3Byb3BzJFRyYW5zaXRpb25Db21wLFxuICAgICAgX3Byb3BzJHRyYW5zaXRpb25EdXJhID0gcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uUHJvcCA9IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSA9PT0gdm9pZCAwID8gJ2F1dG8nIDogX3Byb3BzJHRyYW5zaXRpb25EdXJhLFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Qcm9wID0gcHJvcHMuVHJhbnNpdGlvblByb3BzLFxuICAgICAgVHJhbnNpdGlvblByb3BzID0gX3Byb3BzJFRyYW5zaXRpb25Qcm9wID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRUcmFuc2l0aW9uUHJvcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3Rpb25cIiwgXCJhbmNob3JFbFwiLCBcImFuY2hvck9yaWdpblwiLCBcImFuY2hvclBvc2l0aW9uXCIsIFwiYW5jaG9yUmVmZXJlbmNlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGFpbmVyXCIsIFwiZWxldmF0aW9uXCIsIFwiZ2V0Q29udGVudEFuY2hvckVsXCIsIFwibWFyZ2luVGhyZXNob2xkXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9wZW5cIiwgXCJQYXBlclByb3BzXCIsIFwidHJhbnNmb3JtT3JpZ2luXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiXSk7XG5cbiAgdmFyIHBhcGVyUmVmID0gUmVhY3QudXNlUmVmKCk7IC8vIFJldHVybnMgdGhlIHRvcC9sZWZ0IG9mZnNldCBvZiB0aGUgcG9zaXRpb25cbiAgLy8gdG8gYXR0YWNoIHRvIG9uIHRoZSBhbmNob3IgZWxlbWVudCAob3IgYm9keSBpZiBub25lIGlzIHByb3ZpZGVkKVxuXG4gIHZhciBnZXRBbmNob3JPZmZzZXQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoY29udGVudEFuY2hvck9mZnNldCkge1xuICAgIGlmIChhbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JQb3NpdGlvbicpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghYW5jaG9yUG9zaXRpb24pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogWW91IG5lZWQgdG8gcHJvdmlkZSBhIGBhbmNob3JQb3NpdGlvbmAgcHJvcCB3aGVuIHVzaW5nICcgKyAnPFBvcG92ZXIgYW5jaG9yUmVmZXJlbmNlPVwiYW5jaG9yUG9zaXRpb25cIiAvPi4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYW5jaG9yUG9zaXRpb247XG4gICAgfVxuXG4gICAgdmFyIHJlc29sdmVkQW5jaG9yRWwgPSBnZXRBbmNob3JFbChhbmNob3JFbCk7IC8vIElmIGFuIGFuY2hvciBlbGVtZW50IHdhc24ndCBwcm92aWRlZCwganVzdCB1c2UgdGhlIHBhcmVudCBib2R5IGVsZW1lbnQgb2YgdGhpcyBQb3BvdmVyXG5cbiAgICB2YXIgYW5jaG9yRWxlbWVudCA9IHJlc29sdmVkQW5jaG9yRWwgJiYgcmVzb2x2ZWRBbmNob3JFbC5ub2RlVHlwZSA9PT0gMSA/IHJlc29sdmVkQW5jaG9yRWwgOiBvd25lckRvY3VtZW50KHBhcGVyUmVmLmN1cnJlbnQpLmJvZHk7XG4gICAgdmFyIGFuY2hvclJlY3QgPSBhbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBib3ggPSBhbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYW5jaG9yVmVydGljYWwgPSBjb250ZW50QW5jaG9yT2Zmc2V0ID09PSAwID8gYW5jaG9yT3JpZ2luLnZlcnRpY2FsIDogJ2NlbnRlcic7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYW5jaG9yUmVjdC50b3AgKyBnZXRPZmZzZXRUb3AoYW5jaG9yUmVjdCwgYW5jaG9yVmVydGljYWwpLFxuICAgICAgbGVmdDogYW5jaG9yUmVjdC5sZWZ0ICsgZ2V0T2Zmc2V0TGVmdChhbmNob3JSZWN0LCBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbClcbiAgICB9O1xuICB9LCBbYW5jaG9yRWwsIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsLCBhbmNob3JPcmlnaW4udmVydGljYWwsIGFuY2hvclBvc2l0aW9uLCBhbmNob3JSZWZlcmVuY2VdKTsgLy8gUmV0dXJucyB0aGUgdmVydGljYWwgb2Zmc2V0IG9mIGlubmVyIGNvbnRlbnQgdG8gYW5jaG9yIHRoZSB0cmFuc2Zvcm0gb24gaWYgcHJvdmlkZWRcblxuICB2YXIgZ2V0Q29udGVudEFuY2hvck9mZnNldCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgdmFyIGNvbnRlbnRBbmNob3JPZmZzZXQgPSAwO1xuXG4gICAgaWYgKGdldENvbnRlbnRBbmNob3JFbCAmJiBhbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JFbCcpIHtcbiAgICAgIHZhciBjb250ZW50QW5jaG9yRWwgPSBnZXRDb250ZW50QW5jaG9yRWwoZWxlbWVudCk7XG5cbiAgICAgIGlmIChjb250ZW50QW5jaG9yRWwgJiYgZWxlbWVudC5jb250YWlucyhjb250ZW50QW5jaG9yRWwpKSB7XG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCwgY29udGVudEFuY2hvckVsKTtcbiAgICAgICAgY29udGVudEFuY2hvck9mZnNldCA9IGNvbnRlbnRBbmNob3JFbC5vZmZzZXRUb3AgKyBjb250ZW50QW5jaG9yRWwuY2xpZW50SGVpZ2h0IC8gMiAtIHNjcm9sbFRvcCB8fCAwO1xuICAgICAgfSAvLyAhPSB0aGUgZGVmYXVsdCB2YWx1ZVxuXG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChhbmNob3JPcmlnaW4udmVydGljYWwgIT09ICd0b3AnKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBZb3UgY2FuIG5vdCBjaGFuZ2UgdGhlIGRlZmF1bHQgYGFuY2hvck9yaWdpbi52ZXJ0aWNhbGAgdmFsdWUgJywgJ3doZW4gYWxzbyBwcm92aWRpbmcgdGhlIGBnZXRDb250ZW50QW5jaG9yRWxgIHByb3AgdG8gdGhlIHBvcG92ZXIgY29tcG9uZW50LicsICdPbmx5IHVzZSBvbmUgb2YgdGhlIHR3byBwcm9wcy4nLCAnU2V0IGBnZXRDb250ZW50QW5jaG9yRWxgIHRvIGBudWxsIHwgdW5kZWZpbmVkYCcgKyAnIG9yIGxlYXZlIGBhbmNob3JPcmlnaW4udmVydGljYWxgIHVuY2hhbmdlZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udGVudEFuY2hvck9mZnNldDtcbiAgfSwgW2FuY2hvck9yaWdpbi52ZXJ0aWNhbCwgYW5jaG9yUmVmZXJlbmNlLCBnZXRDb250ZW50QW5jaG9yRWxdKTsgLy8gUmV0dXJuIHRoZSBiYXNlIHRyYW5zZm9ybSBvcmlnaW4gdXNpbmcgdGhlIGVsZW1lbnRcbiAgLy8gYW5kIHRha2luZyB0aGUgY29udGVudCBhbmNob3Igb2Zmc2V0IGludG8gYWNjb3VudCBpZiBpbiB1c2VcblxuICB2YXIgZ2V0VHJhbnNmb3JtT3JpZ2luID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGVsZW1SZWN0KSB7XG4gICAgdmFyIGNvbnRlbnRBbmNob3JPZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZlcnRpY2FsOiBnZXRPZmZzZXRUb3AoZWxlbVJlY3QsIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbCkgKyBjb250ZW50QW5jaG9yT2Zmc2V0LFxuICAgICAgaG9yaXpvbnRhbDogZ2V0T2Zmc2V0TGVmdChlbGVtUmVjdCwgdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwpXG4gICAgfTtcbiAgfSwgW3RyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsLCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWxdKTtcbiAgdmFyIGdldFBvc2l0aW9uaW5nU3R5bGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIC8vIENoZWNrIGlmIHRoZSBwYXJlbnQgaGFzIHJlcXVlc3RlZCBhbmNob3Jpbmcgb24gYW4gaW5uZXIgY29udGVudCBub2RlXG4gICAgdmFyIGNvbnRlbnRBbmNob3JPZmZzZXQgPSBnZXRDb250ZW50QW5jaG9yT2Zmc2V0KGVsZW1lbnQpO1xuICAgIHZhciBlbGVtUmVjdCA9IHtcbiAgICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoLFxuICAgICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodFxuICAgIH07IC8vIEdldCB0aGUgdHJhbnNmb3JtIG9yaWdpbiBwb2ludCBvbiB0aGUgZWxlbWVudCBpdHNlbGZcblxuICAgIHZhciBlbGVtVHJhbnNmb3JtT3JpZ2luID0gZ2V0VHJhbnNmb3JtT3JpZ2luKGVsZW1SZWN0LCBjb250ZW50QW5jaG9yT2Zmc2V0KTtcblxuICAgIGlmIChhbmNob3JSZWZlcmVuY2UgPT09ICdub25lJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBudWxsLFxuICAgICAgICBsZWZ0OiBudWxsLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46IGdldFRyYW5zZm9ybU9yaWdpblZhbHVlKGVsZW1UcmFuc2Zvcm1PcmlnaW4pXG4gICAgICB9O1xuICAgIH0gLy8gR2V0IHRoZSBvZmZzZXQgb2Ygb2YgdGhlIGFuY2hvcmluZyBlbGVtZW50XG5cblxuICAgIHZhciBhbmNob3JPZmZzZXQgPSBnZXRBbmNob3JPZmZzZXQoY29udGVudEFuY2hvck9mZnNldCk7IC8vIENhbGN1bGF0ZSBlbGVtZW50IHBvc2l0aW9uaW5nXG5cbiAgICB2YXIgdG9wID0gYW5jaG9yT2Zmc2V0LnRvcCAtIGVsZW1UcmFuc2Zvcm1PcmlnaW4udmVydGljYWw7XG4gICAgdmFyIGxlZnQgPSBhbmNob3JPZmZzZXQubGVmdCAtIGVsZW1UcmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbDtcbiAgICB2YXIgYm90dG9tID0gdG9wICsgZWxlbVJlY3QuaGVpZ2h0O1xuICAgIHZhciByaWdodCA9IGxlZnQgKyBlbGVtUmVjdC53aWR0aDsgLy8gVXNlIHRoZSBwYXJlbnQgd2luZG93IG9mIHRoZSBhbmNob3JFbCBpZiBwcm92aWRlZFxuXG4gICAgdmFyIGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGdldEFuY2hvckVsKGFuY2hvckVsKSk7IC8vIFdpbmRvdyB0aHJlc2hvbGRzIHRha2luZyByZXF1aXJlZCBtYXJnaW4gaW50byBhY2NvdW50XG5cbiAgICB2YXIgaGVpZ2h0VGhyZXNob2xkID0gY29udGFpbmVyV2luZG93LmlubmVySGVpZ2h0IC0gbWFyZ2luVGhyZXNob2xkO1xuICAgIHZhciB3aWR0aFRocmVzaG9sZCA9IGNvbnRhaW5lcldpbmRvdy5pbm5lcldpZHRoIC0gbWFyZ2luVGhyZXNob2xkOyAvLyBDaGVjayBpZiB0aGUgdmVydGljYWwgYXhpcyBuZWVkcyBzaGlmdGluZ1xuXG4gICAgaWYgKHRvcCA8IG1hcmdpblRocmVzaG9sZCkge1xuICAgICAgdmFyIGRpZmYgPSB0b3AgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgICB0b3AgLT0gZGlmZjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4udmVydGljYWwgKz0gZGlmZjtcbiAgICB9IGVsc2UgaWYgKGJvdHRvbSA+IGhlaWdodFRocmVzaG9sZCkge1xuICAgICAgdmFyIF9kaWZmID0gYm90dG9tIC0gaGVpZ2h0VGhyZXNob2xkO1xuXG4gICAgICB0b3AgLT0gX2RpZmY7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsICs9IF9kaWZmO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoZWxlbVJlY3QuaGVpZ2h0ID4gaGVpZ2h0VGhyZXNob2xkICYmIGVsZW1SZWN0LmhlaWdodCAmJiBoZWlnaHRUaHJlc2hvbGQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgcG9wb3ZlciBjb21wb25lbnQgaXMgdG9vIHRhbGwuJywgXCJTb21lIHBhcnQgb2YgaXQgY2FuIG5vdCBiZSBzZWVuIG9uIHRoZSBzY3JlZW4gKFwiLmNvbmNhdChlbGVtUmVjdC5oZWlnaHQgLSBoZWlnaHRUaHJlc2hvbGQsIFwicHgpLlwiKSwgJ1BsZWFzZSBjb25zaWRlciBhZGRpbmcgYSBgbWF4LWhlaWdodGAgdG8gaW1wcm92ZSB0aGUgdXNlci1leHBlcmllbmNlLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9IC8vIENoZWNrIGlmIHRoZSBob3Jpem9udGFsIGF4aXMgbmVlZHMgc2hpZnRpbmdcblxuXG4gICAgaWYgKGxlZnQgPCBtYXJnaW5UaHJlc2hvbGQpIHtcbiAgICAgIHZhciBfZGlmZjIgPSBsZWZ0IC0gbWFyZ2luVGhyZXNob2xkO1xuXG4gICAgICBsZWZ0IC09IF9kaWZmMjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCArPSBfZGlmZjI7XG4gICAgfSBlbHNlIGlmIChyaWdodCA+IHdpZHRoVGhyZXNob2xkKSB7XG4gICAgICB2YXIgX2RpZmYzID0gcmlnaHQgLSB3aWR0aFRocmVzaG9sZDtcblxuICAgICAgbGVmdCAtPSBfZGlmZjM7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwgKz0gX2RpZmYzO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0b3A6IFwiXCIuY29uY2F0KE1hdGgucm91bmQodG9wKSwgXCJweFwiKSxcbiAgICAgIGxlZnQ6IFwiXCIuY29uY2F0KE1hdGgucm91bmQobGVmdCksIFwicHhcIiksXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46IGdldFRyYW5zZm9ybU9yaWdpblZhbHVlKGVsZW1UcmFuc2Zvcm1PcmlnaW4pXG4gICAgfTtcbiAgfSwgW2FuY2hvckVsLCBhbmNob3JSZWZlcmVuY2UsIGdldEFuY2hvck9mZnNldCwgZ2V0Q29udGVudEFuY2hvck9mZnNldCwgZ2V0VHJhbnNmb3JtT3JpZ2luLCBtYXJnaW5UaHJlc2hvbGRdKTtcbiAgdmFyIHNldFBvc2l0aW9uaW5nU3R5bGVzID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbGVtZW50ID0gcGFwZXJSZWYuY3VycmVudDtcblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwb3NpdGlvbmluZyA9IGdldFBvc2l0aW9uaW5nU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAocG9zaXRpb25pbmcudG9wICE9PSBudWxsKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IHBvc2l0aW9uaW5nLnRvcDtcbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb25pbmcubGVmdCAhPT0gbnVsbCkge1xuICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gcG9zaXRpb25pbmcubGVmdDtcbiAgICB9XG5cbiAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IHBvc2l0aW9uaW5nLnRyYW5zZm9ybU9yaWdpbjtcbiAgfSwgW2dldFBvc2l0aW9uaW5nU3R5bGVdKTtcblxuICB2YXIgaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZykge1xuICAgIGlmIChvbkVudGVyaW5nKSB7XG4gICAgICBvbkVudGVyaW5nKGVsZW1lbnQsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG5cbiAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQYXBlclJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgcGFwZXJSZWYuY3VycmVudCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgIH1cbiAgfSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG9wZW4gPyB7XG4gICAgICB1cGRhdGVQb3NpdGlvbjogZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgICAgIHNldFBvc2l0aW9uaW5nU3R5bGVzKCk7XG4gICAgICB9XG4gICAgfSA6IG51bGw7XG4gIH0sIFtvcGVuLCBzZXRQb3NpdGlvbmluZ1N0eWxlc10pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgaGFuZGxlUmVzaXplID0gZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgc2V0UG9zaXRpb25pbmdTdHlsZXMoKTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICB9O1xuICB9LCBbb3Blbiwgc2V0UG9zaXRpb25pbmdTdHlsZXNdKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvblByb3A7XG5cbiAgaWYgKHRyYW5zaXRpb25EdXJhdGlvblByb3AgPT09ICdhdXRvJyAmJiAhVHJhbnNpdGlvbkNvbXBvbmVudC5tdWlTdXBwb3J0QXV0bykge1xuICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHVuZGVmaW5lZDtcbiAgfSAvLyBJZiB0aGUgY29udGFpbmVyIHByb3AgaXMgcHJvdmlkZWQsIHVzZSB0aGF0XG4gIC8vIElmIHRoZSBhbmNob3JFbCBwcm9wIGlzIHByb3ZpZGVkLCB1c2UgaXRzIHBhcmVudCBib2R5IGVsZW1lbnQgYXMgdGhlIGNvbnRhaW5lclxuICAvLyBJZiBuZWl0aGVyIGFyZSBwcm92aWRlZCBsZXQgdGhlIE1vZGFsIHRha2UgY2FyZSBvZiBjaG9vc2luZyB0aGUgY29udGFpbmVyXG5cblxuICB2YXIgY29udGFpbmVyID0gY29udGFpbmVyUHJvcCB8fCAoYW5jaG9yRWwgPyBvd25lckRvY3VtZW50KGdldEFuY2hvckVsKGFuY2hvckVsKSkuYm9keSA6IHVuZGVmaW5lZCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNb2RhbCwgX2V4dGVuZHMoe1xuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIG9wZW46IG9wZW4sXG4gICAgcmVmOiByZWYsXG4gICAgQmFja2Ryb3BQcm9wczoge1xuICAgICAgaW52aXNpYmxlOiB0cnVlXG4gICAgfSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogdHJ1ZSxcbiAgICBpbjogb3BlbixcbiAgICBvbkVudGVyOiBvbkVudGVyLFxuICAgIG9uRW50ZXJlZDogb25FbnRlcmVkLFxuICAgIG9uRXhpdDogb25FeGl0LFxuICAgIG9uRXhpdGVkOiBvbkV4aXRlZCxcbiAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgfSwgVHJhbnNpdGlvblByb3BzLCB7XG4gICAgb25FbnRlcmluZzogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUVudGVyaW5nLCBUcmFuc2l0aW9uUHJvcHMub25FbnRlcmluZylcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBhcGVyLCBfZXh0ZW5kcyh7XG4gICAgZWxldmF0aW9uOiBlbGV2YXRpb24sXG4gICAgcmVmOiBoYW5kbGVQYXBlclJlZlxuICB9LCBQYXBlclByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucGFwZXIsIFBhcGVyUHJvcHMuY2xhc3NOYW1lKVxuICB9KSwgY2hpbGRyZW4pKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBvcG92ZXIucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSByZWYgZm9yIGltcGVyYXRpdmUgYWN0aW9ucy5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgdXBkYXRlUG9zaXRpb24oKSBhY3Rpb24uXG4gICAqL1xuICBhY3Rpb246IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIEEgSFRNTCBlbGVtZW50LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBpdC5cbiAgICogSXQncyB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqL1xuICBhbmNob3JFbDogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICBpZiAocHJvcHMub3BlbiAmJiAoIXByb3BzLmFuY2hvclJlZmVyZW5jZSB8fCBwcm9wcy5hbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JFbCcpKSB7XG4gICAgICB2YXIgcmVzb2x2ZWRBbmNob3JFbCA9IGdldEFuY2hvckVsKHByb3BzLmFuY2hvckVsKTtcblxuICAgICAgaWYgKHJlc29sdmVkQW5jaG9yRWwgJiYgcmVzb2x2ZWRBbmNob3JFbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICB2YXIgYm94ID0gcmVzb2x2ZWRBbmNob3JFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCBcIkl0IHNob3VsZCBiZSBhbiBFbGVtZW50IGluc3RhbmNlIGJ1dCBpdCdzIGBcIi5jb25jYXQocmVzb2x2ZWRBbmNob3JFbCwgXCJgIGluc3RlYWQuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgYW5jaG9yIHdoZXJlIHRoZSBwb3BvdmVyJ3NcbiAgICogYGFuY2hvckVsYCB3aWxsIGF0dGFjaCB0by4gVGhpcyBpcyBub3QgdXNlZCB3aGVuIHRoZVxuICAgKiBhbmNob3JSZWZlcmVuY2UgaXMgJ2FuY2hvclBvc2l0aW9uJy5cbiAgICpcbiAgICogT3B0aW9uczpcbiAgICogdmVydGljYWw6IFt0b3AsIGNlbnRlciwgYm90dG9tXTtcbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIGNlbnRlciwgcmlnaHRdLlxuICAgKi9cbiAgYW5jaG9yT3JpZ2luOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NlbnRlcicsICdsZWZ0JywgJ3JpZ2h0J10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZCxcbiAgICB2ZXJ0aWNhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ2NlbnRlcicsICd0b3AnXSksIFByb3BUeXBlcy5udW1iZXJdKS5pc1JlcXVpcmVkXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb3NpdGlvbiB0aGF0IG1heSBiZSB1c2VkXG4gICAqIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqIFRoZSBjb29yZGluYXRlcyBhcmUgcmVsYXRpdmUgdG9cbiAgICogdGhlIGFwcGxpY2F0aW9uJ3MgY2xpZW50IGFyZWEuXG4gICAqL1xuICBhbmNob3JQb3NpdGlvbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBsZWZ0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgdG9wOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgZGV0ZXJtaW5lcyB3aGljaCBhbmNob3IgcHJvcCB0byByZWZlciB0byB0byBzZXRcbiAgICogdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKi9cbiAgYW5jaG9yUmVmZXJlbmNlOiBQcm9wVHlwZXMub25lT2YoWydhbmNob3JFbCcsICdhbmNob3JQb3NpdGlvbicsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQSBIVE1MIGVsZW1lbnQsIGNvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgcGFzc2VkIHRvIHRoZSBNb2RhbCBjb21wb25lbnQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIGFuY2hvckVsJ3MgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmluc3RhbmNlT2YoUmVhY3QuQ29tcG9uZW50KSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogVGhlIGVsZXZhdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGVsZXZhdGlvbjogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgaW4gb3JkZXIgdG8gcmV0cmlldmUgdGhlIGNvbnRlbnQgYW5jaG9yIGVsZW1lbnQuXG4gICAqIEl0J3MgdGhlIG9wcG9zaXRlIG9mIHRoZSBgYW5jaG9yRWxgIHByb3AuXG4gICAqIFRoZSBjb250ZW50IGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBhbiBlbGVtZW50IGluc2lkZSB0aGUgcG9wb3Zlci5cbiAgICogSXQncyB1c2VkIHRvIGNvcnJlY3RseSBzY3JvbGwgYW5kIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqIFRoZSBwb3NpdGlvbmluZyBzdHJhdGVneSB0cmllcyB0byBtYWtlIHRoZSBjb250ZW50IGFuY2hvciBlbGVtZW50IGp1c3QgYWJvdmUgdGhlXG4gICAqIGFuY2hvciBlbGVtZW50LlxuICAgKi9cbiAgZ2V0Q29udGVudEFuY2hvckVsOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogU3BlY2lmaWVzIGhvdyBjbG9zZSB0byB0aGUgZWRnZSBvZiB0aGUgd2luZG93IHRoZSBwb3BvdmVyIGNhbiBhcHBlYXIuXG4gICAqL1xuICBtYXJnaW5UaHJlc2hvbGQ6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgZW50ZXJpbmcuXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBlbnRlcmVkLlxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGVudGVyaW5nLlxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIGV4aXRpbmcuXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaGFzIGV4aXRlZC5cbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGV4aXRpbmcuXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBwb3BvdmVyIGlzIHZpc2libGUuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFBhcGVyYF0oL2FwaS9wYXBlci8pIGVsZW1lbnQuXG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuc2hhcGUoe1xuICAgIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWZcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBwb3BvdmVyIHdoaWNoXG4gICAqIHdpbGwgYXR0YWNoIHRvIHRoZSBhbmNob3IncyBvcmlnaW4uXG4gICAqXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbSwgeChweCldO1xuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgY2VudGVyLCByaWdodCwgeChweCldLlxuICAgKi9cbiAgdHJhbnNmb3JtT3JpZ2luOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NlbnRlcicsICdsZWZ0JywgJ3JpZ2h0J10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZCxcbiAgICB2ZXJ0aWNhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ2NlbnRlcicsICd0b3AnXSksIFByb3BUeXBlcy5udW1iZXJdKS5pc1JlcXVpcmVkXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBbRm9sbG93IHRoaXMgZ3VpZGVdKC9jb21wb25lbnRzL3RyYW5zaXRpb25zLyN0cmFuc2l0aW9uY29tcG9uZW50LXByb3ApIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIHJlcXVpcmVtZW50cyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFRyYW5zaXRpb25gXShodHRwOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdHJhbnNpdGlvbiNUcmFuc2l0aW9uLXByb3BzKSBlbGVtZW50LlxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVBvcG92ZXInXG59KShQb3BvdmVyKTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIExpc3RDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIExpc3RDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0xpc3RDb250ZXh0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGlzdENvbnRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4vTGlzdENvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICBtYXJnaW46IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVQYWRkaW5nPXtmYWxzZX1gLiAqL1xuICBwYWRkaW5nOiB7XG4gICAgcGFkZGluZ1RvcDogOCxcbiAgICBwYWRkaW5nQm90dG9tOiA4XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBkZW5zZS4gKi9cbiAgZGVuc2U6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYSBgc3ViaGVhZGVyYCBpcyBwcm92aWRlZC4gKi9cbiAgc3ViaGVhZGVyOiB7XG4gICAgcGFkZGluZ1RvcDogMFxuICB9XG59O1xudmFyIExpc3QgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3QocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICd1bCcgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRlbnNlID0gcHJvcHMuZGVuc2UsXG4gICAgICBkZW5zZSA9IF9wcm9wcyRkZW5zZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGVuc2UsXG4gICAgICBfcHJvcHMkZGlzYWJsZVBhZGRpbmcgPSBwcm9wcy5kaXNhYmxlUGFkZGluZyxcbiAgICAgIGRpc2FibGVQYWRkaW5nID0gX3Byb3BzJGRpc2FibGVQYWRkaW5nID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUGFkZGluZyxcbiAgICAgIHN1YmhlYWRlciA9IHByb3BzLnN1YmhlYWRlcixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkZW5zZVwiLCBcImRpc2FibGVQYWRkaW5nXCIsIFwic3ViaGVhZGVyXCJdKTtcblxuICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkZW5zZTogZGVuc2VcbiAgICB9O1xuICB9LCBbZGVuc2VdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBkZW5zZSAmJiBjbGFzc2VzLmRlbnNlLCAhZGlzYWJsZVBhZGRpbmcgJiYgY2xhc3Nlcy5wYWRkaW5nLCBzdWJoZWFkZXIgJiYgY2xhc3Nlcy5zdWJoZWFkZXIpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgc3ViaGVhZGVyLCBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IHdpbGwgYmUgdXNlZCBmb3JcbiAgICogdGhlIGxpc3QgYW5kIGxpc3QgaXRlbXMuXG4gICAqIFRoZSBwcm9wIGlzIGF2YWlsYWJsZSB0byBkZXNjZW5kYW50IGNvbXBvbmVudHMgYXMgdGhlIGBkZW5zZWAgY29udGV4dC5cbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB2ZXJ0aWNhbCBwYWRkaW5nIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0LlxuICAgKi9cbiAgZGlzYWJsZVBhZGRpbmc6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgc3ViaGVhZGVyLCBub3JtYWxseSBgTGlzdFN1YmhlYWRlcmAuXG4gICAqL1xuICBzdWJoZWFkZXI6IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUxpc3QnXG59KShMaXN0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBMaXN0IGZyb20gJy4uL0xpc3QnO1xuaW1wb3J0IGdldFNjcm9sbGJhclNpemUgZnJvbSAnLi4vdXRpbHMvZ2V0U2Nyb2xsYmFyU2l6ZSc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcblxuZnVuY3Rpb24gbmV4dEl0ZW0obGlzdCwgaXRlbSwgZGlzYWJsZUxpc3RXcmFwKSB7XG4gIGlmIChsaXN0ID09PSBpdGVtKSB7XG4gICAgcmV0dXJuIGxpc3QuZmlyc3RDaGlsZDtcbiAgfVxuXG4gIGlmIChpdGVtICYmIGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgcmV0dXJuIGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IG51bGwgOiBsaXN0LmZpcnN0Q2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHByZXZpb3VzSXRlbShsaXN0LCBpdGVtLCBkaXNhYmxlTGlzdFdyYXApIHtcbiAgaWYgKGxpc3QgPT09IGl0ZW0pIHtcbiAgICByZXR1cm4gZGlzYWJsZUxpc3RXcmFwID8gbGlzdC5maXJzdENoaWxkIDogbGlzdC5sYXN0Q2hpbGQ7XG4gIH1cblxuICBpZiAoaXRlbSAmJiBpdGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICByZXR1cm4gaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IG51bGwgOiBsaXN0Lmxhc3RDaGlsZDtcbn1cblxuZnVuY3Rpb24gdGV4dENyaXRlcmlhTWF0Y2hlcyhuZXh0Rm9jdXMsIHRleHRDcml0ZXJpYSkge1xuICBpZiAodGV4dENyaXRlcmlhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciB0ZXh0ID0gbmV4dEZvY3VzLmlubmVyVGV4dDtcblxuICBpZiAodGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8ganNkb20gZG9lc24ndCBzdXBwb3J0IGlubmVyVGV4dFxuICAgIHRleHQgPSBuZXh0Rm9jdXMudGV4dENvbnRlbnQ7XG4gIH1cblxuICB0ZXh0ID0gdGV4dC50cmltKCkudG9Mb3dlckNhc2UoKTtcblxuICBpZiAodGV4dC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodGV4dENyaXRlcmlhLnJlcGVhdGluZykge1xuICAgIHJldHVybiB0ZXh0WzBdID09PSB0ZXh0Q3JpdGVyaWEua2V5c1swXTtcbiAgfVxuXG4gIHJldHVybiB0ZXh0LmluZGV4T2YodGV4dENyaXRlcmlhLmtleXMuam9pbignJykpID09PSAwO1xufVxuXG5mdW5jdGlvbiBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHRyYXZlcnNhbEZ1bmN0aW9uLCB0ZXh0Q3JpdGVyaWEpIHtcbiAgdmFyIHdyYXBwZWRPbmNlID0gZmFsc2U7XG4gIHZhciBuZXh0Rm9jdXMgPSB0cmF2ZXJzYWxGdW5jdGlvbihsaXN0LCBjdXJyZW50Rm9jdXMsIGN1cnJlbnRGb2N1cyA/IGRpc2FibGVMaXN0V3JhcCA6IGZhbHNlKTtcblxuICB3aGlsZSAobmV4dEZvY3VzKSB7XG4gICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wLlxuICAgIGlmIChuZXh0Rm9jdXMgPT09IGxpc3QuZmlyc3RDaGlsZCkge1xuICAgICAgaWYgKHdyYXBwZWRPbmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgd3JhcHBlZE9uY2UgPSB0cnVlO1xuICAgIH0gLy8gU2FtZSBsb2dpYyBhcyB1c2VBdXRvY29tcGxldGUuanNcblxuXG4gICAgdmFyIG5leHRGb2N1c0Rpc2FibGVkID0gZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSA/IGZhbHNlIDogbmV4dEZvY3VzLmRpc2FibGVkIHx8IG5leHRGb2N1cy5nZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnKSA9PT0gJ3RydWUnO1xuXG4gICAgaWYgKCFuZXh0Rm9jdXMuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpIHx8ICF0ZXh0Q3JpdGVyaWFNYXRjaGVzKG5leHRGb2N1cywgdGV4dENyaXRlcmlhKSB8fCBuZXh0Rm9jdXNEaXNhYmxlZCkge1xuICAgICAgLy8gTW92ZSB0byB0aGUgbmV4dCBlbGVtZW50LlxuICAgICAgbmV4dEZvY3VzID0gdHJhdmVyc2FsRnVuY3Rpb24obGlzdCwgbmV4dEZvY3VzLCBkaXNhYmxlTGlzdFdyYXApO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0Rm9jdXMuZm9jdXMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbn1cblxudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VFZmZlY3QgOiBSZWFjdC51c2VMYXlvdXRFZmZlY3Q7XG4vKipcbiAqIEEgcGVybWFuZW50bHkgZGlzcGxheWVkIG1lbnUgZm9sbG93aW5nIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS1wcmFjdGljZXMvI21lbnVidXR0b24uXG4gKiBJdCdzIGV4cG9zZWQgdG8gaGVscCBjdXN0b21pemF0aW9uIG9mIHRoZSBbYE1lbnVgXSgvYXBpL21lbnUvKSBjb21wb25lbnQuIElmIHlvdVxuICogdXNlIGl0IHNlcGFyYXRlbHkgeW91IG5lZWQgdG8gbW92ZSBmb2N1cyBpbnRvIHRoZSBjb21wb25lbnQgbWFudWFsbHkuIE9uY2VcbiAqIHRoZSBmb2N1cyBpcyBwbGFjZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgaXQgaXMgZnVsbHkga2V5Ym9hcmQgYWNjZXNzaWJsZS5cbiAqL1xuXG52YXIgTWVudUxpc3QgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1lbnVMaXN0KHByb3BzLCByZWYpIHtcbiAgdmFyIGFjdGlvbnMgPSBwcm9wcy5hY3Rpb25zLFxuICAgICAgX3Byb3BzJGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGF1dG9Gb2N1cyA9IF9wcm9wcyRhdXRvRm9jdXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGF1dG9Gb2N1cyxcbiAgICAgIF9wcm9wcyRhdXRvRm9jdXNJdGVtID0gcHJvcHMuYXV0b0ZvY3VzSXRlbSxcbiAgICAgIGF1dG9Gb2N1c0l0ZW0gPSBfcHJvcHMkYXV0b0ZvY3VzSXRlbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXV0b0ZvY3VzSXRlbSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZGlzYWJsZWRJdGVtc0YgPSBwcm9wcy5kaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLFxuICAgICAgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSA9IF9wcm9wcyRkaXNhYmxlZEl0ZW1zRiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWRJdGVtc0YsXG4gICAgICBfcHJvcHMkZGlzYWJsZUxpc3RXcmEgPSBwcm9wcy5kaXNhYmxlTGlzdFdyYXAsXG4gICAgICBkaXNhYmxlTGlzdFdyYXAgPSBfcHJvcHMkZGlzYWJsZUxpc3RXcmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVMaXN0V3JhLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnc2VsZWN0ZWRNZW51JyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGlvbnNcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvRm9jdXNJdGVtXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlXCIsIFwiZGlzYWJsZUxpc3RXcmFwXCIsIFwib25LZXlEb3duXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIGxpc3RSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciB0ZXh0Q3JpdGVyaWFSZWYgPSBSZWFjdC51c2VSZWYoe1xuICAgIGtleXM6IFtdLFxuICAgIHJlcGVhdGluZzogdHJ1ZSxcbiAgICBwcmV2aW91c0tleU1hdGNoZWQ6IHRydWUsXG4gICAgbGFzdFRpbWU6IG51bGxcbiAgfSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBsaXN0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0sIFthdXRvRm9jdXNdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb25zLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyOiBmdW5jdGlvbiBhZGp1c3RTdHlsZUZvclNjcm9sbGJhcihjb250YWluZXJFbGVtZW50LCB0aGVtZSkge1xuICAgICAgICAvLyBMZXQncyBpZ25vcmUgdGhhdCBwaWVjZSBvZiBsb2dpYyBpZiB1c2VycyBhcmUgYWxyZWFkeSBvdmVycmlkaW5nIHRoZSB3aWR0aFxuICAgICAgICAvLyBvZiB0aGUgbWVudS5cbiAgICAgICAgdmFyIG5vRXhwbGljaXRXaWR0aCA9ICFsaXN0UmVmLmN1cnJlbnQuc3R5bGUud2lkdGg7XG5cbiAgICAgICAgaWYgKGNvbnRhaW5lckVsZW1lbnQuY2xpZW50SGVpZ2h0IDwgbGlzdFJlZi5jdXJyZW50LmNsaWVudEhlaWdodCAmJiBub0V4cGxpY2l0V2lkdGgpIHtcbiAgICAgICAgICB2YXIgc2Nyb2xsYmFyU2l6ZSA9IFwiXCIuY29uY2F0KGdldFNjcm9sbGJhclNpemUodHJ1ZSksIFwicHhcIik7XG4gICAgICAgICAgbGlzdFJlZi5jdXJyZW50LnN0eWxlW3RoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAncGFkZGluZ0xlZnQnIDogJ3BhZGRpbmdSaWdodCddID0gc2Nyb2xsYmFyU2l6ZTtcbiAgICAgICAgICBsaXN0UmVmLmN1cnJlbnQuc3R5bGUud2lkdGggPSBcImNhbGMoMTAwJSArIFwiLmNvbmNhdChzY3JvbGxiYXJTaXplLCBcIilcIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGlzdFJlZi5jdXJyZW50O1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcblxuICB2YXIgaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICB2YXIgbGlzdCA9IGxpc3RSZWYuY3VycmVudDtcbiAgICB2YXIga2V5ID0gZXZlbnQua2V5O1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtFbGVtZW50fSAtIHdpbGwgYWx3YXlzIGJlIGRlZmluZWQgc2luY2Ugd2UgYXJlIGluIGEga2V5ZG93biBoYW5kbGVyXG4gICAgICogYXR0YWNoZWQgdG8gYW4gZWxlbWVudC4gQSBrZXlkb3duIGV2ZW50IGlzIGVpdGhlciBkaXNwYXRjaGVkIHRvIHRoZSBhY3RpdmVFbGVtZW50XG4gICAgICogb3IgZG9jdW1lbnQuYm9keSBvciBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuIE9ubHkgdGhlIGZpcnN0IGNhc2Ugd2lsbFxuICAgICAqIHRyaWdnZXIgdGhpcyBzcGVjaWZpYyBoYW5kbGVyLlxuICAgICAqL1xuXG4gICAgdmFyIGN1cnJlbnRGb2N1cyA9IG93bmVyRG9jdW1lbnQobGlzdCkuYWN0aXZlRWxlbWVudDtcblxuICAgIGlmIChrZXkgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAvLyBQcmV2ZW50IHNjcm9sbCBvZiB0aGUgcGFnZVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnQXJyb3dVcCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHByZXZpb3VzSXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdIb21lJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBudWxsLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIG5leHRJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0VuZCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgbnVsbCwgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCBwcmV2aW91c0l0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNyaXRlcmlhID0gdGV4dENyaXRlcmlhUmVmLmN1cnJlbnQ7XG4gICAgICB2YXIgbG93ZXJLZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciBjdXJyVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgICBpZiAoY3JpdGVyaWEua2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFJlc2V0XG4gICAgICAgIGlmIChjdXJyVGltZSAtIGNyaXRlcmlhLmxhc3RUaW1lID4gNTAwKSB7XG4gICAgICAgICAgY3JpdGVyaWEua2V5cyA9IFtdO1xuICAgICAgICAgIGNyaXRlcmlhLnJlcGVhdGluZyA9IHRydWU7XG4gICAgICAgICAgY3JpdGVyaWEucHJldmlvdXNLZXlNYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChjcml0ZXJpYS5yZXBlYXRpbmcgJiYgbG93ZXJLZXkgIT09IGNyaXRlcmlhLmtleXNbMF0pIHtcbiAgICAgICAgICBjcml0ZXJpYS5yZXBlYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjcml0ZXJpYS5sYXN0VGltZSA9IGN1cnJUaW1lO1xuICAgICAgY3JpdGVyaWEua2V5cy5wdXNoKGxvd2VyS2V5KTtcbiAgICAgIHZhciBrZWVwRm9jdXNPbkN1cnJlbnQgPSBjdXJyZW50Rm9jdXMgJiYgIWNyaXRlcmlhLnJlcGVhdGluZyAmJiB0ZXh0Q3JpdGVyaWFNYXRjaGVzKGN1cnJlbnRGb2N1cywgY3JpdGVyaWEpO1xuXG4gICAgICBpZiAoY3JpdGVyaWEucHJldmlvdXNLZXlNYXRjaGVkICYmIChrZWVwRm9jdXNPbkN1cnJlbnQgfHwgbW92ZUZvY3VzKGxpc3QsIGN1cnJlbnRGb2N1cywgZmFsc2UsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIG5leHRJdGVtLCBjcml0ZXJpYSkpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlT3duUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICBsaXN0UmVmLmN1cnJlbnQgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG4gIH0sIFtdKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoaGFuZGxlT3duUmVmLCByZWYpO1xuICAvKipcbiAgICogdGhlIGluZGV4IG9mIHRoZSBpdGVtIHNob3VsZCByZWNlaXZlIGZvY3VzXG4gICAqIGluIGEgYHZhcmlhbnQ9XCJzZWxlY3RlZE1lbnVcImAgaXQncyB0aGUgZmlyc3QgYHNlbGVjdGVkYCBpdGVtXG4gICAqIG90aGVyd2lzZSBpdCdzIHRoZSB2ZXJ5IGZpcnN0IGl0ZW0uXG4gICAqL1xuXG4gIHZhciBhY3RpdmVJdGVtSW5kZXggPSAtMTsgLy8gc2luY2Ugd2UgaW5qZWN0IGZvY3VzIHJlbGF0ZWQgcHJvcHMgaW50byBjaGlsZHJlbiB3ZSBoYXZlIHRvIGRvIGEgbG9va2FoZWFkXG4gIC8vIHRvIGNoZWNrIGlmIHRoZXJlIGlzIGEgYHNlbGVjdGVkYCBpdGVtLiBXZSdyZSBsb29raW5nIGZvciB0aGUgbGFzdCBgc2VsZWN0ZWRgXG4gIC8vIGl0ZW0gYW5kIHVzZSB0aGUgZmlyc3QgdmFsaWQgaXRlbSBhcyBhIGZhbGxiYWNrXG5cbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgTWVudSBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghY2hpbGQucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGlmICh2YXJpYW50ID09PSAnc2VsZWN0ZWRNZW51JyAmJiBjaGlsZC5wcm9wcy5zZWxlY3RlZCkge1xuICAgICAgICBhY3RpdmVJdGVtSW5kZXggPSBpbmRleDtcbiAgICAgIH0gZWxzZSBpZiAoYWN0aXZlSXRlbUluZGV4ID09PSAtMSkge1xuICAgICAgICBhY3RpdmVJdGVtSW5kZXggPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB2YXIgaXRlbXMgPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IGFjdGl2ZUl0ZW1JbmRleCkge1xuICAgICAgdmFyIG5ld0NoaWxkUHJvcHMgPSB7fTtcblxuICAgICAgaWYgKGF1dG9Gb2N1c0l0ZW0pIHtcbiAgICAgICAgbmV3Q2hpbGRQcm9wcy5hdXRvRm9jdXMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQucHJvcHMudGFiSW5kZXggPT09IHVuZGVmaW5lZCAmJiB2YXJpYW50ID09PSAnc2VsZWN0ZWRNZW51Jykge1xuICAgICAgICBuZXdDaGlsZFByb3BzLnRhYkluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgbmV3Q2hpbGRQcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpc3QsIF9leHRlbmRzKHtcbiAgICByb2xlOiBcIm1lbnVcIixcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgdGFiSW5kZXg6IGF1dG9Gb2N1cyA/IDAgOiAtMVxuICB9LCBvdGhlciksIGl0ZW1zKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTWVudUxpc3QucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogSWYgYHRydWVgLCB3aWxsIGZvY3VzIHRoZSBgW3JvbGU9XCJtZW51XCJdYCBjb250YWluZXIgYW5kIG1vdmUgaW50byB0YWIgb3JkZXIuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgZm9jdXMgdGhlIGZpcnN0IG1lbnVpdGVtIGlmIGB2YXJpYW50PVwibWVudVwiYCBvciBzZWxlY3RlZCBpdGVtXG4gICAqIGlmIGB2YXJpYW50PVwic2VsZWN0ZWRNZW51XCJgLlxuICAgKi9cbiAgYXV0b0ZvY3VzSXRlbTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE1lbnVMaXN0IGNvbnRlbnRzLCBub3JtYWxseSBgTWVudUl0ZW1gcy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgYWxsb3cgZm9jdXMgb24gZGlzYWJsZWQgaXRlbXMuXG4gICAqL1xuICBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbWVudSBpdGVtcyB3aWxsIG5vdCB3cmFwIGZvY3VzLlxuICAgKi9cbiAgZGlzYWJsZUxpc3RXcmFwOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLiBVc2UgYG1lbnVgIHRvIHByZXZlbnQgc2VsZWN0ZWQgaXRlbXMgZnJvbSBpbXBhY3RpbmcgdGhlIGluaXRpYWwgZm9jdXNcbiAgICogYW5kIHRoZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgcmVsYXRpdmUgdG8gdGhlIGFuY2hvciBlbGVtZW50LlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnbWVudScsICdzZWxlY3RlZE1lbnUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBNZW51TGlzdDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgSFRNTEVsZW1lbnRUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJy4uL1BvcG92ZXInO1xuaW1wb3J0IE1lbnVMaXN0IGZyb20gJy4uL01lbnVMaXN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4uL3V0aWxzL3NldFJlZic7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbnZhciBSVExfT1JJR0lOID0ge1xuICB2ZXJ0aWNhbDogJ3RvcCcsXG4gIGhvcml6b250YWw6ICdyaWdodCdcbn07XG52YXIgTFRSX09SSUdJTiA9IHtcbiAgdmVydGljYWw6ICd0b3AnLFxuICBob3Jpem9udGFsOiAnbGVmdCdcbn07XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50LiAqL1xuICBwYXBlcjoge1xuICAgIC8vIHNwZWNaOiBUaGUgbWF4aW11bSBoZWlnaHQgb2YgYSBzaW1wbGUgbWVudSBzaG91bGQgYmUgb25lIG9yIG1vcmUgcm93cyBsZXNzIHRoYW4gdGhlIHZpZXdcbiAgICAvLyBoZWlnaHQuIFRoaXMgZW5zdXJlcyBhIHRhcGFibGUgYXJlYSBvdXRzaWRlIG9mIHRoZSBzaW1wbGUgbWVudSB3aXRoIHdoaWNoIHRvIGRpc21pc3NcbiAgICAvLyB0aGUgbWVudS5cbiAgICBtYXhIZWlnaHQ6ICdjYWxjKDEwMCUgLSA5NnB4KScsXG4gICAgLy8gQWRkIGlPUyBtb21lbnR1bSBzY3JvbGxpbmcuXG4gICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCdcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYExpc3RgIGNvbXBvbmVudCB2aWEgYE1lbnVMaXN0YC4gKi9cbiAgbGlzdDoge1xuICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgb3V0bGluZTogMFxuICB9XG59O1xudmFyIE1lbnUgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1lbnUocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGF1dG9Gb2N1cyA9IF9wcm9wcyRhdXRvRm9jdXMgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkYXV0b0ZvY3VzLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJGRpc2FibGVBdXRvRm9jID0gcHJvcHMuZGlzYWJsZUF1dG9Gb2N1c0l0ZW0sXG4gICAgICBkaXNhYmxlQXV0b0ZvY3VzSXRlbSA9IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MsXG4gICAgICBfcHJvcHMkTWVudUxpc3RQcm9wcyA9IHByb3BzLk1lbnVMaXN0UHJvcHMsXG4gICAgICBNZW51TGlzdFByb3BzID0gX3Byb3BzJE1lbnVMaXN0UHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJE1lbnVMaXN0UHJvcHMsXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW4sXG4gICAgICBfcHJvcHMkUGFwZXJQcm9wcyA9IHByb3BzLlBhcGVyUHJvcHMsXG4gICAgICBQYXBlclByb3BzID0gX3Byb3BzJFBhcGVyUHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJFBhcGVyUHJvcHMsXG4gICAgICBQb3BvdmVyQ2xhc3NlcyA9IHByb3BzLlBvcG92ZXJDbGFzc2VzLFxuICAgICAgX3Byb3BzJHRyYW5zaXRpb25EdXJhID0gcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX3Byb3BzJHRyYW5zaXRpb25EdXJhID09PSB2b2lkIDAgPyAnYXV0bycgOiBfcHJvcHMkdHJhbnNpdGlvbkR1cmEsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzZWxlY3RlZE1lbnUnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXV0b0ZvY3VzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiZGlzYWJsZUF1dG9Gb2N1c0l0ZW1cIiwgXCJNZW51TGlzdFByb3BzXCIsIFwib25DbG9zZVwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlBvcG92ZXJDbGFzc2VzXCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIGF1dG9Gb2N1c0l0ZW0gPSBhdXRvRm9jdXMgJiYgIWRpc2FibGVBdXRvRm9jdXNJdGVtICYmIG9wZW47XG4gIHZhciBtZW51TGlzdEFjdGlvbnNSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBjb250ZW50QW5jaG9yUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIHZhciBnZXRDb250ZW50QW5jaG9yRWwgPSBmdW5jdGlvbiBnZXRDb250ZW50QW5jaG9yRWwoKSB7XG4gICAgcmV0dXJuIGNvbnRlbnRBbmNob3JSZWYuY3VycmVudDtcbiAgfTtcblxuICB2YXIgaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZykge1xuICAgIGlmIChtZW51TGlzdEFjdGlvbnNSZWYuY3VycmVudCkge1xuICAgICAgbWVudUxpc3RBY3Rpb25zUmVmLmN1cnJlbnQuYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXIoZWxlbWVudCwgdGhlbWUpO1xuICAgIH1cblxuICAgIGlmIChvbkVudGVyaW5nKSB7XG4gICAgICBvbkVudGVyaW5nKGVsZW1lbnQsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUxpc3RLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlTGlzdEtleURvd24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnVGFiJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ3RhYktleURvd24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiB0aGUgaW5kZXggb2YgdGhlIGl0ZW0gc2hvdWxkIHJlY2VpdmUgZm9jdXNcbiAgICogaW4gYSBgdmFyaWFudD1cInNlbGVjdGVkTWVudVwiYCBpdCdzIHRoZSBmaXJzdCBgc2VsZWN0ZWRgIGl0ZW1cbiAgICogb3RoZXJ3aXNlIGl0J3MgdGhlIHZlcnkgZmlyc3QgaXRlbS5cbiAgICovXG5cblxuICB2YXIgYWN0aXZlSXRlbUluZGV4ID0gLTE7IC8vIHNpbmNlIHdlIGluamVjdCBmb2N1cyByZWxhdGVkIHByb3BzIGludG8gY2hpbGRyZW4gd2UgaGF2ZSB0byBkbyBhIGxvb2thaGVhZFxuICAvLyB0byBjaGVjayBpZiB0aGVyZSBpcyBhIGBzZWxlY3RlZGAgaXRlbS4gV2UncmUgbG9va2luZyBmb3IgdGhlIGxhc3QgYHNlbGVjdGVkYFxuICAvLyBpdGVtIGFuZCB1c2UgdGhlIGZpcnN0IHZhbGlkIGl0ZW0gYXMgYSBmYWxsYmFja1xuXG4gIFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgTWVudSBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghY2hpbGQucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGlmICh2YXJpYW50ICE9PSBcIm1lbnVcIiAmJiBjaGlsZC5wcm9wcy5zZWxlY3RlZCkge1xuICAgICAgICBhY3RpdmVJdGVtSW5kZXggPSBpbmRleDtcbiAgICAgIH0gZWxzZSBpZiAoYWN0aXZlSXRlbUluZGV4ID09PSAtMSkge1xuICAgICAgICBhY3RpdmVJdGVtSW5kZXggPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB2YXIgaXRlbXMgPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IGFjdGl2ZUl0ZW1JbmRleCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihpbnN0YW5jZSkge1xuICAgICAgICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgICAgICAgY29udGVudEFuY2hvclJlZi5jdXJyZW50ID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuICAgICAgICAgIHNldFJlZihjaGlsZC5yZWYsIGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBvcG92ZXIsIF9leHRlbmRzKHtcbiAgICBnZXRDb250ZW50QW5jaG9yRWw6IGdldENvbnRlbnRBbmNob3JFbCxcbiAgICBjbGFzc2VzOiBQb3BvdmVyQ2xhc3NlcyxcbiAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIGFuY2hvck9yaWdpbjogdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IFJUTF9PUklHSU4gOiBMVFJfT1JJR0lOLFxuICAgIHRyYW5zZm9ybU9yaWdpbjogdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/IFJUTF9PUklHSU4gOiBMVFJfT1JJR0lOLFxuICAgIFBhcGVyUHJvcHM6IF9leHRlbmRzKF9leHRlbmRzKHt9LCBQYXBlclByb3BzKSwge30sIHtcbiAgICAgIGNsYXNzZXM6IF9leHRlbmRzKF9leHRlbmRzKHt9LCBQYXBlclByb3BzLmNsYXNzZXMpLCB7fSwge1xuICAgICAgICByb290OiBjbGFzc2VzLnBhcGVyXG4gICAgICB9KVxuICAgIH0pLFxuICAgIG9wZW46IG9wZW4sXG4gICAgcmVmOiByZWYsXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNZW51TGlzdCwgX2V4dGVuZHMoe1xuICAgIG9uS2V5RG93bjogaGFuZGxlTGlzdEtleURvd24sXG4gICAgYWN0aW9uczogbWVudUxpc3RBY3Rpb25zUmVmLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzICYmIChhY3RpdmVJdGVtSW5kZXggPT09IC0xIHx8IGRpc2FibGVBdXRvRm9jdXNJdGVtKSxcbiAgICBhdXRvRm9jdXNJdGVtOiBhdXRvRm9jdXNJdGVtLFxuICAgIHZhcmlhbnQ6IHZhcmlhbnRcbiAgfSwgTWVudUxpc3RQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmxpc3QsIE1lbnVMaXN0UHJvcHMuY2xhc3NOYW1lKVxuICB9KSwgaXRlbXMpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTWVudS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIEhUTUwgZWxlbWVudCwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXQuXG4gICAqIEl0J3MgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBtZW51LlxuICAgKi9cbiAgYW5jaG9yRWw6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgIChEZWZhdWx0KSB3aWxsIGZvY3VzIHRoZSBgW3JvbGU9XCJtZW51XCJdYCBpZiBubyBmb2N1c2FibGUgY2hpbGQgaXMgZm91bmQuIERpc2FibGVkXG4gICAqIGNoaWxkcmVuIGFyZSBub3QgZm9jdXNhYmxlLiBJZiB5b3Ugc2V0IHRoaXMgcHJvcCB0byBgZmFsc2VgIGZvY3VzIHdpbGwgYmUgcGxhY2VkXG4gICAqIG9uIHRoZSBwYXJlbnQgbW9kYWwgY29udGFpbmVyLiBUaGlzIGhhcyBzZXZlcmUgYWNjZXNzaWJpbGl0eSBpbXBsaWNhdGlvbnNcbiAgICogYW5kIHNob3VsZCBvbmx5IGJlIGNvbnNpZGVyZWQgaWYgeW91IG1hbmFnZSBmb2N1cyBvdGhlcndpc2UuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBNZW51IGNvbnRlbnRzLCBub3JtYWxseSBgTWVudUl0ZW1gcy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBXaGVuIG9wZW5pbmcgdGhlIG1lbnUgd2lsbCBub3QgZm9jdXMgdGhlIGFjdGl2ZSBpdGVtIGJ1dCB0aGUgYFtyb2xlPVwibWVudVwiXWBcbiAgICogdW5sZXNzIGBhdXRvRm9jdXNgIGlzIGFsc28gc2V0IHRvIGBmYWxzZWAuIE5vdCB1c2luZyB0aGUgZGVmYXVsdCBtZWFucyBub3RcbiAgICogZm9sbG93aW5nIFdBSS1BUklBIGF1dGhvcmluZyBwcmFjdGljZXMuIFBsZWFzZSBiZSBjb25zaWRlcmF0ZSBhYm91dCBwb3NzaWJsZVxuICAgKiBhY2Nlc3NpYmlsaXR5IGltcGxpY2F0aW9ucy5cbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXNJdGVtOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BNZW51TGlzdGBdKC9hcGkvbWVudS1saXN0LykgZWxlbWVudC5cbiAgICovXG4gIE1lbnVMaXN0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAsIGBcInRhYktleURvd25cImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBNZW51IGVudGVycy5cbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNZW51IGhhcyBlbnRlcmVkLlxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTWVudSBpcyBlbnRlcmluZy5cbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE1lbnUgZXhpdHMuXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNZW51IGhhcyBleGl0ZWQuXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1lbnUgaXMgZXhpdGluZy5cbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1lbnUgaXMgdmlzaWJsZS5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIGBjbGFzc2VzYCBwcm9wIGFwcGxpZWQgdG8gdGhlIFtgUG9wb3ZlcmBdKC9hcGkvcG9wb3Zlci8pIGVsZW1lbnQuXG4gICAqL1xuICBQb3BvdmVyQ2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGxlbmd0aCBvZiB0aGUgdHJhbnNpdGlvbiBpbiBgbXNgLCBvciAnYXV0bydcbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuIFVzZSBgbWVudWAgdG8gcHJldmVudCBzZWxlY3RlZCBpdGVtcyBmcm9tIGltcGFjdGluZyB0aGUgaW5pdGlhbCBmb2N1c1xuICAgKiBhbmQgdGhlIHZlcnRpY2FsIGFsaWdubWVudCByZWxhdGl2ZSB0byB0aGUgYW5jaG9yIGVsZW1lbnQuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydtZW51JywgJ3NlbGVjdGVkTWVudSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlNZW51J1xufSkoTWVudSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBNZW51IGZyb20gJy4uL01lbnUvTWVudSc7XG5pbXBvcnQgeyBpc0ZpbGxlZCB9IGZyb20gJy4uL0lucHV0QmFzZS91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VDb250cm9sbGVkIGZyb20gJy4uL3V0aWxzL3VzZUNvbnRyb2xsZWQnO1xuXG5mdW5jdGlvbiBhcmVFcXVhbFZhbHVlcyhhLCBiKSB7XG4gIGlmIChfdHlwZW9mKGIpID09PSAnb2JqZWN0JyAmJiBiICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH1cblxuICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkoZGlzcGxheSkge1xuICByZXR1cm4gZGlzcGxheSA9PSBudWxsIHx8IHR5cGVvZiBkaXNwbGF5ID09PSAnc3RyaW5nJyAmJiAhZGlzcGxheS50cmltKCk7XG59XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuXG52YXIgU2VsZWN0SW5wdXQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNlbGVjdElucHV0KHByb3BzLCByZWYpIHtcbiAgdmFyIGFyaWFMYWJlbCA9IHByb3BzWydhcmlhLWxhYmVsJ10sXG4gICAgICBhdXRvRm9jdXMgPSBwcm9wcy5hdXRvRm9jdXMsXG4gICAgICBhdXRvV2lkdGggPSBwcm9wcy5hdXRvV2lkdGgsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzcGxheUVtcHR5ID0gcHJvcHMuZGlzcGxheUVtcHR5LFxuICAgICAgSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBpbnB1dFJlZlByb3AgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIGxhYmVsSWQgPSBwcm9wcy5sYWJlbElkLFxuICAgICAgX3Byb3BzJE1lbnVQcm9wcyA9IHByb3BzLk1lbnVQcm9wcyxcbiAgICAgIE1lbnVQcm9wcyA9IF9wcm9wcyRNZW51UHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJE1lbnVQcm9wcyxcbiAgICAgIG11bHRpcGxlID0gcHJvcHMubXVsdGlwbGUsXG4gICAgICBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgb25PcGVuID0gcHJvcHMub25PcGVuLFxuICAgICAgb3BlblByb3AgPSBwcm9wcy5vcGVuLFxuICAgICAgcmVhZE9ubHkgPSBwcm9wcy5yZWFkT25seSxcbiAgICAgIHJlbmRlclZhbHVlID0gcHJvcHMucmVuZGVyVmFsdWUsXG4gICAgICByZXF1aXJlZCA9IHByb3BzLnJlcXVpcmVkLFxuICAgICAgX3Byb3BzJFNlbGVjdERpc3BsYXlQID0gcHJvcHMuU2VsZWN0RGlzcGxheVByb3BzLFxuICAgICAgU2VsZWN0RGlzcGxheVByb3BzID0gX3Byb3BzJFNlbGVjdERpc3BsYXlQID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRTZWxlY3REaXNwbGF5UCxcbiAgICAgIHRhYkluZGV4UHJvcCA9IHByb3BzLnRhYkluZGV4LFxuICAgICAgdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB2YWx1ZVByb3AgPSBwcm9wcy52YWx1ZSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3N0YW5kYXJkJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFyaWEtbGFiZWxcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc3BsYXlFbXB0eVwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcImxhYmVsSWRcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWx0aXBsZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbkZvY3VzXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcInJlYWRPbmx5XCIsIFwicmVuZGVyVmFsdWVcIiwgXCJyZXF1aXJlZFwiLCBcIlNlbGVjdERpc3BsYXlQcm9wc1wiLCBcInRhYkluZGV4XCIsIFwidHlwZVwiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIF91c2VDb250cm9sbGVkID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogdmFsdWVQcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSxcbiAgICBuYW1lOiAnU2VsZWN0J1xuICB9KSxcbiAgICAgIF91c2VDb250cm9sbGVkMiA9IF9zbGljZWRUb0FycmF5KF91c2VDb250cm9sbGVkLCAyKSxcbiAgICAgIHZhbHVlID0gX3VzZUNvbnRyb2xsZWQyWzBdLFxuICAgICAgc2V0VmFsdWUgPSBfdXNlQ29udHJvbGxlZDJbMV07XG5cbiAgdmFyIGlucHV0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShudWxsKSxcbiAgICAgIGRpc3BsYXlOb2RlID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0RGlzcGxheU5vZGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYob3BlblByb3AgIT0gbnVsbCksXG4gICAgICBpc09wZW5Db250cm9sbGVkID0gX1JlYWN0JHVzZVJlZi5jdXJyZW50O1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUyID0gUmVhY3QudXNlU3RhdGUoKSxcbiAgICAgIG1lbnVNaW5XaWR0aFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldE1lbnVNaW5XaWR0aFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMyA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIG9wZW5TdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTNbMF0sXG4gICAgICBzZXRPcGVuU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUzWzFdO1xuXG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKHJlZiwgaW5wdXRSZWZQcm9wKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShoYW5kbGVSZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9jdXM6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgICBkaXNwbGF5Tm9kZS5mb2N1cygpO1xuICAgICAgfSxcbiAgICAgIG5vZGU6IGlucHV0UmVmLmN1cnJlbnQsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9O1xuICB9LCBbZGlzcGxheU5vZGUsIHZhbHVlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGF1dG9Gb2N1cyAmJiBkaXNwbGF5Tm9kZSkge1xuICAgICAgZGlzcGxheU5vZGUuZm9jdXMoKTtcbiAgICB9XG4gIH0sIFthdXRvRm9jdXMsIGRpc3BsYXlOb2RlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRpc3BsYXlOb2RlKSB7XG4gICAgICB2YXIgbGFiZWwgPSBvd25lckRvY3VtZW50KGRpc3BsYXlOb2RlKS5xdWVyeVNlbGVjdG9yKFwiI1wiLmNvbmNhdChsYWJlbElkKSk7XG5cbiAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKGdldFNlbGVjdGlvbigpLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICBkaXNwbGF5Tm9kZS5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxhYmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2xhYmVsSWQsIGRpc3BsYXlOb2RlXSk7XG5cbiAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShvcGVuLCBldmVudCkge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBpZiAob25PcGVuKSB7XG4gICAgICAgIG9uT3BlbihldmVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoIWlzT3BlbkNvbnRyb2xsZWQpIHtcbiAgICAgIHNldE1lbnVNaW5XaWR0aFN0YXRlKGF1dG9XaWR0aCA/IG51bGwgOiBkaXNwbGF5Tm9kZS5jbGllbnRXaWR0aCk7XG4gICAgICBzZXRPcGVuU3RhdGUob3Blbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdC1jbGlja1xuICAgIGlmIChldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEhpamFjayB0aGUgZGVmYXVsdCBmb2N1cyBiZWhhdmlvci5cblxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBkaXNwbGF5Tm9kZS5mb2N1cygpO1xuICAgIHVwZGF0ZSh0cnVlLCBldmVudCk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNsb3NlID0gZnVuY3Rpb24gaGFuZGxlQ2xvc2UoZXZlbnQpIHtcbiAgICB1cGRhdGUoZmFsc2UsIGV2ZW50KTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSXRlbUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlSXRlbUNsaWNrKGNoaWxkKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFtdWx0aXBsZSkge1xuICAgICAgICB1cGRhdGUoZmFsc2UsIGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld1ZhbHVlO1xuXG4gICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZSkgOiBbXTtcbiAgICAgICAgdmFyIGl0ZW1JbmRleCA9IHZhbHVlLmluZGV4T2YoY2hpbGQucHJvcHMudmFsdWUpO1xuXG4gICAgICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgbmV3VmFsdWUucHVzaChjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3VmFsdWUuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY2hpbGQucHJvcHMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgIGNoaWxkLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWUgPT09IG5ld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgZXZlbnQucGVyc2lzdCgpOyAvLyBQcmVhY3Qgc3VwcG9ydCwgdGFyZ2V0IGlzIHJlYWQgb25seSBwcm9wZXJ0eSBvbiBhIG5hdGl2ZSBldmVudC5cblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvbkNoYW5nZShldmVudCwgY2hpbGQpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKCFyZWFkT25seSkge1xuICAgICAgdmFyIHZhbGlkS2V5cyA9IFsnICcsICdBcnJvd1VwJywgJ0Fycm93RG93bicsIC8vIFRoZSBuYXRpdmUgc2VsZWN0IGRvZXNuJ3QgcmVzcG9uZCB0byBlbnRlciBvbiBNYWNPUywgYnV0IGl0J3MgcmVjb21tZW5kZWQgYnlcbiAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS1wcmFjdGljZXMvZXhhbXBsZXMvbGlzdGJveC9saXN0Ym94LWNvbGxhcHNpYmxlLmh0bWxcbiAgICAgICdFbnRlciddO1xuXG4gICAgICBpZiAodmFsaWRLZXlzLmluZGV4T2YoZXZlbnQua2V5KSAhPT0gLTEpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdXBkYXRlKHRydWUsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIG9wZW4gPSBkaXNwbGF5Tm9kZSAhPT0gbnVsbCAmJiAoaXNPcGVuQ29udHJvbGxlZCA/IG9wZW5Qcm9wIDogb3BlblN0YXRlKTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICAvLyBpZiBvcGVuIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvblxuICAgIGlmICghb3BlbiAmJiBvbkJsdXIpIHtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTsgLy8gUHJlYWN0IHN1cHBvcnQsIHRhcmdldCBpcyByZWFkIG9ubHkgcHJvcGVydHkgb24gYSBuYXRpdmUgZXZlbnQuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgJ3RhcmdldCcsIHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBkZWxldGUgb3RoZXJbJ2FyaWEtaW52YWxpZCddO1xuICB2YXIgZGlzcGxheTtcbiAgdmFyIGRpc3BsYXlTaW5nbGU7XG4gIHZhciBkaXNwbGF5TXVsdGlwbGUgPSBbXTtcbiAgdmFyIGNvbXB1dGVEaXNwbGF5ID0gZmFsc2U7XG4gIHZhciBmb3VuZE1hdGNoID0gZmFsc2U7IC8vIE5vIG5lZWQgdG8gZGlzcGxheSBhbnkgdmFsdWUgaWYgdGhlIGZpZWxkIGlzIGVtcHR5LlxuXG4gIGlmIChpc0ZpbGxlZCh7XG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pIHx8IGRpc3BsYXlFbXB0eSkge1xuICAgIGlmIChyZW5kZXJWYWx1ZSkge1xuICAgICAgZGlzcGxheSA9IHJlbmRlclZhbHVlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcHV0ZURpc3BsYXkgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpdGVtcyA9IFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaXNGcmFnbWVudChjaGlsZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIFNlbGVjdCBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzZWxlY3RlZDtcblxuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiBUaGUgYHZhbHVlYCBwcm9wIG11c3QgYmUgYW4gYXJyYXkgJyArICd3aGVuIHVzaW5nIHRoZSBgU2VsZWN0YCBjb21wb25lbnQgd2l0aCBgbXVsdGlwbGVgLicpO1xuICAgICAgfVxuXG4gICAgICBzZWxlY3RlZCA9IHZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIGFyZUVxdWFsVmFsdWVzKHYsIGNoaWxkLnByb3BzLnZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheU11bHRpcGxlLnB1c2goY2hpbGQucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZCA9IGFyZUVxdWFsVmFsdWVzKHZhbHVlLCBjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICAgIGlmIChzZWxlY3RlZCAmJiBjb21wdXRlRGlzcGxheSkge1xuICAgICAgICBkaXNwbGF5U2luZ2xlID0gY2hpbGQucHJvcHMuY2hpbGRyZW47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICBmb3VuZE1hdGNoID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAnYXJpYS1zZWxlY3RlZCc6IHNlbGVjdGVkID8gJ3RydWUnIDogdW5kZWZpbmVkLFxuICAgICAgb25DbGljazogaGFuZGxlSXRlbUNsaWNrKGNoaWxkKSxcbiAgICAgIG9uS2V5VXA6IGZ1bmN0aW9uIG9uS2V5VXAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICAgICAgLy8gb3RoZXJ3aXNlIG91ciBNZW51SXRlbXMgZGlzcGF0Y2hlcyBhIGNsaWNrIGV2ZW50XG4gICAgICAgICAgLy8gaXQncyBub3QgYmVoYXZpb3Igb2YgdGhlIG5hdGl2ZSA8b3B0aW9uPiBhbmQgY2F1c2VzXG4gICAgICAgICAgLy8gdGhlIHNlbGVjdCB0byBjbG9zZSBpbW1lZGlhdGVseSBzaW5jZSB3ZSBvcGVuIG9uIHNwYWNlIGtleWRvd25cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoaWxkLnByb3BzLm9uS2V5VXApIHtcbiAgICAgICAgICBjaGlsZC5wcm9wcy5vbktleVVwKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIC8vIFRoZSB2YWx1ZSBpcyBtb3N0IGxpa2VseSBub3QgYSB2YWxpZCBIVE1MIGF0dHJpYnV0ZS5cbiAgICAgICdkYXRhLXZhbHVlJzogY2hpbGQucHJvcHMudmFsdWUgLy8gSW5zdGVhZCwgd2UgcHJvdmlkZSBpdCBhcyBhIGRhdGEgYXR0cmlidXRlLlxuXG4gICAgfSk7XG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghZm91bmRNYXRjaCAmJiAhbXVsdGlwbGUgJiYgdmFsdWUgIT09ICcnKSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkLnByb3BzLnZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS53YXJuKFtcIk1hdGVyaWFsLVVJOiBZb3UgaGF2ZSBwcm92aWRlZCBhbiBvdXQtb2YtcmFuZ2UgdmFsdWUgYFwiLmNvbmNhdCh2YWx1ZSwgXCJgIGZvciB0aGUgc2VsZWN0IFwiKS5jb25jYXQobmFtZSA/IFwiKG5hbWU9XFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIpIFwiKSA6ICcnLCBcImNvbXBvbmVudC5cIiksIFwiQ29uc2lkZXIgcHJvdmlkaW5nIGEgdmFsdWUgdGhhdCBtYXRjaGVzIG9uZSBvZiB0aGUgYXZhaWxhYmxlIG9wdGlvbnMgb3IgJycuXCIsIFwiVGhlIGF2YWlsYWJsZSB2YWx1ZXMgYXJlIFwiLmNvbmNhdCh2YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgcmV0dXJuIHggIT0gbnVsbDtcbiAgICAgICAgfSkubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgcmV0dXJuIFwiYFwiLmNvbmNhdCh4LCBcImBcIik7XG4gICAgICAgIH0pLmpvaW4oJywgJykgfHwgJ1wiXCInLCBcIi5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbZm91bmRNYXRjaCwgY2hpbGRyZW4sIG11bHRpcGxlLCBuYW1lLCB2YWx1ZV0pO1xuICB9XG5cbiAgaWYgKGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgZGlzcGxheSA9IG11bHRpcGxlID8gZGlzcGxheU11bHRpcGxlLmpvaW4oJywgJykgOiBkaXNwbGF5U2luZ2xlO1xuICB9IC8vIEF2b2lkIHBlcmZvcm1pbmcgYSBsYXlvdXQgY29tcHV0YXRpb24gaW4gdGhlIHJlbmRlciBtZXRob2QuXG5cblxuICB2YXIgbWVudU1pbldpZHRoID0gbWVudU1pbldpZHRoU3RhdGU7XG5cbiAgaWYgKCFhdXRvV2lkdGggJiYgaXNPcGVuQ29udHJvbGxlZCAmJiBkaXNwbGF5Tm9kZSkge1xuICAgIG1lbnVNaW5XaWR0aCA9IGRpc3BsYXlOb2RlLmNsaWVudFdpZHRoO1xuICB9XG5cbiAgdmFyIHRhYkluZGV4O1xuXG4gIGlmICh0eXBlb2YgdGFiSW5kZXhQcm9wICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRhYkluZGV4ID0gdGFiSW5kZXhQcm9wO1xuICB9IGVsc2Uge1xuICAgIHRhYkluZGV4ID0gZGlzYWJsZWQgPyBudWxsIDogMDtcbiAgfVxuXG4gIHZhciBidXR0b25JZCA9IFNlbGVjdERpc3BsYXlQcm9wcy5pZCB8fCAobmFtZSA/IFwibXVpLWNvbXBvbmVudC1zZWxlY3QtXCIuY29uY2F0KG5hbWUpIDogdW5kZWZpbmVkKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgLy8gVE9ETyB2NTogbWVyZ2Ugcm9vdCBhbmQgc2VsZWN0XG4gICAgY2xhc3Nlcy5zZWxlY3QsIGNsYXNzZXMuc2VsZWN0TWVudSwgY2xhc3Nlc1t2YXJpYW50XSwgY2xhc3NOYW1lLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKSxcbiAgICByZWY6IHNldERpc3BsYXlOb2RlLFxuICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICByb2xlOiBcImJ1dHRvblwiLFxuICAgIFwiYXJpYS1kaXNhYmxlZFwiOiBkaXNhYmxlZCA/ICd0cnVlJyA6IHVuZGVmaW5lZCxcbiAgICBcImFyaWEtZXhwYW5kZWRcIjogb3BlbiA/ICd0cnVlJyA6IHVuZGVmaW5lZCxcbiAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJsaXN0Ym94XCIsXG4gICAgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCxcbiAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBbbGFiZWxJZCwgYnV0dG9uSWRdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJykgfHwgdW5kZWZpbmVkLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICBvbk1vdXNlRG93bjogZGlzYWJsZWQgfHwgcmVhZE9ubHkgPyBudWxsIDogaGFuZGxlTW91c2VEb3duLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkZvY3VzOiBvbkZvY3VzXG4gIH0sIFNlbGVjdERpc3BsYXlQcm9wcywge1xuICAgIC8vIFRoZSBpZCBpcyByZXF1aXJlZCBmb3IgcHJvcGVyIGExMXlcbiAgICBpZDogYnV0dG9uSWRcbiAgfSksIGlzRW1wdHkoZGlzcGxheSkgP1xuICAvKiNfX1BVUkVfXyovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXJcbiAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICBfX2h0bWw6ICcmIzgyMDM7J1xuICAgIH1cbiAgfSkgOiBkaXNwbGF5KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7XG4gICAgdmFsdWU6IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCcpIDogdmFsdWUsXG4gICAgbmFtZTogbmFtZSxcbiAgICByZWY6IGlucHV0UmVmLFxuICAgIHR5cGU6IFwiaGlkZGVuXCIsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXNcbiAgfSwgb3RoZXIpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkNvbXBvbmVudCwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmljb24sIGNsYXNzZXNbXCJpY29uXCIuY29uY2F0KGNhcGl0YWxpemUodmFyaWFudCkpXSwgb3BlbiAmJiBjbGFzc2VzLmljb25PcGVuLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKVxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudSwgX2V4dGVuZHMoe1xuICAgIGlkOiBcIm1lbnUtXCIuY29uY2F0KG5hbWUgfHwgJycpLFxuICAgIGFuY2hvckVsOiBkaXNwbGF5Tm9kZSxcbiAgICBvcGVuOiBvcGVuLFxuICAgIG9uQ2xvc2U6IGhhbmRsZUNsb3NlXG4gIH0sIE1lbnVQcm9wcywge1xuICAgIE1lbnVMaXN0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBsYWJlbElkLFxuICAgICAgcm9sZTogJ2xpc3Rib3gnLFxuICAgICAgZGlzYWJsZUxpc3RXcmFwOiB0cnVlXG4gICAgfSwgTWVudVByb3BzLk1lbnVMaXN0UHJvcHMpLFxuICAgIFBhcGVyUHJvcHM6IF9leHRlbmRzKF9leHRlbmRzKHt9LCBNZW51UHJvcHMuUGFwZXJQcm9wcyksIHt9LCB7XG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBtaW5XaWR0aDogbWVudU1pbldpZHRoXG4gICAgICB9LCBNZW51UHJvcHMuUGFwZXJQcm9wcyAhPSBudWxsID8gTWVudVByb3BzLlBhcGVyUHJvcHMuc3R5bGUgOiBudWxsKVxuICAgIH0pXG4gIH0pLCBpdGVtcykpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTZWxlY3RJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1sYWJlbCc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHdpZHRoIG9mIHRoZSBwb3BvdmVyIHdpbGwgYXV0b21hdGljYWxseSBiZSBzZXQgYWNjb3JkaW5nIHRvIHRoZSBpdGVtcyBpbnNpZGUgdGhlXG4gICAqIG1lbnUsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGF0IGxlYXN0IHRoZSB3aWR0aCBvZiB0aGUgc2VsZWN0IGlucHV0LlxuICAgKi9cbiAgYXV0b1dpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8TWVudUl0ZW0+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgc2VsZWN0IGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGVsZW1lbnQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3RlZCBpdGVtIGlzIGRpc3BsYXllZCBldmVuIGlmIGl0cyB2YWx1ZSBpcyBlbXB0eS5cbiAgICovXG4gIGRpc3BsYXlFbXB0eTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEltcGVyYXRpdmUgaGFuZGxlIGltcGxlbWVudGluZyBgeyB2YWx1ZTogVCwgbm9kZTogSFRNTEVsZW1lbnQsIGZvY3VzKCk6IHZvaWQgfWBcbiAgICogRXF1aXZhbGVudCB0byBgcmVmYFxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiBhbiBlbGVtZW50IHRoYXQgYWN0cyBhcyBhbiBhZGRpdGlvbmFsIGxhYmVsLiBUaGUgU2VsZWN0IHdpbGxcbiAgICogYmUgbGFiZWxsZWQgYnkgdGhlIGFkZGl0aW9uYWwgbGFiZWwgYW5kIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICovXG4gIGxhYmVsSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgTWVudWBdKC9hcGkvbWVudS8pIGVsZW1lbnQuXG4gICAqL1xuICBNZW51UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIG9yIGhpZGRlbiBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKGFueSkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY2hpbGRdIFRoZSByZWFjdCBlbGVtZW50IHRoYXQgd2FzIHNlbGVjdGVkLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDb250cm9sIGBzZWxlY3RgIG9wZW4gc3RhdGUuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIGB2YWx1ZWAgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHJldHVybnMge1JlYWN0Tm9kZX1cbiAgICovXG4gIHJlbmRlclZhbHVlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBjbGlja2FibGUgZGl2IGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3REaXNwbGF5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTZWxlY3RJbnB1dDsiLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcywgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDb250cm9sbGVkKF9yZWYpIHtcbiAgdmFyIGNvbnRyb2xsZWQgPSBfcmVmLmNvbnRyb2xsZWQsXG4gICAgICBkZWZhdWx0UHJvcCA9IF9yZWYuZGVmYXVsdCxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICBfcmVmJHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIHN0YXRlID0gX3JlZiRzdGF0ZSA9PT0gdm9pZCAwID8gJ3ZhbHVlJyA6IF9yZWYkc3RhdGU7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKSxcbiAgICAgIGlzQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFByb3ApLFxuICAgICAgdmFsdWVTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFZhbHVlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciB2YWx1ZSA9IGlzQ29udHJvbGxlZCA/IGNvbnRyb2xsZWQgOiB2YWx1ZVN0YXRlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0NvbnRyb2xsZWQgIT09IChjb250cm9sbGVkICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IEEgY29tcG9uZW50IGlzIGNoYW5naW5nIHRoZSBcIi5jb25jYXQoaXNDb250cm9sbGVkID8gJycgOiAndW4nLCBcImNvbnRyb2xsZWQgXCIpLmNvbmNhdChzdGF0ZSwgXCIgc3RhdGUgb2YgXCIpLmNvbmNhdChuYW1lLCBcIiB0byBiZSBcIikuY29uY2F0KGlzQ29udHJvbGxlZCA/ICd1bicgOiAnJywgXCJjb250cm9sbGVkLlwiKSwgJ0VsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLicsIFwiRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBcIi5jb25jYXQobmFtZSwgXCIgXCIpICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LicsIFwiVGhlIG5hdHVyZSBvZiB0aGUgc3RhdGUgaXMgZGV0ZXJtaW5lZCBkdXJpbmcgdGhlIGZpcnN0IHJlbmRlciwgaXQncyBjb25zaWRlcmVkIGNvbnRyb2xsZWQgaWYgdGhlIHZhbHVlIGlzIG5vdCBgdW5kZWZpbmVkYC5cIiwgJ01vcmUgaW5mbzogaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW2NvbnRyb2xsZWRdKTtcblxuICAgIHZhciBfUmVhY3QkdXNlUmVmMiA9IFJlYWN0LnVzZVJlZihkZWZhdWx0UHJvcCksXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IF9SZWFjdCR1c2VSZWYyLmN1cnJlbnQ7XG5cbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSAhPT0gZGVmYXVsdFByb3ApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgdGhlIGRlZmF1bHQgXCIuY29uY2F0KHN0YXRlLCBcIiBzdGF0ZSBvZiBhbiB1bmNvbnRyb2xsZWQgXCIpLmNvbmNhdChuYW1lLCBcIiBhZnRlciBiZWluZyBpbml0aWFsaXplZC4gXCIpICsgXCJUbyBzdXBwcmVzcyB0aGlzIHdhcm5pbmcgb3B0IHRvIHVzZSBhIGNvbnRyb2xsZWQgXCIuY29uY2F0KG5hbWUsIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtKU09OLnN0cmluZ2lmeShkZWZhdWx0UHJvcCldKTtcbiAgfVxuXG4gIHZhciBzZXRWYWx1ZUlmVW5jb250cm9sbGVkID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFt2YWx1ZSwgc2V0VmFsdWVJZlVuY29udHJvbGxlZF07XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNNyAxMGw1IDUgNS01elwiXG59KSwgJ0Fycm93RHJvcERvd24nKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBOYXRpdmVTZWxlY3RJbnB1dCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF0aXZlU2VsZWN0SW5wdXQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBpbnB1dFJlZiA9IHByb3BzLmlucHV0UmVmLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnc3RhbmRhcmQnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkXCIsIFwiSWNvbkNvbXBvbmVudFwiLCBcImlucHV0UmVmXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgLy8gVE9ETyB2NTogbWVyZ2Ugcm9vdCBhbmQgc2VsZWN0XG4gICAgY2xhc3Nlcy5zZWxlY3QsIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCksXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIHJlZjogaW5wdXRSZWYgfHwgcmVmXG4gIH0sIG90aGVyKSksIHByb3BzLm11bHRpcGxlID8gbnVsbCA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEljb25Db21wb25lbnQsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pY29uLCBjbGFzc2VzW1wiaWNvblwiLmNvbmNhdChjYXBpdGFsaXplKHZhcmlhbnQpKV0sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQpXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTmF0aXZlU2VsZWN0SW5wdXQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8b3B0aW9uPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBuYXRpdmUgc2VsZWN0IGVsZW1lbnQuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgb3IgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE5hdGl2ZVNlbGVjdElucHV0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgTmF0aXZlU2VsZWN0SW5wdXQgZnJvbSAnLi9OYXRpdmVTZWxlY3RJbnB1dCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgQXJyb3dEcm9wRG93bkljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24nO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL0lucHV0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNlbGVjdCBjb21wb25lbnQgYHJvb3RgIGNsYXNzLiAqL1xuICAgIHJvb3Q6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNlbGVjdCBjb21wb25lbnQgYHNlbGVjdGAgY2xhc3MuICovXG4gICAgc2VsZWN0OiB7XG4gICAgICAnLW1vei1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgICAgLy8gUmVzZXRcbiAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgICAvLyBSZXNldFxuICAgICAgLy8gV2hlbiBpbnRlcmFjdGluZyBxdWlja2x5LCB0aGUgdGV4dCBjYW4gZW5kIHVwIHNlbGVjdGVkLlxuICAgICAgLy8gTmF0aXZlIHNlbGVjdCBjYW4ndCBiZSBzZWxlY3RlZCBlaXRoZXIuXG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAvLyBSZXNldFxuICAgICAgbWluV2lkdGg6IDE2LFxuICAgICAgLy8gU28gaXQgZG9lc24ndCBjb2xsYXBzZS5cbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgJyY6Zm9jdXMnOiB7XG4gICAgICAgIC8vIFNob3cgdGhhdCBpdCdzIG5vdCBhbiB0ZXh0IGlucHV0XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4wNSknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wNSknLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDAgLy8gUmVzZXQgQ2hyb21lIHN0eWxlXG5cbiAgICAgIH0sXG4gICAgICAvLyBSZW1vdmUgSUUgMTEgYXJyb3dcbiAgICAgICcmOjotbXMtZXhwYW5kJzoge1xuICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICAgIH0sXG4gICAgICAnJlttdWx0aXBsZV0nOiB7XG4gICAgICAgIGhlaWdodDogJ2F1dG8nXG4gICAgICB9LFxuICAgICAgJyY6bm90KFttdWx0aXBsZV0pIG9wdGlvbiwgJjpub3QoW211bHRpcGxlXSkgb3B0Z3JvdXAnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyXG4gICAgICB9LFxuICAgICAgJyYmJzoge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IDI0XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzZWxlY3QgY29tcG9uZW50IGlmIGB2YXJpYW50PVwiZmlsbGVkXCJgLiAqL1xuICAgIGZpbGxlZDoge1xuICAgICAgJyYmJzoge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IDMyXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzZWxlY3QgY29tcG9uZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWQ6IHtcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgJyYmJzoge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IDMyXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzZWxlY3QgY29tcG9uZW50IGBzZWxlY3RNZW51YCBjbGFzcy4gKi9cbiAgICBzZWxlY3RNZW51OiB7XG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIC8vIFJlc2V0cyBmb3IgbXVsdHBpbGUgc2VsZWN0IHdpdGggY2hpcHNcbiAgICAgIG1pbkhlaWdodDogJzEuMTg3NmVtJyxcbiAgICAgIC8vIFJlcXVpcmVkIGZvciBzZWxlY3RcXHRleHQtZmllbGQgaGVpZ2h0IGNvbnNpc3RlbmN5XG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgc2VsZWN0IGNvbXBvbmVudCBgZGlzYWJsZWRgIGNsYXNzLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGNvbXBvbmVudC4gKi9cbiAgICBpY29uOiB7XG4gICAgICAvLyBXZSB1c2UgYSBwb3NpdGlvbiBhYnNvbHV0ZSBvdmVyIGEgZmxleGJveCBpbiBvcmRlciB0byBmb3J3YXJkIHRoZSBwb2ludGVyIGV2ZW50c1xuICAgICAgLy8gdG8gdGhlIGlucHV0IGFuZCB0byBzdXBwb3J0IHdyYXBwaW5nIHRhZ3MuLlxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogJ2NhbGMoNTAlIC0gMTJweCknLFxuICAgICAgLy8gQ2VudGVyIHZlcnRpY2FsbHlcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIC8vIERvbid0IGJsb2NrIHBvaW50ZXIgZXZlbnRzIG9uIHRoZSBzZWxlY3QgdW5kZXIgdGhlIGljb24uXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiBjb21wb25lbnQgaWYgdGhlIHBvcHVwIGlzIG9wZW4uICovXG4gICAgaWNvbk9wZW46IHtcbiAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiBjb21wb25lbnQgaWYgYHZhcmlhbnQ9XCJmaWxsZWRcImAuICovXG4gICAgaWNvbkZpbGxlZDoge1xuICAgICAgcmlnaHQ6IDdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gY29tcG9uZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgaWNvbk91dGxpbmVkOiB7XG4gICAgICByaWdodDogN1xuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmYXVsdElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXQsIG51bGwpO1xuLyoqXG4gKiBBbiBhbHRlcm5hdGl2ZSB0byBgPFNlbGVjdCBuYXRpdmUgLz5gIHdpdGggYSBtdWNoIHNtYWxsZXIgYnVuZGxlIHNpemUgZm9vdHByaW50LlxuICovXG5cbnZhciBOYXRpdmVTZWxlY3QgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdGl2ZVNlbGVjdChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBJY29uQ29tcG9uZW50ID0gX3Byb3BzJEljb25Db21wb25lbnQgPT09IHZvaWQgMCA/IEFycm93RHJvcERvd25JY29uIDogX3Byb3BzJEljb25Db21wb25lbnQsXG4gICAgICBfcHJvcHMkaW5wdXQgPSBwcm9wcy5pbnB1dCxcbiAgICAgIGlucHV0ID0gX3Byb3BzJGlucHV0ID09PSB2b2lkIDAgPyBkZWZhdWx0SW5wdXQgOiBfcHJvcHMkaW5wdXQsXG4gICAgICBpbnB1dFByb3BzID0gcHJvcHMuaW5wdXRQcm9wcyxcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFwiLCBcImlucHV0UHJvcHNcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICB2YXIgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCddXG4gIH0pO1xuICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGlucHV0LCBfZXh0ZW5kcyh7XG4gICAgLy8gTW9zdCBvZiB0aGUgbG9naWMgaXMgaW1wbGVtZW50ZWQgaW4gYE5hdGl2ZVNlbGVjdElucHV0YC5cbiAgICAvLyBUaGUgYFNlbGVjdGAgY29tcG9uZW50IGlzIGEgc2ltcGxlIEFQSSB3cmFwcGVyIHRvIGV4cG9zZSBzb21ldGhpbmcgYmV0dGVyIHRvIHBsYXkgd2l0aC5cbiAgICBpbnB1dENvbXBvbmVudDogTmF0aXZlU2VsZWN0SW5wdXQsXG4gICAgaW5wdXRQcm9wczogX2V4dGVuZHMoX2V4dGVuZHMoe1xuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICAgIEljb25Db21wb25lbnQ6IEljb25Db21wb25lbnQsXG4gICAgICB2YXJpYW50OiBmY3MudmFyaWFudCxcbiAgICAgIHR5cGU6IHVuZGVmaW5lZFxuICAgIH0sIGlucHV0UHJvcHMpLCBpbnB1dCA/IGlucHV0LnByb3BzLmlucHV0UHJvcHMgOiB7fSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTmF0aXZlU2VsZWN0LnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPG9wdGlvbj5gIGVsZW1lbnRzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBBbiBgSW5wdXRgIGVsZW1lbnQ7IGRvZXMgbm90IGhhdmUgdG8gYmUgYSBtYXRlcmlhbC11aSBzcGVjaWZpYyBgSW5wdXRgLlxuICAgKi9cbiAgaW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBBdHRyaWJ1dGVzIGFwcGxpZWQgdG8gdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS4gVGhlIERPTSBBUEkgY2FzdHMgdGhpcyB0byBhIHN0cmluZy5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5OYXRpdmVTZWxlY3QubXVpTmFtZSA9ICdTZWxlY3QnO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aU5hdGl2ZVNlbGVjdCdcbn0pKE5hdGl2ZVNlbGVjdCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IG1lcmdlQ2xhc3NlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJy4vU2VsZWN0SW5wdXQnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IEFycm93RHJvcERvd25JY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9JbnB1dCc7XG5pbXBvcnQgeyBzdHlsZXMgYXMgbmF0aXZlU2VsZWN0U3R5bGVzIH0gZnJvbSAnLi4vTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdCc7XG5pbXBvcnQgTmF0aXZlU2VsZWN0SW5wdXQgZnJvbSAnLi4vTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdElucHV0JztcbmltcG9ydCBGaWxsZWRJbnB1dCBmcm9tICcuLi9GaWxsZWRJbnB1dCc7XG5pbXBvcnQgT3V0bGluZWRJbnB1dCBmcm9tICcuLi9PdXRsaW5lZElucHV0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0gbmF0aXZlU2VsZWN0U3R5bGVzO1xuXG52YXIgX3JlZiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KElucHV0LCBudWxsKTtcblxudmFyIF9yZWYyID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmlsbGVkSW5wdXQsIG51bGwpO1xuXG52YXIgU2VsZWN0ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTZWxlY3QocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGF1dG9XaWR0aCA9IHByb3BzLmF1dG9XaWR0aCxcbiAgICAgIGF1dG9XaWR0aCA9IF9wcm9wcyRhdXRvV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGF1dG9XaWR0aCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRkaXNwbGF5RW1wdHkgPSBwcm9wcy5kaXNwbGF5RW1wdHksXG4gICAgICBkaXNwbGF5RW1wdHkgPSBfcHJvcHMkZGlzcGxheUVtcHR5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNwbGF5RW1wdHksXG4gICAgICBfcHJvcHMkSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBJY29uQ29tcG9uZW50ID0gX3Byb3BzJEljb25Db21wb25lbnQgPT09IHZvaWQgMCA/IEFycm93RHJvcERvd25JY29uIDogX3Byb3BzJEljb25Db21wb25lbnQsXG4gICAgICBpZCA9IHByb3BzLmlkLFxuICAgICAgaW5wdXQgPSBwcm9wcy5pbnB1dCxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIGxhYmVsSWQgPSBwcm9wcy5sYWJlbElkLFxuICAgICAgX3Byb3BzJGxhYmVsV2lkdGggPSBwcm9wcy5sYWJlbFdpZHRoLFxuICAgICAgbGFiZWxXaWR0aCA9IF9wcm9wcyRsYWJlbFdpZHRoID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGxhYmVsV2lkdGgsXG4gICAgICBNZW51UHJvcHMgPSBwcm9wcy5NZW51UHJvcHMsXG4gICAgICBfcHJvcHMkbXVsdGlwbGUgPSBwcm9wcy5tdWx0aXBsZSxcbiAgICAgIG11bHRpcGxlID0gX3Byb3BzJG11bHRpcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aXBsZSxcbiAgICAgIF9wcm9wcyRuYXRpdmUgPSBwcm9wcy5uYXRpdmUsXG4gICAgICBuYXRpdmUgPSBfcHJvcHMkbmF0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRuYXRpdmUsXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIG9uT3BlbiA9IHByb3BzLm9uT3BlbixcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgcmVuZGVyVmFsdWUgPSBwcm9wcy5yZW5kZXJWYWx1ZSxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wcyA9IHByb3BzLlNlbGVjdERpc3BsYXlQcm9wcyxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnRQcm9wcyA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnc3RhbmRhcmQnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXV0b1dpZHRoXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiZGlzcGxheUVtcHR5XCIsIFwiSWNvbkNvbXBvbmVudFwiLCBcImlkXCIsIFwiaW5wdXRcIiwgXCJpbnB1dFByb3BzXCIsIFwibGFiZWxcIiwgXCJsYWJlbElkXCIsIFwibGFiZWxXaWR0aFwiLCBcIk1lbnVQcm9wc1wiLCBcIm11bHRpcGxlXCIsIFwibmF0aXZlXCIsIFwib25DbG9zZVwiLCBcIm9uT3BlblwiLCBcIm9wZW5cIiwgXCJyZW5kZXJWYWx1ZVwiLCBcIlNlbGVjdERpc3BsYXlQcm9wc1wiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBpbnB1dENvbXBvbmVudCA9IG5hdGl2ZSA/IE5hdGl2ZVNlbGVjdElucHV0IDogU2VsZWN0SW5wdXQ7XG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG4gIHZhciBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWyd2YXJpYW50J11cbiAgfSk7XG4gIHZhciB2YXJpYW50ID0gZmNzLnZhcmlhbnQgfHwgdmFyaWFudFByb3BzO1xuICB2YXIgSW5wdXRDb21wb25lbnQgPSBpbnB1dCB8fCB7XG4gICAgc3RhbmRhcmQ6IF9yZWYsXG4gICAgb3V0bGluZWQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE91dGxpbmVkSW5wdXQsIHtcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIGxhYmVsV2lkdGg6IGxhYmVsV2lkdGhcbiAgICB9KSxcbiAgICBmaWxsZWQ6IF9yZWYyXG4gIH1bdmFyaWFudF07XG4gIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoSW5wdXRDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAvLyBNb3N0IG9mIHRoZSBsb2dpYyBpcyBpbXBsZW1lbnRlZCBpbiBgU2VsZWN0SW5wdXRgLlxuICAgIC8vIFRoZSBgU2VsZWN0YCBjb21wb25lbnQgaXMgYSBzaW1wbGUgQVBJIHdyYXBwZXIgdG8gZXhwb3NlIHNvbWV0aGluZyBiZXR0ZXIgdG8gcGxheSB3aXRoLlxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBpbnB1dFByb3BzOiBfZXh0ZW5kcyhfZXh0ZW5kcyhfZXh0ZW5kcyh7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICBJY29uQ29tcG9uZW50OiBJY29uQ29tcG9uZW50LFxuICAgICAgdmFyaWFudDogdmFyaWFudCxcbiAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgIC8vIFdlIHJlbmRlciBhIHNlbGVjdC4gV2UgY2FuIGlnbm9yZSB0aGUgdHlwZSBwcm92aWRlZCBieSB0aGUgYElucHV0YC5cbiAgICAgIG11bHRpcGxlOiBtdWx0aXBsZVxuICAgIH0sIG5hdGl2ZSA/IHtcbiAgICAgIGlkOiBpZFxuICAgIH0gOiB7XG4gICAgICBhdXRvV2lkdGg6IGF1dG9XaWR0aCxcbiAgICAgIGRpc3BsYXlFbXB0eTogZGlzcGxheUVtcHR5LFxuICAgICAgbGFiZWxJZDogbGFiZWxJZCxcbiAgICAgIE1lbnVQcm9wczogTWVudVByb3BzLFxuICAgICAgb25DbG9zZTogb25DbG9zZSxcbiAgICAgIG9uT3Blbjogb25PcGVuLFxuICAgICAgb3Blbjogb3BlbixcbiAgICAgIHJlbmRlclZhbHVlOiByZW5kZXJWYWx1ZSxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wczogX2V4dGVuZHMoe1xuICAgICAgICBpZDogaWRcbiAgICAgIH0sIFNlbGVjdERpc3BsYXlQcm9wcylcbiAgICB9KSwgaW5wdXRQcm9wcyksIHt9LCB7XG4gICAgICBjbGFzc2VzOiBpbnB1dFByb3BzID8gbWVyZ2VDbGFzc2VzKHtcbiAgICAgICAgYmFzZUNsYXNzZXM6IGNsYXNzZXMsXG4gICAgICAgIG5ld0NsYXNzZXM6IGlucHV0UHJvcHMuY2xhc3NlcyxcbiAgICAgICAgQ29tcG9uZW50OiBTZWxlY3RcbiAgICAgIH0pIDogY2xhc3Nlc1xuICAgIH0sIGlucHV0ID8gaW5wdXQucHJvcHMuaW5wdXRQcm9wcyA6IHt9KSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTZWxlY3QucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgd2lkdGggb2YgdGhlIHBvcG92ZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHNldCBhY2NvcmRpbmcgdG8gdGhlIGl0ZW1zIGluc2lkZSB0aGVcbiAgICogbWVudSwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgYXQgbGVhc3QgdGhlIHdpZHRoIG9mIHRoZSBzZWxlY3QgaW5wdXQuXG4gICAqL1xuICBhdXRvV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYE1lbnVJdGVtYCB3aGVuIGBuYXRpdmVgIGlzIGZhbHNlIGFuZCBgb3B0aW9uYCB3aGVuIGBuYXRpdmVgIGlzIHRydWUuXG4gICAqXG4gICAqIOKaoO+4j1RoZSBgTWVudUl0ZW1gIGVsZW1lbnRzICoqbXVzdCoqIGJlIGRpcmVjdCBkZXNjZW5kYW50cyB3aGVuIGBuYXRpdmVgIGlzIGZhbHNlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGVsZW1lbnQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB2YWx1ZSBpcyBkaXNwbGF5ZWQgZXZlbiBpZiBubyBpdGVtcyBhcmUgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEluIG9yZGVyIHRvIGRpc3BsYXkgYSBtZWFuaW5nZnVsIHZhbHVlLCBhIGZ1bmN0aW9uIHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIGByZW5kZXJWYWx1ZWAgcHJvcCB3aGljaCByZXR1cm5zIHRoZSB2YWx1ZSB0byBiZSBkaXNwbGF5ZWQgd2hlbiBubyBpdGVtcyBhcmUgc2VsZWN0ZWQuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICovXG4gIGRpc3BsYXlFbXB0eTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgYGlkYCBvZiB0aGUgd3JhcHBlciBlbGVtZW50IG9yIHRoZSBgc2VsZWN0YCBlbGVtZW50IHdoZW4gYG5hdGl2ZWAuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQW4gYElucHV0YCBlbGVtZW50OyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgbWF0ZXJpYWwtdWkgc3BlY2lmaWMgYElucHV0YC5cbiAgICovXG4gIGlucHV0OiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFdoZW4gYG5hdGl2ZWAgaXMgYHRydWVgLCB0aGUgYXR0cmlidXRlcyBhcmUgYXBwbGllZCBvbiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFNlZSBbT3V0bGluZWRJbnB1dCNsYWJlbF0oL2FwaS9vdXRsaW5lZC1pbnB1dC8jcHJvcHMpXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiBhbiBlbGVtZW50IHRoYXQgYWN0cyBhcyBhbiBhZGRpdGlvbmFsIGxhYmVsLiBUaGUgU2VsZWN0IHdpbGxcbiAgICogYmUgbGFiZWxsZWQgYnkgdGhlIGFkZGl0aW9uYWwgbGFiZWwgYW5kIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICovXG4gIGxhYmVsSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFNlZSBbT3V0bGluZWRJbnB1dCNsYWJlbF0oL2FwaS9vdXRsaW5lZC1pbnB1dC8jcHJvcHMpXG4gICAqL1xuICBsYWJlbFdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVgXSgvYXBpL21lbnUvKSBlbGVtZW50LlxuICAgKi9cbiAgTWVudVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGB2YWx1ZWAgbXVzdCBiZSBhbiBhcnJheSBhbmQgdGhlIG1lbnUgd2lsbCBzdXBwb3J0IG11bHRpcGxlIHNlbGVjdGlvbnMuXG4gICAqL1xuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGJlIHVzaW5nIGEgbmF0aXZlIGBzZWxlY3RgIGVsZW1lbnQuXG4gICAqL1xuICBuYXRpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKGFueSkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY2hpbGRdIFRoZSByZWFjdCBlbGVtZW50IHRoYXQgd2FzIHNlbGVjdGVkIHdoZW4gYG5hdGl2ZWAgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ29udHJvbCBgc2VsZWN0YCBvcGVuIHN0YXRlLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIGB2YWx1ZWAgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHJldHVybnMge1JlYWN0Tm9kZX1cbiAgICovXG4gIHJlbmRlclZhbHVlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgY2xpY2thYmxlIGRpdiBlbGVtZW50LlxuICAgKi9cbiAgU2VsZWN0RGlzcGxheVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUuIFByb3ZpZGluZyBhbiBlbXB0eSBzdHJpbmcgd2lsbCBzZWxlY3Qgbm8gb3B0aW9ucy5cbiAgICogVGhpcyBwcm9wIGlzIHJlcXVpcmVkIHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqIFNldCB0byBhbiBlbXB0eSBzdHJpbmcgYCcnYCBpZiB5b3UgZG9uJ3Qgd2FudCBhbnkgb2YgdGhlIGF2YWlsYWJsZSBvcHRpb25zIHRvIGJlIHNlbGVjdGVkLlxuICAgKlxuICAgKiBJZiB0aGUgdmFsdWUgaXMgYW4gb2JqZWN0IGl0IG11c3QgaGF2ZSByZWZlcmVuY2UgZXF1YWxpdHkgd2l0aCB0aGUgb3B0aW9uIGluIG9yZGVyIHRvIGJlIHNlbGVjdGVkLlxuICAgKiBJZiB0aGUgdmFsdWUgaXMgbm90IGFuIG9iamVjdCwgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBtdXN0IG1hdGNoIHdpdGggdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgb3B0aW9uIGluIG9yZGVyIHRvIGJlIHNlbGVjdGVkLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcblNlbGVjdC5tdWlOYW1lID0gJ1NlbGVjdCc7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU2VsZWN0J1xufSkoU2VsZWN0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9JbnB1dCc7XG5pbXBvcnQgRmlsbGVkSW5wdXQgZnJvbSAnLi4vRmlsbGVkSW5wdXQnO1xuaW1wb3J0IE91dGxpbmVkSW5wdXQgZnJvbSAnLi4vT3V0bGluZWRJbnB1dCc7XG5pbXBvcnQgSW5wdXRMYWJlbCBmcm9tICcuLi9JbnB1dExhYmVsJztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUhlbHBlclRleHQgZnJvbSAnLi4vRm9ybUhlbHBlclRleHQnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuLi9TZWxlY3QnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xudmFyIHZhcmlhbnRDb21wb25lbnQgPSB7XG4gIHN0YW5kYXJkOiBJbnB1dCxcbiAgZmlsbGVkOiBGaWxsZWRJbnB1dCxcbiAgb3V0bGluZWQ6IE91dGxpbmVkSW5wdXRcbn07XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge31cbn07XG4vKipcbiAqIFRoZSBgVGV4dEZpZWxkYCBpcyBhIGNvbnZlbmllbmNlIHdyYXBwZXIgZm9yIHRoZSBtb3N0IGNvbW1vbiBjYXNlcyAoODAlKS5cbiAqIEl0IGNhbm5vdCBiZSBhbGwgdGhpbmdzIHRvIGFsbCBwZW9wbGUsIG90aGVyd2lzZSB0aGUgQVBJIHdvdWxkIGdyb3cgb3V0IG9mIGNvbnRyb2wuXG4gKlxuICogIyMgQWR2YW5jZWQgQ29uZmlndXJhdGlvblxuICpcbiAqIEl0J3MgaW1wb3J0YW50IHRvIHVuZGVyc3RhbmQgdGhhdCB0aGUgdGV4dCBmaWVsZCBpcyBhIHNpbXBsZSBhYnN0cmFjdGlvblxuICogb24gdG9wIG9mIHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAtIFtGb3JtQ29udHJvbF0oL2FwaS9mb3JtLWNvbnRyb2wvKVxuICogLSBbSW5wdXRMYWJlbF0oL2FwaS9pbnB1dC1sYWJlbC8pXG4gKiAtIFtGaWxsZWRJbnB1dF0oL2FwaS9maWxsZWQtaW5wdXQvKVxuICogLSBbT3V0bGluZWRJbnB1dF0oL2FwaS9vdXRsaW5lZC1pbnB1dC8pXG4gKiAtIFtJbnB1dF0oL2FwaS9pbnB1dC8pXG4gKiAtIFtGb3JtSGVscGVyVGV4dF0oL2FwaS9mb3JtLWhlbHBlci10ZXh0LylcbiAqXG4gKiBJZiB5b3Ugd2lzaCB0byBhbHRlciB0aGUgcHJvcHMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LCB5b3UgY2FuIGRvIHNvIGFzIGZvbGxvd3M6XG4gKlxuICogYGBganN4XG4gKiBjb25zdCBpbnB1dFByb3BzID0ge1xuICogICBzdGVwOiAzMDAsXG4gKiB9O1xuICpcbiAqIHJldHVybiA8VGV4dEZpZWxkIGlkPVwidGltZVwiIHR5cGU9XCJ0aW1lXCIgaW5wdXRQcm9wcz17aW5wdXRQcm9wc30gLz47XG4gKiBgYGBcbiAqXG4gKiBGb3IgYWR2YW5jZWQgY2FzZXMsIHBsZWFzZSBsb29rIGF0IHRoZSBzb3VyY2Ugb2YgVGV4dEZpZWxkIGJ5IGNsaWNraW5nIG9uIHRoZVxuICogXCJFZGl0IHRoaXMgcGFnZVwiIGJ1dHRvbiBhYm92ZS4gQ29uc2lkZXIgZWl0aGVyOlxuICpcbiAqIC0gdXNpbmcgdGhlIHVwcGVyIGNhc2UgcHJvcHMgZm9yIHBhc3NpbmcgdmFsdWVzIGRpcmVjdGx5IHRvIHRoZSBjb21wb25lbnRzXG4gKiAtIHVzaW5nIHRoZSB1bmRlcmx5aW5nIGNvbXBvbmVudHMgZGlyZWN0bHkgYXMgc2hvd24gaW4gdGhlIGRlbW9zXG4gKi9cblxudmFyIFRleHRGaWVsZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGV4dEZpZWxkKHByb3BzLCByZWYpIHtcbiAgdmFyIGF1dG9Db21wbGV0ZSA9IHByb3BzLmF1dG9Db21wbGV0ZSxcbiAgICAgIF9wcm9wcyRhdXRvRm9jdXMgPSBwcm9wcy5hdXRvRm9jdXMsXG4gICAgICBhdXRvRm9jdXMgPSBfcHJvcHMkYXV0b0ZvY3VzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRhdXRvRm9jdXMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAncHJpbWFyeScgOiBfcHJvcHMkY29sb3IsXG4gICAgICBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRlcnJvciA9IHByb3BzLmVycm9yLFxuICAgICAgZXJyb3IgPSBfcHJvcHMkZXJyb3IgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGVycm9yLFxuICAgICAgRm9ybUhlbHBlclRleHRQcm9wcyA9IHByb3BzLkZvcm1IZWxwZXJUZXh0UHJvcHMsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgaGVscGVyVGV4dCA9IHByb3BzLmhlbHBlclRleHQsXG4gICAgICBoaWRkZW5MYWJlbCA9IHByb3BzLmhpZGRlbkxhYmVsLFxuICAgICAgaWQgPSBwcm9wcy5pZCxcbiAgICAgIElucHV0TGFiZWxQcm9wcyA9IHByb3BzLklucHV0TGFiZWxQcm9wcyxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgSW5wdXRQcm9wcyA9IHByb3BzLklucHV0UHJvcHMsXG4gICAgICBpbnB1dFJlZiA9IHByb3BzLmlucHV0UmVmLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICAgIHBsYWNlaG9sZGVyID0gcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICBfcHJvcHMkcmVxdWlyZWQgPSBwcm9wcy5yZXF1aXJlZCxcbiAgICAgIHJlcXVpcmVkID0gX3Byb3BzJHJlcXVpcmVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRyZXF1aXJlZCxcbiAgICAgIHJvd3MgPSBwcm9wcy5yb3dzLFxuICAgICAgcm93c01heCA9IHByb3BzLnJvd3NNYXgsXG4gICAgICBfcHJvcHMkc2VsZWN0ID0gcHJvcHMuc2VsZWN0LFxuICAgICAgc2VsZWN0ID0gX3Byb3BzJHNlbGVjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc2VsZWN0LFxuICAgICAgU2VsZWN0UHJvcHMgPSBwcm9wcy5TZWxlY3RQcm9wcyxcbiAgICAgIHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3N0YW5kYXJkJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcIkZvcm1IZWxwZXJUZXh0UHJvcHNcIiwgXCJmdWxsV2lkdGhcIiwgXCJoZWxwZXJUZXh0XCIsIFwiaGlkZGVuTGFiZWxcIiwgXCJpZFwiLCBcIklucHV0TGFiZWxQcm9wc1wiLCBcImlucHV0UHJvcHNcIiwgXCJJbnB1dFByb3BzXCIsIFwiaW5wdXRSZWZcIiwgXCJsYWJlbFwiLCBcIm11bHRpbGluZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uRm9jdXNcIiwgXCJwbGFjZWhvbGRlclwiLCBcInJlcXVpcmVkXCIsIFwicm93c1wiLCBcInJvd3NNYXhcIiwgXCJzZWxlY3RcIiwgXCJTZWxlY3RQcm9wc1wiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHNlbGVjdCAmJiAhY2hpbGRyZW4pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBgY2hpbGRyZW5gIG11c3QgYmUgcGFzc2VkIHdoZW4gdXNpbmcgdGhlIGBUZXh0RmllbGRgIGNvbXBvbmVudCB3aXRoIGBzZWxlY3RgLicpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBJbnB1dE1vcmUgPSB7fTtcblxuICBpZiAodmFyaWFudCA9PT0gJ291dGxpbmVkJykge1xuICAgIGlmIChJbnB1dExhYmVsUHJvcHMgJiYgdHlwZW9mIElucHV0TGFiZWxQcm9wcy5zaHJpbmsgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBJbnB1dE1vcmUubm90Y2hlZCA9IElucHV0TGFiZWxQcm9wcy5zaHJpbms7XG4gICAgfVxuXG4gICAgaWYgKGxhYmVsKSB7XG4gICAgICB2YXIgX0lucHV0TGFiZWxQcm9wcyRyZXF1O1xuXG4gICAgICB2YXIgZGlzcGxheVJlcXVpcmVkID0gKF9JbnB1dExhYmVsUHJvcHMkcmVxdSA9IElucHV0TGFiZWxQcm9wcyA9PT0gbnVsbCB8fCBJbnB1dExhYmVsUHJvcHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IElucHV0TGFiZWxQcm9wcy5yZXF1aXJlZCkgIT09IG51bGwgJiYgX0lucHV0TGFiZWxQcm9wcyRyZXF1ICE9PSB2b2lkIDAgPyBfSW5wdXRMYWJlbFByb3BzJHJlcXUgOiByZXF1aXJlZDtcbiAgICAgIElucHV0TW9yZS5sYWJlbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBsYWJlbCwgZGlzcGxheVJlcXVpcmVkICYmIFwiXFx4QTAqXCIpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzZWxlY3QpIHtcbiAgICAvLyB1bnNldCBkZWZhdWx0cyBmcm9tIHRleHRib3ggaW5wdXRzXG4gICAgaWYgKCFTZWxlY3RQcm9wcyB8fCAhU2VsZWN0UHJvcHMubmF0aXZlKSB7XG4gICAgICBJbnB1dE1vcmUuaWQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgSW5wdXRNb3JlWydhcmlhLWRlc2NyaWJlZGJ5J10gPSB1bmRlZmluZWQ7XG4gIH1cblxuICB2YXIgaGVscGVyVGV4dElkID0gaGVscGVyVGV4dCAmJiBpZCA/IFwiXCIuY29uY2F0KGlkLCBcIi1oZWxwZXItdGV4dFwiKSA6IHVuZGVmaW5lZDtcbiAgdmFyIGlucHV0TGFiZWxJZCA9IGxhYmVsICYmIGlkID8gXCJcIi5jb25jYXQoaWQsIFwiLWxhYmVsXCIpIDogdW5kZWZpbmVkO1xuICB2YXIgSW5wdXRDb21wb25lbnQgPSB2YXJpYW50Q29tcG9uZW50W3ZhcmlhbnRdO1xuICB2YXIgSW5wdXRFbGVtZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogaGVscGVyVGV4dElkLFxuICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcm93czogcm93cyxcbiAgICByb3dzTWF4OiByb3dzTWF4LFxuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGlkOiBpZCxcbiAgICBpbnB1dFJlZjogaW5wdXRSZWYsXG4gICAgb25CbHVyOiBvbkJsdXIsXG4gICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgIG9uRm9jdXM6IG9uRm9jdXMsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIGlucHV0UHJvcHM6IGlucHV0UHJvcHNcbiAgfSwgSW5wdXRNb3JlLCBJbnB1dFByb3BzKSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udHJvbCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGVycm9yOiBlcnJvcixcbiAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICBoaWRkZW5MYWJlbDogaGlkZGVuTGFiZWwsXG4gICAgcmVmOiByZWYsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIGNvbG9yOiBjb2xvcixcbiAgICB2YXJpYW50OiB2YXJpYW50XG4gIH0sIG90aGVyKSwgbGFiZWwgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRMYWJlbCwgX2V4dGVuZHMoe1xuICAgIGh0bWxGb3I6IGlkLFxuICAgIGlkOiBpbnB1dExhYmVsSWRcbiAgfSwgSW5wdXRMYWJlbFByb3BzKSwgbGFiZWwpLCBzZWxlY3QgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3QsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogaGVscGVyVGV4dElkLFxuICAgIGlkOiBpZCxcbiAgICBsYWJlbElkOiBpbnB1dExhYmVsSWQsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGlucHV0OiBJbnB1dEVsZW1lbnRcbiAgfSwgU2VsZWN0UHJvcHMpLCBjaGlsZHJlbikgOiBJbnB1dEVsZW1lbnQsIGhlbHBlclRleHQgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUhlbHBlclRleHQsIF9leHRlbmRzKHtcbiAgICBpZDogaGVscGVyVGV4dElkXG4gIH0sIEZvcm1IZWxwZXJUZXh0UHJvcHMpLCBoZWxwZXJUZXh0KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRGaWVsZC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BGb3JtSGVscGVyVGV4dGBdKC9hcGkvZm9ybS1oZWxwZXItdGV4dC8pIGVsZW1lbnQuXG4gICAqL1xuICBGb3JtSGVscGVyVGV4dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBoZWxwZXIgdGV4dCBjb250ZW50LlxuICAgKi9cbiAgaGVscGVyVGV4dDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhpZGRlbkxhYmVsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFVzZSB0aGlzIHByb3AgdG8gbWFrZSBgbGFiZWxgIGFuZCBgaGVscGVyVGV4dGAgYWNjZXNzaWJsZSBmb3Igc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BJbnB1dExhYmVsYF0oL2FwaS9pbnB1dC1sYWJlbC8pIGVsZW1lbnQuXG4gICAqL1xuICBJbnB1dExhYmVsUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgSW5wdXQgZWxlbWVudC5cbiAgICogSXQgd2lsbCBiZSBhIFtgRmlsbGVkSW5wdXRgXSgvYXBpL2ZpbGxlZC1pbnB1dC8pLFxuICAgKiBbYE91dGxpbmVkSW5wdXRgXSgvYXBpL291dGxpbmVkLWlucHV0Lykgb3IgW2BJbnB1dGBdKC9hcGkvaW5wdXQvKVxuICAgKiBjb21wb25lbnQgZGVwZW5kaW5nIG9uIHRoZSBgdmFyaWFudGAgcHJvcCB2YWx1ZS5cbiAgICovXG4gIElucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgY29udGVudC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCBvciBgbm9ybWFsYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZyBvZiB0aGlzIGFuZCBjb250YWluZWQgY29tcG9uZW50cy5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZScsICdub3JtYWwnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQgaW5zdGVhZCBvZiBhbiBpbnB1dC5cbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBkaXNwbGF5ZWQgYXMgcmVxdWlyZWQgYW5kIHRoZSBgaW5wdXRgIGVsZW1lbnRgIHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgYSBbYFNlbGVjdGBdKC9hcGkvc2VsZWN0LykgZWxlbWVudCB3aGlsZSBwYXNzaW5nIHRoZSBJbnB1dCBlbGVtZW50IHRvIGBTZWxlY3RgIGFzIGBpbnB1dGAgcGFyYW1ldGVyLlxuICAgKiBJZiB0aGlzIG9wdGlvbiBpcyBzZXQgeW91IG11c3QgcGFzcyB0aGUgb3B0aW9ucyBvZiB0aGUgc2VsZWN0IGFzIGNoaWxkcmVuLlxuICAgKi9cbiAgc2VsZWN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BTZWxlY3RgXSgvYXBpL3NlbGVjdC8pIGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3RQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIHRleHQgZmllbGQuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydtZWRpdW0nLCAnc21hbGwnXSksXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGV4dEZpZWxkJ1xufSkoVGV4dEZpZWxkKTsiLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuXG5mdW5jdGlvbiBvbWl0KGlucHV0LCBmaWVsZHMpIHtcbiAgdmFyIG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhpbnB1dCkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIGlmIChmaWVsZHMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgIG91dHB1dFtwcm9wXSA9IGlucHV0W3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGNzcyhzdHlsZUZ1bmN0aW9uKSB7XG4gIHZhciBuZXdTdHlsZUZ1bmN0aW9uID0gZnVuY3Rpb24gbmV3U3R5bGVGdW5jdGlvbihwcm9wcykge1xuICAgIHZhciBvdXRwdXQgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcblxuICAgIGlmIChwcm9wcy5jc3MpIHtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgbWVyZ2Uob3V0cHV0LCBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgdGhlbWU6IHByb3BzLnRoZW1lXG4gICAgICB9LCBwcm9wcy5jc3MpKSkpLCBvbWl0KHByb3BzLmNzcywgW3N0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHNdKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICBuZXdTdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgc3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMpLCB7fSwge1xuICAgIGNzczogUHJvcFR5cGVzLm9iamVjdFxuICB9KSA6IHt9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzID0gWydjc3MnXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMpKTtcbiAgcmV0dXJuIG5ld1N0eWxlRnVuY3Rpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNzczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcblxuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN0eWxlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBzdHlsZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgZm4gPSBmdW5jdGlvbiBmbihwcm9wcykge1xuICAgIHJldHVybiBzdHlsZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHN0eWxlKSB7XG4gICAgICB2YXIgb3V0cHV0ID0gc3R5bGUocHJvcHMpO1xuXG4gICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgIHJldHVybiBtZXJnZShhY2MsIG91dHB1dCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9OyAvLyBBbHRlcm5hdGl2ZSBhcHByb2FjaCB0aGF0IGRvZXNuJ3QgeWllbGQgYW55IHBlcmZvcm1hbmNlIGdhaW4uXG4gIC8vIGNvbnN0IGhhbmRsZXJzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4ge1xuICAvLyAgIHN0eWxlLmZpbHRlclByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gIC8vICAgICBhY2NbcHJvcF0gPSBzdHlsZTtcbiAgLy8gICB9KTtcbiAgLy8gICByZXR1cm4gYWNjO1xuICAvLyB9LCB7fSk7XG4gIC8vIGNvbnN0IGZuID0gcHJvcHMgPT4ge1xuICAvLyAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKChhY2MsIHByb3ApID0+IHtcbiAgLy8gICAgIGlmIChoYW5kbGVyc1twcm9wXSkge1xuICAvLyAgICAgICByZXR1cm4gbWVyZ2UoYWNjLCBoYW5kbGVyc1twcm9wXShwcm9wcykpO1xuICAvLyAgICAgfVxuICAvLyAgICAgcmV0dXJuIGFjYztcbiAgLy8gICB9LCB7fSk7XG4gIC8vIH07XG5cblxuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gc3R5bGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdHlsZSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyhhY2MsIHN0eWxlLnByb3BUeXBlcyk7XG4gIH0sIHt9KSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IHN0eWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc3R5bGUpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChzdHlsZS5maWx0ZXJQcm9wcyk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIGZuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb3NlOyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5cbmZ1bmN0aW9uIGdldFBhdGgob2JqLCBwYXRoKSB7XG4gIGlmICghcGF0aCB8fCB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwYXRoLnNwbGl0KCcuJykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGl0ZW0pIHtcbiAgICByZXR1cm4gYWNjICYmIGFjY1tpdGVtXSA/IGFjY1tpdGVtXSA6IG51bGw7XG4gIH0sIG9iaik7XG59XG5cbmZ1bmN0aW9uIHN0eWxlKG9wdGlvbnMpIHtcbiAgdmFyIHByb3AgPSBvcHRpb25zLnByb3AsXG4gICAgICBfb3B0aW9ucyRjc3NQcm9wZXJ0eSA9IG9wdGlvbnMuY3NzUHJvcGVydHksXG4gICAgICBjc3NQcm9wZXJ0eSA9IF9vcHRpb25zJGNzc1Byb3BlcnR5ID09PSB2b2lkIDAgPyBvcHRpb25zLnByb3AgOiBfb3B0aW9ucyRjc3NQcm9wZXJ0eSxcbiAgICAgIHRoZW1lS2V5ID0gb3B0aW9ucy50aGVtZUtleSxcbiAgICAgIHRyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gIHZhciBmbiA9IGZ1bmN0aW9uIGZuKHByb3BzKSB7XG4gICAgaWYgKHByb3BzW3Byb3BdID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgICB2YXIgdGhlbWVNYXBwaW5nID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXkpIHx8IHt9O1xuXG4gICAgdmFyIHN0eWxlRnJvbVByb3BWYWx1ZSA9IGZ1bmN0aW9uIHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVGaW5hbCkge1xuICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICBpZiAodHlwZW9mIHRoZW1lTWFwcGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IHRoZW1lTWFwcGluZyhwcm9wVmFsdWVGaW5hbCk7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVNYXBwaW5nKSkge1xuICAgICAgICB2YWx1ZSA9IHRoZW1lTWFwcGluZ1twcm9wVmFsdWVGaW5hbF0gfHwgcHJvcFZhbHVlRmluYWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGdldFBhdGgodGhlbWVNYXBwaW5nLCBwcm9wVmFsdWVGaW5hbCkgfHwgcHJvcFZhbHVlRmluYWw7XG5cbiAgICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICAgIHZhbHVlID0gdHJhbnNmb3JtKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY3NzUHJvcGVydHkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgY3NzUHJvcGVydHksIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH07XG5cbiAgZm4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9kZWZpbmVQcm9wZXJ0eSh7fSwgcHJvcCwgcmVzcG9uc2l2ZVByb3BUeXBlKSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IFtwcm9wXTtcbiAgcmV0dXJuIGZuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsZTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuXG5mdW5jdGlvbiBnZXRCb3JkZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gXCJcIi5jb25jYXQodmFsdWUsIFwicHggc29saWRcIik7XG59XG5cbmV4cG9ydCB2YXIgYm9yZGVyID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IHZhciBib3JkZXJUb3AgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJUb3AnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgdmFyIGJvcmRlclJpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyUmlnaHQnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgdmFyIGJvcmRlckJvdHRvbSA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckJvdHRvbScsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCB2YXIgYm9yZGVyTGVmdCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckxlZnQnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgdmFyIGJvcmRlckNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCB2YXIgYm9yZGVyUmFkaXVzID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyUmFkaXVzJyxcbiAgdGhlbWVLZXk6ICdzaGFwZSdcbn0pO1xudmFyIGJvcmRlcnMgPSBjb21wb3NlKGJvcmRlciwgYm9yZGVyVG9wLCBib3JkZXJSaWdodCwgYm9yZGVyQm90dG9tLCBib3JkZXJMZWZ0LCBib3JkZXJDb2xvciwgYm9yZGVyUmFkaXVzKTtcbmV4cG9ydCBkZWZhdWx0IGJvcmRlcnM7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCB2YXIgZGlzcGxheVByaW50ID0gc3R5bGUoe1xuICBwcm9wOiAnZGlzcGxheVByaW50JyxcbiAgY3NzUHJvcGVydHk6IGZhbHNlLFxuICB0cmFuc2Zvcm06IGZ1bmN0aW9uIHRyYW5zZm9ybSh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgICBkaXNwbGF5OiB2YWx1ZVxuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xuZXhwb3J0IHZhciBkaXNwbGF5UmF3ID0gc3R5bGUoe1xuICBwcm9wOiAnZGlzcGxheSdcbn0pO1xuZXhwb3J0IHZhciBvdmVyZmxvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ292ZXJmbG93J1xufSk7XG5leHBvcnQgdmFyIHRleHRPdmVyZmxvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ3RleHRPdmVyZmxvdydcbn0pO1xuZXhwb3J0IHZhciB2aXNpYmlsaXR5ID0gc3R5bGUoe1xuICBwcm9wOiAndmlzaWJpbGl0eSdcbn0pO1xuZXhwb3J0IHZhciB3aGl0ZVNwYWNlID0gc3R5bGUoe1xuICBwcm9wOiAnd2hpdGVTcGFjZSdcbn0pO1xuZXhwb3J0IGRlZmF1bHQgY29tcG9zZShkaXNwbGF5UHJpbnQsIGRpc3BsYXlSYXcsIG92ZXJmbG93LCB0ZXh0T3ZlcmZsb3csIHZpc2liaWxpdHksIHdoaXRlU3BhY2UpOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgdmFyIGZsZXhCYXNpcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhCYXNpcydcbn0pO1xuZXhwb3J0IHZhciBmbGV4RGlyZWN0aW9uID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleERpcmVjdGlvbidcbn0pO1xuZXhwb3J0IHZhciBmbGV4V3JhcCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhXcmFwJ1xufSk7XG5leHBvcnQgdmFyIGp1c3RpZnlDb250ZW50ID0gc3R5bGUoe1xuICBwcm9wOiAnanVzdGlmeUNvbnRlbnQnXG59KTtcbmV4cG9ydCB2YXIgYWxpZ25JdGVtcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2FsaWduSXRlbXMnXG59KTtcbmV4cG9ydCB2YXIgYWxpZ25Db250ZW50ID0gc3R5bGUoe1xuICBwcm9wOiAnYWxpZ25Db250ZW50J1xufSk7XG5leHBvcnQgdmFyIG9yZGVyID0gc3R5bGUoe1xuICBwcm9wOiAnb3JkZXInXG59KTtcbmV4cG9ydCB2YXIgZmxleCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXgnXG59KTtcbmV4cG9ydCB2YXIgZmxleEdyb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4R3Jvdydcbn0pO1xuZXhwb3J0IHZhciBmbGV4U2hyaW5rID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleFNocmluaydcbn0pO1xuZXhwb3J0IHZhciBhbGlnblNlbGYgPSBzdHlsZSh7XG4gIHByb3A6ICdhbGlnblNlbGYnXG59KTtcbmV4cG9ydCB2YXIganVzdGlmeUl0ZW1zID0gc3R5bGUoe1xuICBwcm9wOiAnanVzdGlmeUl0ZW1zJ1xufSk7XG5leHBvcnQgdmFyIGp1c3RpZnlTZWxmID0gc3R5bGUoe1xuICBwcm9wOiAnanVzdGlmeVNlbGYnXG59KTtcbnZhciBmbGV4Ym94ID0gY29tcG9zZShmbGV4QmFzaXMsIGZsZXhEaXJlY3Rpb24sIGZsZXhXcmFwLCBqdXN0aWZ5Q29udGVudCwgYWxpZ25JdGVtcywgYWxpZ25Db250ZW50LCBvcmRlciwgZmxleCwgZmxleEdyb3csIGZsZXhTaHJpbmssIGFsaWduU2VsZiwganVzdGlmeUl0ZW1zLCBqdXN0aWZ5U2VsZik7XG5leHBvcnQgZGVmYXVsdCBmbGV4Ym94OyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgdmFyIGdyaWRHYXAgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkR2FwJ1xufSk7XG5leHBvcnQgdmFyIGdyaWRDb2x1bW5HYXAgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQ29sdW1uR2FwJ1xufSk7XG5leHBvcnQgdmFyIGdyaWRSb3dHYXAgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkUm93R2FwJ1xufSk7XG5leHBvcnQgdmFyIGdyaWRDb2x1bW4gPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQ29sdW1uJ1xufSk7XG5leHBvcnQgdmFyIGdyaWRSb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkUm93J1xufSk7XG5leHBvcnQgdmFyIGdyaWRBdXRvRmxvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvRmxvdydcbn0pO1xuZXhwb3J0IHZhciBncmlkQXV0b0NvbHVtbnMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0NvbHVtbnMnXG59KTtcbmV4cG9ydCB2YXIgZ3JpZEF1dG9Sb3dzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9Sb3dzJ1xufSk7XG5leHBvcnQgdmFyIGdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVDb2x1bW5zJ1xufSk7XG5leHBvcnQgdmFyIGdyaWRUZW1wbGF0ZVJvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVSb3dzJ1xufSk7XG5leHBvcnQgdmFyIGdyaWRUZW1wbGF0ZUFyZWFzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQXJlYXMnXG59KTtcbmV4cG9ydCB2YXIgZ3JpZEFyZWEgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXJlYSdcbn0pO1xudmFyIGdyaWQgPSBjb21wb3NlKGdyaWRHYXAsIGdyaWRDb2x1bW5HYXAsIGdyaWRSb3dHYXAsIGdyaWRDb2x1bW4sIGdyaWRSb3csIGdyaWRBdXRvRmxvdywgZ3JpZEF1dG9Db2x1bW5zLCBncmlkQXV0b1Jvd3MsIGdyaWRUZW1wbGF0ZUNvbHVtbnMsIGdyaWRUZW1wbGF0ZVJvd3MsIGdyaWRUZW1wbGF0ZUFyZWFzLCBncmlkQXJlYSk7XG5leHBvcnQgZGVmYXVsdCBncmlkOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgdmFyIHBvc2l0aW9uID0gc3R5bGUoe1xuICBwcm9wOiAncG9zaXRpb24nXG59KTtcbmV4cG9ydCB2YXIgekluZGV4ID0gc3R5bGUoe1xuICBwcm9wOiAnekluZGV4JyxcbiAgdGhlbWVLZXk6ICd6SW5kZXgnXG59KTtcbmV4cG9ydCB2YXIgdG9wID0gc3R5bGUoe1xuICBwcm9wOiAndG9wJ1xufSk7XG5leHBvcnQgdmFyIHJpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAncmlnaHQnXG59KTtcbmV4cG9ydCB2YXIgYm90dG9tID0gc3R5bGUoe1xuICBwcm9wOiAnYm90dG9tJ1xufSk7XG5leHBvcnQgdmFyIGxlZnQgPSBzdHlsZSh7XG4gIHByb3A6ICdsZWZ0J1xufSk7XG5leHBvcnQgZGVmYXVsdCBjb21wb3NlKHBvc2l0aW9uLCB6SW5kZXgsIHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCk7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCB2YXIgY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdjb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IHZhciBiZ2NvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYmdjb2xvcicsXG4gIGNzc1Byb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG52YXIgcGFsZXR0ZSA9IGNvbXBvc2UoY29sb3IsIGJnY29sb3IpO1xuZXhwb3J0IGRlZmF1bHQgcGFsZXR0ZTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG52YXIgYm94U2hhZG93ID0gc3R5bGUoe1xuICBwcm9wOiAnYm94U2hhZG93JyxcbiAgdGhlbWVLZXk6ICdzaGFkb3dzJ1xufSk7XG5leHBvcnQgZGVmYXVsdCBib3hTaGFkb3c7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcblxuZnVuY3Rpb24gdHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8PSAxID8gXCJcIi5jb25jYXQodmFsdWUgKiAxMDAsIFwiJVwiKSA6IHZhbHVlO1xufVxuXG5leHBvcnQgdmFyIHdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnd2lkdGgnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnQgdmFyIG1heFdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnbWF4V2lkdGgnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnQgdmFyIG1pbldpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnbWluV2lkdGgnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnQgdmFyIGhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2hlaWdodCcsXG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtXG59KTtcbmV4cG9ydCB2YXIgbWF4SGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWF4SGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IHZhciBtaW5IZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5IZWlnaHQnLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxufSk7XG5leHBvcnQgdmFyIHNpemVXaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3NpemUnLFxuICBjc3NQcm9wZXJ0eTogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IHZhciBzaXplSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IHZhciBib3hTaXppbmcgPSBzdHlsZSh7XG4gIHByb3A6ICdib3hTaXppbmcnXG59KTtcbnZhciBzaXppbmcgPSBjb21wb3NlKHdpZHRoLCBtYXhXaWR0aCwgbWluV2lkdGgsIGhlaWdodCwgbWF4SGVpZ2h0LCBtaW5IZWlnaHQsIGJveFNpemluZyk7XG5leHBvcnQgZGVmYXVsdCBzaXppbmc7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCB2YXIgZm9udEZhbWlseSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRGYW1pbHknLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCB2YXIgZm9udFNpemUgPSBzdHlsZSh7XG4gIHByb3A6ICdmb250U2l6ZScsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0IHZhciBmb250U3R5bGUgPSBzdHlsZSh7XG4gIHByb3A6ICdmb250U3R5bGUnLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCB2YXIgZm9udFdlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRXZWlnaHQnLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCB2YXIgbGV0dGVyU3BhY2luZyA9IHN0eWxlKHtcbiAgcHJvcDogJ2xldHRlclNwYWNpbmcnXG59KTtcbmV4cG9ydCB2YXIgbGluZUhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2xpbmVIZWlnaHQnXG59KTtcbmV4cG9ydCB2YXIgdGV4dEFsaWduID0gc3R5bGUoe1xuICBwcm9wOiAndGV4dEFsaWduJ1xufSk7XG52YXIgdHlwb2dyYXBoeSA9IGNvbXBvc2UoZm9udEZhbWlseSwgZm9udFNpemUsIGZvbnRTdHlsZSwgZm9udFdlaWdodCwgbGV0dGVyU3BhY2luZywgbGluZUhlaWdodCwgdGV4dEFsaWduKTtcbmV4cG9ydCBkZWZhdWx0IHR5cG9ncmFwaHk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzLCBnZXREaXNwbGF5TmFtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IG1ha2VTdHlsZXMgZnJvbSAnLi4vbWFrZVN0eWxlcyc7XG5cbmZ1bmN0aW9uIG9taXQoaW5wdXQsIGZpZWxkcykge1xuICB2YXIgb3V0cHV0ID0ge307XG4gIE9iamVjdC5rZXlzKGlucHV0KS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgaWYgKGZpZWxkcy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgb3V0cHV0W3Byb3BdID0gaW5wdXRbcHJvcF07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0gLy8gc3R5bGVkLWNvbXBvbmVudHMncyBBUEkgcmVtb3ZlcyB0aGUgbWFwcGluZyBiZXR3ZWVuIGNvbXBvbmVudHMgYW5kIHN0eWxlcy5cbi8vIFVzaW5nIGNvbXBvbmVudHMgYXMgYSBsb3ctbGV2ZWwgc3R5bGluZyBjb25zdHJ1Y3QgY2FuIGJlIHNpbXBsZXIuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3R5bGVkKENvbXBvbmVudCkge1xuICB2YXIgY29tcG9uZW50Q3JlYXRvciA9IGZ1bmN0aW9uIGNvbXBvbmVudENyZWF0b3Ioc3R5bGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSxcbiAgICAgICAgc3R5bGVzT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJuYW1lXCJdKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIENvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoWydZb3UgYXJlIGNhbGxpbmcgc3R5bGVkKENvbXBvbmVudCkoc3R5bGUpIHdpdGggYW4gdW5kZWZpbmVkIGNvbXBvbmVudC4nLCAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBpbXBvcnQgaXQuJ10uam9pbignXFxuJykpO1xuICAgIH1cblxuICAgIHZhciBjbGFzc05hbWVQcmVmaXggPSBuYW1lO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAvLyBQcm92aWRlIGEgYmV0dGVyIERYIG91dHNpZGUgcHJvZHVjdGlvbi5cbiAgICAgICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZGlzcGxheU5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsYXNzTmFtZVByZWZpeCA9IGRpc3BsYXlOYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlc09yQ3JlYXRvciA9IHR5cGVvZiBzdHlsZSA9PT0gJ2Z1bmN0aW9uJyA/IGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDogZnVuY3Rpb24gcm9vdChwcm9wcykge1xuICAgICAgICAgIHJldHVybiBzdHlsZShfZXh0ZW5kcyh7XG4gICAgICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgICAgICB9LCBwcm9wcykpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gOiB7XG4gICAgICByb290OiBzdHlsZVxuICAgIH07XG4gICAgdmFyIHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoc3R5bGVzT3JDcmVhdG9yLCBfZXh0ZW5kcyh7XG4gICAgICBDb21wb25lbnQ6IENvbXBvbmVudCxcbiAgICAgIG5hbWU6IG5hbWUgfHwgQ29tcG9uZW50LmRpc3BsYXlOYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4OiBjbGFzc05hbWVQcmVmaXhcbiAgICB9LCBzdHlsZXNPcHRpb25zKSk7XG4gICAgdmFyIGZpbHRlclByb3BzO1xuICAgIHZhciBwcm9wVHlwZXMgPSB7fTtcblxuICAgIGlmIChzdHlsZS5maWx0ZXJQcm9wcykge1xuICAgICAgZmlsdGVyUHJvcHMgPSBzdHlsZS5maWx0ZXJQcm9wcztcbiAgICAgIGRlbGV0ZSBzdHlsZS5maWx0ZXJQcm9wcztcbiAgICB9XG4gICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QvZm9yYmlkLWZvcmVpZ24tcHJvcC10eXBlcyAqL1xuXG5cbiAgICBpZiAoc3R5bGUucHJvcFR5cGVzKSB7XG4gICAgICBwcm9wVHlwZXMgPSBzdHlsZS5wcm9wVHlwZXM7XG4gICAgICBkZWxldGUgc3R5bGUucHJvcFR5cGVzO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0L2ZvcmJpZC1mb3JlaWduLXByb3AtdHlwZXMgKi9cblxuXG4gICAgdmFyIFN0eWxlZENvbXBvbmVudCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN0eWxlZENvbXBvbmVudChwcm9wcywgcmVmKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGNsb25lID0gcHJvcHMuY2xvbmUsXG4gICAgICAgICAgQ29tcG9uZW50UHJvcCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjbG9uZVwiLCBcImNvbXBvbmVudFwiXSk7XG5cbiAgICAgIHZhciBjbGFzc2VzID0gdXNlU3R5bGVzKHByb3BzKTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lUHJvcCk7XG4gICAgICB2YXIgc3ByZWFkID0gb3RoZXI7XG5cbiAgICAgIGlmIChmaWx0ZXJQcm9wcykge1xuICAgICAgICBzcHJlYWQgPSBvbWl0KHNwcmVhZCwgZmlsdGVyUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2xvbmUpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpXG4gICAgICAgIH0sIHNwcmVhZCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbihfZXh0ZW5kcyh7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgICAgfSwgc3ByZWFkKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBGaW5hbENvbXBvbmVudCA9IENvbXBvbmVudFByb3AgfHwgQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpbmFsQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogcmVmLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgICAgfSwgc3ByZWFkKSwgY2hpbGRyZW4pO1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0eWxlZENvbXBvbmVudC5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7XG4gICAgICAvKipcbiAgICAgICAqIEEgcmVuZGVyIGZ1bmN0aW9uIG9yIG5vZGUuXG4gICAgICAgKi9cbiAgICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAaWdub3JlXG4gICAgICAgKi9cbiAgICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgICAgLyoqXG4gICAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCByZWN5Y2xlIGl0J3MgY2hpbGRyZW4gSFRNTCBlbGVtZW50LlxuICAgICAgICogSXQncyB1c2luZyBgUmVhY3QuY2xvbmVFbGVtZW50YCBpbnRlcm5hbGx5LlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgcHJvcCB3aWxsIGJlIGRlcHJlY2F0ZWQgYW5kIHJlbW92ZWQgaW4gdjVcbiAgICAgICAqL1xuICAgICAgY2xvbmU6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ib29sLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgaWYgKHByb3BzLmNsb25lICYmIHByb3BzLmNvbXBvbmVudCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1lvdSBjYW4gbm90IHVzZSB0aGUgY2xvbmUgYW5kIGNvbXBvbmVudCBwcm9wIGF0IHRoZSBzYW1lIHRpbWUuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pLFxuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICAgICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gICAgICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gICAgICAuZWxlbWVudFR5cGVcbiAgICB9LCBwcm9wVHlwZXMpIDogdm9pZCAwO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFN0eWxlZENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFwiU3R5bGVkKFwiLmNvbmNhdChjbGFzc05hbWVQcmVmaXgsIFwiKVwiKTtcbiAgICB9XG5cbiAgICBob2lzdE5vblJlYWN0U3RhdGljcyhTdHlsZWRDb21wb25lbnQsIENvbXBvbmVudCk7XG4gICAgcmV0dXJuIFN0eWxlZENvbXBvbmVudDtcbiAgfTtcblxuICByZXR1cm4gY29tcG9uZW50Q3JlYXRvcjtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IHN0eWxlZCBhcyBzdHlsZWRXaXRob3V0RGVmYXVsdCB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5cbnZhciBzdHlsZWQgPSBmdW5jdGlvbiBzdHlsZWQoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnRDcmVhdG9yID0gc3R5bGVkV2l0aG91dERlZmF1bHQoQ29tcG9uZW50KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBjb21wb25lbnRDcmVhdG9yKHN0eWxlLCBfZXh0ZW5kcyh7XG4gICAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZVxuICAgIH0sIG9wdGlvbnMpKTtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDsiLCJpbXBvcnQgeyBib3JkZXJzLCBjb21wb3NlLCBkaXNwbGF5LCBmbGV4Ym94LCBncmlkLCBwYWxldHRlLCBwb3NpdGlvbnMsIHNoYWRvd3MsIHNpemluZywgc3BhY2luZywgdHlwb2dyYXBoeSwgY3NzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N5c3RlbSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuZXhwb3J0IHZhciBzdHlsZUZ1bmN0aW9uID0gY3NzKGNvbXBvc2UoYm9yZGVycywgZGlzcGxheSwgZmxleGJveCwgZ3JpZCwgcG9zaXRpb25zLCBwYWxldHRlLCBzaGFkb3dzLCBzaXppbmcsIHNwYWNpbmcsIHR5cG9ncmFwaHkpKTtcbi8qKlxuICogQGlnbm9yZSAtIGRvIG5vdCBkb2N1bWVudC5cbiAqL1xuXG52YXIgQm94ID0gc3R5bGVkKCdkaXYnKShzdHlsZUZ1bmN0aW9uLCB7XG4gIG5hbWU6ICdNdWlCb3gnXG59KTtcbmV4cG9ydCBkZWZhdWx0IEJveDsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcbmltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZSc7XG52YXIgcHJvcGVydGllcyA9IHtcbiAgbTogJ21hcmdpbicsXG4gIHA6ICdwYWRkaW5nJ1xufTtcbnZhciBkaXJlY3Rpb25zID0ge1xuICB0OiAnVG9wJyxcbiAgcjogJ1JpZ2h0JyxcbiAgYjogJ0JvdHRvbScsXG4gIGw6ICdMZWZ0JyxcbiAgeDogWydMZWZ0JywgJ1JpZ2h0J10sXG4gIHk6IFsnVG9wJywgJ0JvdHRvbSddXG59O1xudmFyIGFsaWFzZXMgPSB7XG4gIG1hcmdpblg6ICdteCcsXG4gIG1hcmdpblk6ICdteScsXG4gIHBhZGRpbmdYOiAncHgnLFxuICBwYWRkaW5nWTogJ3B5J1xufTsgLy8gbWVtb2l6ZSgpIGltcGFjdDpcbi8vIEZyb20gMzAwLDAwMCBvcHMvc2VjXG4vLyBUbyAzNTAsMDAwIG9wcy9zZWNcblxudmFyIGdldENzc1Byb3BlcnRpZXMgPSBtZW1vaXplKGZ1bmN0aW9uIChwcm9wKSB7XG4gIC8vIEl0J3Mgbm90IGEgc2hvcnRoYW5kIG5vdGF0aW9uLlxuICBpZiAocHJvcC5sZW5ndGggPiAyKSB7XG4gICAgaWYgKGFsaWFzZXNbcHJvcF0pIHtcbiAgICAgIHByb3AgPSBhbGlhc2VzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3Byb3BdO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvcCRzcGxpdCA9IHByb3Auc3BsaXQoJycpLFxuICAgICAgX3Byb3Akc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX3Byb3Akc3BsaXQsIDIpLFxuICAgICAgYSA9IF9wcm9wJHNwbGl0MlswXSxcbiAgICAgIGIgPSBfcHJvcCRzcGxpdDJbMV07XG5cbiAgdmFyIHByb3BlcnR5ID0gcHJvcGVydGllc1thXTtcbiAgdmFyIGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbYl0gfHwgJyc7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRpcmVjdGlvbikgPyBkaXJlY3Rpb24ubWFwKGZ1bmN0aW9uIChkaXIpIHtcbiAgICByZXR1cm4gcHJvcGVydHkgKyBkaXI7XG4gIH0pIDogW3Byb3BlcnR5ICsgZGlyZWN0aW9uXTtcbn0pO1xudmFyIHNwYWNpbmdLZXlzID0gWydtJywgJ210JywgJ21yJywgJ21iJywgJ21sJywgJ214JywgJ215JywgJ3AnLCAncHQnLCAncHInLCAncGInLCAncGwnLCAncHgnLCAncHknLCAnbWFyZ2luJywgJ21hcmdpblRvcCcsICdtYXJnaW5SaWdodCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5YJywgJ21hcmdpblknLCAncGFkZGluZycsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdYJywgJ3BhZGRpbmdZJ107XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKSB7XG4gIHZhciB0aGVtZVNwYWNpbmcgPSB0aGVtZS5zcGFjaW5nIHx8IDg7XG5cbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhYnMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWJzICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogRXhwZWN0ZWQgc3BhY2luZyBhcmd1bWVudCB0byBiZSBhIG51bWJlciwgZ290IFwiLmNvbmNhdChhYnMsIFwiLlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZyAqIGFicztcbiAgICB9O1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVTcGFjaW5nKSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWJzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoYWJzID4gdGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgKFwiLmNvbmNhdChhYnMsIFwiKSBvdmVyZmxvd3MuXCIpLCBcIlRoZSBzdXBwb3J0ZWQgdmFsdWVzIGFyZTogXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHRoZW1lU3BhY2luZyksIFwiLlwiKSwgXCJcIi5jb25jYXQoYWJzLCBcIiA+IFwiKS5jb25jYXQodGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEsIFwiLCB5b3UgbmVlZCB0byBhZGQgdGhlIG1pc3NpbmcgdmFsdWVzLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmdbYWJzXTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdGhlbWVTcGFjaW5nO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgYHRoZW1lLnNwYWNpbmdgIHZhbHVlIChcIi5jb25jYXQodGhlbWVTcGFjaW5nLCBcIikgaXMgaW52YWxpZC5cIiksICdJdCBzaG91bGQgYmUgYSBudW1iZXIsIGFuIGFycmF5IG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwcm9wVmFsdWU7XG4gIH1cblxuICB2YXIgYWJzID0gTWF0aC5hYnMocHJvcFZhbHVlKTtcbiAgdmFyIHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtZXIoYWJzKTtcblxuICBpZiAocHJvcFZhbHVlID49IDApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIHRyYW5zZm9ybWVkID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAtdHJhbnNmb3JtZWQ7XG4gIH1cblxuICByZXR1cm4gXCItXCIuY29uY2F0KHRyYW5zZm9ybWVkKTtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocHJvcFZhbHVlKSB7XG4gICAgcmV0dXJuIGNzc1Byb3BlcnRpZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGNzc1Byb3BlcnR5KSB7XG4gICAgICBhY2NbY3NzUHJvcGVydHldID0gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3BhY2luZyhwcm9wcykge1xuICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgdmFyIHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAvLyBVc2luZyBhIGhhc2ggY29tcHV0YXRpb24gb3ZlciBhbiBhcnJheSBpdGVyYXRpb24gY291bGQgYmUgZmFzdGVyLCBidXQgd2l0aCBvbmx5IDI4IGl0ZW1zLFxuICAgIC8vIGl0J3MgZG9lc24ndCB3b3J0aCB0aGUgYnVuZGxlIHNpemUuXG4gICAgaWYgKHNwYWNpbmdLZXlzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgY3NzUHJvcGVydGllcyA9IGdldENzc1Byb3BlcnRpZXMocHJvcCk7XG4gICAgdmFyIHN0eWxlRnJvbVByb3BWYWx1ZSA9IGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcik7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9KS5yZWR1Y2UobWVyZ2UsIHt9KTtcbn1cblxuc3BhY2luZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gc3BhY2luZ0tleXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xuc3BhY2luZy5maWx0ZXJQcm9wcyA9IHNwYWNpbmdLZXlzO1xuZXhwb3J0IGRlZmF1bHQgc3BhY2luZzsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufSJdLCJzb3VyY2VSb290IjoiIn0=